[{"word":"9_","context":[["string(REGEX REPLACE \".*cpu family[ \\t]*:[ \\t]+([a-zA-Z0-9_-]+).*\" \"\\\\1\" _cpu_family \"${_cpuinfo}\")",28],["if(arg MATCHES \"^[A-Z][A-Z0-9_][A-Z0-9_]+$\" AND",34],["if(arg MATCHES \"^[A-Z][A-Z0-9_][A-Z0-9_]+$\" AND",34],["cotire_get_source_extra_properties(\"${_sourceFile}\" \"^[a-zA-Z0-9_]+$\" _undefs ${ARGN})",38],["cotire_get_source_extra_properties(\"${_sourceFile}\" \"^[a-zA-Z0-9_]+(=.*)?$\" _definitions ${ARGN})",38],["string (REGEX MATCHALL \"COTIRE_[A-Za-z0-9_]+\" _matchVars \"${_vars}\")",38],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385],["string(REGEX MATCH \"cmake_ARCH ([a-zA-Z0-9_]+)\" ARCH \"${ARCH}\")",57],["set(_Boost_LIB_VERSION_REGEX \"\\\"([0-9_]+)\\\"\")",46]],"useCount":8604},{"word":"A","context":[["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696],["###           T H E   T E S T S  M A C R O S                               ###",62],["# graphs generated by dot. A depth value of 3 means that only nodes reachable",58],["#  A macro used to find executable programs on the host system, not within the iOS environment.",62],["STRING(REGEX MATCH \"^/|([A-Za-z]:/)\" _ABS_PATH_INDICATOR \"${_RC_FILE}\")",65],["#  A convenience macro for setting xcode specific properties on targets",65],["# Ceres Solver - A fast non-linear least squares minimizer",86],["# A CMake file for the layman",122],["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",128],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385]],"useCount":12372},{"word":"ABI","context":[["# set target ABI options",129],["# verify that target ABI is supported",129],["# choose target ABI",129],["# ABI-specific flags",130],["#      Interface (ABI). This option nearly matches to the APP_ABI variable",135],["# Save compiler ABI information.",942],["# remember target ABI",129],["#    (depending on the target ABI). This is convenient for Android packaging.",73],["#            this ABI target is used by default",72],["# Systematically build up the Boost ABI tag",66]],"useCount":2668},{"word":"ABSOLUTE","context":[["get_filename_component(ABS_FIL ${FIL} ABSOLUTE)",141],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["get_filename_component( ANDROID_NDK_TOOLCHAINS_PATH \"${ANDROID_NDK_TOOLCHAINS_PATH}\" ABSOLUTE )",104],["get_filename_component(MODULE_DIR \"${MODULE_DIR}\" ABSOLUTE)",107],["GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)",117],["get_filename_component( ANDROID_NDK \"${ANDROID_NDK}\" ABSOLUTE )",136],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["ABSOLUTE)",237],["GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)",190],["get_filename_component( ANDROID_STANDALONE_TOOLCHAIN \"${ANDROID_STANDALONE_TOOLCHAIN}\" ABSOLUTE )",136]],"useCount":7187},{"word":"ADD_CUSTOM_COMMAND","context":[["ADD_CUSTOM_COMMAND(OUTPUT ${_impl} ${_header}",89],["ADD_CUSTOM_COMMAND (",83],["ADD_CUSTOM_COMMAND(OUTPUT ${OUTFILES}",78],["ADD_CUSTOM_COMMAND(TARGET ${_targetname} POST_BUILD",189],["ADD_CUSTOM_COMMAND(OUTPUT ${outfile}",384],["ADD_CUSTOM_COMMAND(",1588],["ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD",73],["ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${file}",60],["ADD_CUSTOM_COMMAND( OUTPUT ${CONTROL_FILE}",41],["ADD_CUSTOM_COMMAND(OUTPUT ${target_name}",34]],"useCount":3133},{"word":"AND","context":[["if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})",606],["IF(EXISTS \"${file}\" AND",424],["if(UNIX AND NOT APPLE)",226],["if( NOT __availableToolchains AND NOT ANDROID_NDK_TOOLCHAINS_SUBPATH STREQUAL ANDROID_NDK_TOOLCHAINS_SUBPATH2 )",208],["if(build_cubin AND NOT generated_cubin_file)",198],["if (CUDA_HOST_COMPILER STREQUAL \"$(VCInstallDir)bin\" AND DEFINED CCBIN)",180],["if(WIN32 AND NOT CYGWIN)",160],["if(WIN32 AND MSVC)",152],["if( ccbin_found0 LESS 0 AND ccbin_found1 LESS 0 )",144],["if (UNIX AND NOT APPLE)",140]],"useCount":33464},{"word":"ANDROID_ABI","context":[["elseif( ANDROID_ABI STREQUAL \"armeabi\" )",136],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a\")",133],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a with VFPV3\" )",135],["elseif( ANDROID_ABI STREQUAL \"armeabi-v6 with VFP\" )",135],["elseif( ANDROID_ABI STREQUAL \"mips\" )",134],["if( ANDROID_ABI STREQUAL \"x86\" )",137],["list( FIND ANDROID_SUPPORTED_ABIS \"${ANDROID_ABI}\" __androidAbiIdx )",136],["#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI",135],["message( SEND_ERROR \"Unknown ANDROID_ABI=\\\"${ANDROID_ABI}\\\" is specified.\" )",136],["message( SEND_ERROR \"Unknown ANDROID_ABI=\\\"${ANDROID_ABI}\\\" is specified.\" )",136]],"useCount":2978},{"word":"ANDROID_ARCH_NAME","context":[["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["set( ANDROID_ARCH_NAME \"mips\" )",134],["set( __real_api_level ${ANDROID_DEFAULT_NDK_API_LEVEL_${ANDROID_ARCH_NAME}} )",109],["set( ANDROID_ARCH_NAME \"x86_64\" )",80],["set( ANDROID_ARCH_NAME \"mips64\" )",80],["set( ANDROID_ARCH_NAME \"arm64\" )",80],["if( ANDROID_ARCH_NAME STREQUAL \"arm\" AND NOT ARMEABI_V6 )",136],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136],["set( ANDROID_ARCH_NAME \"x86\" )",136],["set( ANDROID_ARCH_NAME \"arm\" )",681]],"useCount":2193},{"word":"ANDROID_CXX_FLAGS","context":[["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -mfpu=neon\" )",141],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -mfpu=vfpv3\" )",137],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -mfpu=neon\" )",141],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -funwind-tables\" )",178],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -funwind-tables\" )",178],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -funswitch-loops -finline-limit=300\" )",218],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -funswitch-loops -finline-limit=300\" )",218],["set( ANDROID_CXX_FLAGS \"--sysroot=${ANDROID_SYSROOT}\" )",238],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -mfpu=vfpv3\" )",137],["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -march=armv7-a -mfloat-abi=softfp\" )",136]],"useCount":5935},{"word":"ANDROID_LINKER_FLAGS","context":[["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-allow-shlib-undefined\" )",134],["set( CMAKE_MODULE_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}\" )",134],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-allow-shlib-undefined\" )",134],["set( CMAKE_EXE_LINKER_FLAGS    \"${ANDROID_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}\" )",132],["set( ANDROID_LINKER_FLAGS \"\" )",132],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,noexecstack\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,noexecstack\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["set( CMAKE_SHARED_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}\" )",134]],"useCount":2974},{"word":"ANDROID_NATIVE_API_LEVEL","context":[["list( FIND ANDROID_SUPPORTED_NATIVE_API_LEVELS \"${ANDROID_NATIVE_API_LEVEL}\" __levelIdx )",136],["#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.",129],["set_property( CACHE ANDROID_NATIVE_API_LEVEL PROPERTY STRINGS ${ANDROID_SUPPORTED_NATIVE_API_LEVELS} )",128],["ANDROID_NATIVE_API_LEVEL",113],["set( ANDROID_NATIVE_API_LEVEL ${__real_api_level} )",109],["message( STATUS \"Adjusting Android API level 'android-${ANDROID_NATIVE_API_LEVEL}' to 'android-${__real_api_level}'\")",109],["set( ANDROID_API_LEVEL ${ANDROID_NATIVE_API_LEVEL} )",75],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136]],"useCount":2457},{"word":"ANDROID_NDK","context":[["if( ANDROID_NDK )",267],["#      ANDROID_NDK - default locations",133],["#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.",133],["get_filename_component( ANDROID_NDK \"${ANDROID_NDK}\" ABSOLUTE )",136],["get_filename_component( ANDROID_NDK \"${ANDROID_NDK}\" ABSOLUTE )",136],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136],["#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",136],["if( NOT ANDROID_NDK )",136],["export ANDROID_NDK=~/my-android-ndk",140],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/system/include\" )",224]],"useCount":5170},{"word":"ANDROID_NDK_ABI_NAME","context":[["if( EXISTS \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libgnustl_static.a\" )",112],["set( ANDROID_NDK_ABI_NAME \"mips\" )",134],["set( ANDROID_NDK_ABI_NAME \"x86\" )",136],["set( ANDROID_NDK_ABI_NAME \"armeabi\" )",272],["set( ANDROID_NDK_ABI_NAME \"armeabi-v7a\" )",402],["set( __libstl                \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libstdc++.a\" )",112],["set( __libstl                \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libgnustl_static.a\" )",112],["set( __libstl                 \"${ANDROID_NDK}/sources/cxx-stl/gabi++/libs/${ANDROID_NDK_ABI_NAME}/libgabi++_static.a\" )",110],["set( ANDROID_NDK_ABI_NAME \"arm64-v8a\" )",80],["set( ANDROID_NDK_ABI_NAME \"mips64\" )",80]],"useCount":2150},{"word":"ANDROID_STANDALONE_TOOLCHAIN","context":[["#   ANDROID_STANDALONE_TOOLCHAIN",136],["get_filename_component( ANDROID_STANDALONE_TOOLCHAIN \"${ANDROID_STANDALONE_TOOLCHAIN}\" ABSOLUTE )",136],["if( NOT ANDROID_STANDALONE_TOOLCHAIN )",136],["#      ANDROID_STANDALONE_TOOLCHAIN - environment variable",135],["#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter",135],["get_filename_component( ANDROID_STANDALONE_TOOLCHAIN \"${ANDROID_STANDALONE_TOOLCHAIN}\" ABSOLUTE )",136],["if( ANDROID_STANDALONE_TOOLCHAIN )",137],["set( ANDROID_SYSROOT \"${ANDROID_STANDALONE_TOOLCHAIN}/sysroot\" )",136],["set( ANDROID_TOOLCHAIN_ROOT \"${ANDROID_STANDALONE_TOOLCHAIN}\" )",136],["__DETECT_TOOLCHAIN_MACHINE_NAME( __availableToolchainMachines \"${ANDROID_STANDALONE_TOOLCHAIN}\" )",136]],"useCount":4421},{"word":"ANDROID_STL","context":[["message( FATAL_ERROR \"ANDROID_STL is set to invalid value \\\"${ANDROID_STL}\\\".",224],["set( ANDROID_STL \"${ANDROID_STL}\" CACHE STRING \"C++ runtime\" )",112],["if( ANDROID_STL STREQUAL \"none\" )",112],["mark_as_advanced( ANDROID_STL ANDROID_STL_FORCE_FEATURES )",112],["if( NOT ANDROID_STL STREQUAL \"none\" )",112],["set( ANDROID_STL \"${ANDROID_STL}\" CACHE STRING \"C++ runtime\" )",112],["elseif( ANDROID_STL STREQUAL \"system_re\" )",112],["ANDROID_STL",118],["if( NOT ANDROID_STL )",163],["message( FATAL_ERROR \"ANDROID_STL is set to invalid value \\\"${ANDROID_STL}\\\".",224]],"useCount":2057},{"word":"API","context":[["#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.",129],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK",135],["\"/home/einstein/openairinterface5g/openair-cn/NAS/UE/API/USER\"",129],["# choose native API level",126],["\"/home/einstein/openairinterface5g/openair-cn/NAS/UE/API/USIM\"",124],["# adjust API level",109],["message( STATUS \"Adjusting Android API level 'android-${ANDROID_NATIVE_API_LEVEL}' to 'android-${__real_api_level}'\")",109],["message(FATAL_ERROR \"Minimum required by OpenCV API level is android-${OpenCV_ANDROID_NATIVE_API_LEVEL}\")",78]],"useCount":2829},{"word":"APPEND","context":[["list(APPEND ${listname} ${ARGN})",587],["list(APPEND ${VAR} \"${lib}${CATKIN_BUILD_CONFIGURATION_KEYWORD_SEPARATOR}${library}\")",588],["list(APPEND ${listname} ${_item})",607],["list(APPEND CPACK_ABSOLUTE_DESTINATION_FILES",757],["list(APPEND ${VAR} \"${lib}\")",1182],["list(APPEND CMAKE_ABSOLUTE_DESTINATION_FILES",1652],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",404],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",403],["list(APPEND _march_flag_list \"core2\")",379],["list(APPEND BLAS_SEARCH_LIBS",276]],"useCount":56236},{"word":"APPLE","context":[["if (APPLE)",1499],["ENDIF(NOT APPLE)",437],["ENDIF (APPLE)",477],["IF(NOT APPLE)",542],["elseif(APPLE)",551],["endif(APPLE)",592],["IF (APPLE)",597],["ENDIF(APPLE)",835],["IF(APPLE)",1326],["if(APPLE)",2827]],"useCount":15591},{"word":"ARCH","context":[["\"/home/einstein/openairinterface5g/targets/ARCH/COMMON\"",240],["\"/home/einstein/openairinterface5g/targets/ARCH/EXMIMO/USERSPACE/LIB\"",240],["#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",136],["#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}",136],["#   ANDROID_SUPPORTED_ABIS_${ARCH}",136],["\"/home/einstein/openairinterface5g/targets/ARCH/USRP/USERSPACE/LIB\"",119],["#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",113],["if(ARCH STREQUAL \"i386\")",76],["elseif(ARCH STREQUAL \"arm\")",70],["\"/home/einstein/openairinterface5g/targets/ARCH/EXMIMO/DEFS\"",240]],"useCount":2893},{"word":"ARGC","context":[["endif (${ARGC} GREATER 0)",148],["if(${ARGC} GREATER 3)",56],["if(${ARGC} EQUAL 3)",66],["ELSE(${ARGC} GREATER 1)",72],["ENDIF(${ARGC} GREATER 1)",74],["IF(${ARGC} GREATER 1)",75],["endif(${ARGC} GREATER 2)",80],["else (${ARGC} GREATER 0)",139],["if(${ARGC} GREATER 2)",140],["if (${ARGC} GREATER 0)",151]],"useCount":2230},{"word":"ARGN","context":[["set (_sourceFiles ${ARGN})",322],["list(APPEND ${listname} ${ARGN})",587],["list(REMOVE_ITEM ${listname} ${ARGN})",587],["set(_argn ${ARGN})",610],["if(NOT \"${ARGN}\" STREQUAL \"\")",613],["foreach(_item ${ARGN})",617],["foreach(lib ${ARGN})",642],["foreach(arg ${ARGN})",866],["${ARGN})",941],["${ARGN}",1003]],"useCount":22788},{"word":"ARGS","context":[["exec_program(uname ARGS -r OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_VERSION)",79],["set(ARGS",243],["COMMAND ${CMAKE_COMMAND} ARGS",83],["ARGS --version",97],["ARGS --prefix",98],["ARGS --libs",127],["ARGS ${CMAKE_CXX_COMPILER_ARG1} -dumpversion",142],["ARGS",285],["ARGS ${rcc_options} -name ${outfilename} -o ${outfile} ${infile}",77],["# find_host_package (PROGRAM ARGS)",67]],"useCount":4362},{"word":"Add","context":[["# Add the path where the Ogre framework was found",69],["# Add in a path suffix, based on the required version, ideally",90],["# 2. Add the following line to your CMakeLists.txt:",101],["# Add the library.",136],["# Add the build specific configuration flags",198],["# Add the other files that we want cmake to clean on a cleanup ##########",66],["# Add include directories to pass to the nvcc command.",66],["# Add the parent dir from DIR to VAR",66],["# Add a link phase for the separable compilation if it has been enabled.  If",65],["# Add a custom target to generate a c or ptx file. ######################",66]],"useCount":5728},{"word":"Android","context":[["#try to find Android standalone toolchain in one of the the default locations",132],["#try to find Android NDK in one of the the default locations",132],["message( STATUS \"Using default path for Android NDK: ${ANDROID_NDK}\" )",133],["message( FATAL_ERROR \"No one of known Android ABIs is supported by this cmake toolchain.\" )",136],["#    variables to make necessary Android-specific configuration changes.",136],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["#      used by ndk-build tool from Android NDK.",135],["#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform",134],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.",129]],"useCount":4774},{"word":"Arduino","context":[["# Print the detected Arduino board settings.",28],["#  to be part of that Arduino library.",28],["#  A Arduino library is a folder that has the same name as the include header.",28],["#      NO_AUTOLIBS    # Disables Arduino library detection",44],["# Creates the Arduino Core library for the specified board,",28],["#        BOARD_ID    - Arduino board id",55],["#   generaters firmware and libraries for Arduino devices",44],["# Configures the the build settings for the specified Arduino Board.",29],["# Creates an Arduino firmware target.",29],["# Create an upload target (${TARGET_NAME}-upload) for the specified Arduino target.",29]],"useCount":2030},{"word":"BLAS_LIBRARIES","context":[["BLAS_LIBRARIES",669],["if(NOT BLAS_LIBRARIES)",529],["endif(NOT BLAS_LIBRARIES)",200],["\"${BLAS_LIBRARIES}\"",190],["if (BLAS_LIBRARIES)",35],["if ( NOT BLAS_LIBRARIES )",41],["if((NOT BLAS_LIBRARIES)",42],["endif(BLAS_LIBRARIES)",44],["if( BLAS_LIBRARIES )",60],["if(BLAS_LIBRARIES)",92]],"useCount":2117},{"word":"BLA_VENDOR","context":[["if (BLA_VENDOR STREQUAL \"NAS\" OR BLA_VENDOR STREQUAL \"All\")",49],["if (BLA_VENDOR STREQUAL \"NAS\" OR BLA_VENDOR STREQUAL \"All\")",49],["if (BLA_VENDOR STREQUAL \"Apple\" OR BLA_VENDOR STREQUAL \"All\")",49],["if (BLA_VENDOR STREQUAL \"Apple\" OR BLA_VENDOR STREQUAL \"All\")",49],["set(BLA_VENDOR $ENV{BLA_VENDOR})",50],["set(BLA_VENDOR \"All\")",50],["set(BLA_VENDOR $ENV{BLA_VENDOR})",50],["if(NOT BLA_VENDOR)",52],["if (BLA_VENDOR STREQUAL \"Intel10_32\" OR BLA_VENDOR STREQUAL \"All\")",56],["if (BLA_VENDOR STREQUAL \"Intel10_32\" OR BLA_VENDOR STREQUAL \"All\")",56]],"useCount":2058},{"word":"BOOL","context":[["set(vc OFF CACHE BOOL \"\" FORCE)",131],["-DBUILD_EXAMPLES:BOOL=OFF",225],["-DBUILD_TESTING:BOOL=OFF",273],["# verbose:BOOL=<>          OFF: Be as quiet as possible (default)",200],["set( ANDROID_FORBID_SYGWIN TRUE CACHE BOOL \"Prevent cmake from working under cygwin and using cygwin tools\")",136],["-DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}",116],["CACHE BOOL",135],["\"-DTrilinos_ENABLE_EXPLICIT_INSTANTIATION:BOOL=ON\"",118],["-DBUILD_SHARED_LIBS:BOOL=ON",124],["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115]],"useCount":10380},{"word":"BOOST_ROOT","context":[["set(BOOST_ROOT $ENV{BOOST_ROOT})",62],["if( BOOST_ROOT )",85],["\"  BOOST_ROOT = ${BOOST_ROOT}\")",80],["\"  BOOST_ROOT = ${BOOST_ROOT}\")",80],["if(BOOST_ROOT)",67],["# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,",62],["# it looks at BOOST_ROOT and BOOSTROOT to find Boost.",62],["set(ENV{Boost_DIR} $ENV{BOOST_ROOT})",62],["if (NOT \"$ENV{BOOST_ROOT}\" STREQUAL \"\")",62],["set(BOOST_ROOT $ENV{BOOST_ROOT})",62]],"useCount":2197},{"word":"BUILD_SHARED_LIBS","context":[["IF(BUILD_SHARED_LIBS)",85],["ENDIF(BUILD_SHARED_LIBS)",75],["# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is",60],["endif (BUILD_SHARED_LIBS)",103],["-DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}",116],["endif(BUILD_SHARED_LIBS)",57],["# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.",60],["if(BUILD_SHARED_LIBS)",334],["if (BUILD_SHARED_LIBS)",301],["set(BUILD_SHARED_LIBS OFF)",118]],"useCount":2309},{"word":"BUILD_TYPE","context":[["BUILD_TYPE \"${build_type}\"",46],["SET(BUILD_TYPE RELEASE)",103],["IF(BUILD_TYPE)",5696],["CMAKE_INSTALL_CONFIG_NAME \"${BUILD_TYPE}\")",8081],["ENDIF(BUILD_TYPE)",5696],["ELSE(BUILD_TYPE)",5696],["SET(BUILD_TYPE DEBUG)",82],["\"-DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}\"",45],["BUILD_TYPE \"${CMAKE_BUILD_TYPE}\"",46],["if(BUILD_TYPE)",2386]],"useCount":28100},{"word":"Bb","context":[["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",110],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",60],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",661],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",836],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",60]],"useCount":3127},{"word":"Boost","context":[["Boost",275],["# State that we found a version of Boost that is too new or too old.",90],["# The reason that we failed to find Boost. This will be set to a",90],["message(SEND_ERROR \"Unable to find the requested Boost libraries.\\n${Boost_ERROR_REASON}\")",90],["# Check the version of Boost against the requested version.",90],["# Try to find Boost by stepping backwards through the Boost versions",90],["# Boost.",91],["# Boost",93],["#                                module has problems finding the proper Boost installation",104],["find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)",106]],"useCount":7346},{"word":"Boost_","context":[["if( Boost_${UPPERCOMPONENT}_FOUND )",64],["if(Boost_${basename}_LIBRARY_DEBUG AND Boost_${basename}_LIBRARY_RELEASE)",64],["set(Boost_${basename}_LIBRARY_DEBUG ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARY_DEBUG ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARY ${Boost_${basename}_LIBRARY_RELEASE} )",64],["_Boost_SWAP_WITH_REALPATH(Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG   \"${_boost_docstring_debug}\"  )",66],["_Boost_SWAP_WITH_REALPATH(Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE \"${_boost_docstring_release}\")",66],["Boost_${basename}_LIBRARY_RELEASE",97],["Boost_${basename}_LIBRARY_DEBUG",97],["if(NOT Boost_${COMPONENT}_FOUND)",100]],"useCount":5012},{"word":"Boost_FOUND","context":[["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] Boost_FOUND = ${Boost_FOUND}\")",80],["set(Boost_FOUND FALSE)",84],["set(Boost_FOUND 1)",100],["if (NOT Boost_FOUND)",103],["set( Boost_FOUND FALSE )",132],["#   if(Boost_FOUND)",136],["if(NOT Boost_FOUND)",143],["if (Boost_FOUND)",173],["set(Boost_FOUND 0)",190],["if(Boost_FOUND)",258]],"useCount":2754},{"word":"Boost_INCLUDE_DIR","context":[["ENDIF(Boost_INCLUDE_DIR)",98],["IF(Boost_INCLUDE_DIR)",98],["set(Boost_INCLUDE_DIRS ${Boost_INCLUDE_DIR})",66],["${Boost_INCLUDE_DIR}/stage/lib",66],["find_path(Boost_INCLUDE_DIR",72],["${Boost_INCLUDE_DIR}/../lib",74],["${Boost_INCLUDE_DIR}/lib",78],["\"location of version.hpp: ${Boost_INCLUDE_DIR}/boost/version.hpp\")",81],["ELSE(Boost_INCLUDE_DIR)",90],["if(Boost_INCLUDE_DIR)",101]],"useCount":2026},{"word":"Build","context":[["message(\"* Build core w/PCH       : No\")",114],["message(\"* Build core w/PCH       : Yes (default)\")",114],["message(\"* Build world/auth       : Yes (default)\")",113],["message(\"* Build scripts w/PCH    : Yes (default)\")",113],["message(\"* Build scripts w/PCH    : No\")",113],["message(\"* Build with scripts     : No\")",113],["# Build related configuration options",127],["# Build specific configuration flags",168],["#            TriBITS: Tribal Build, Integrate, and Test System",231],["message(\"* Build map/vmap tools   : Yes\")",112]],"useCount":5789},{"word":"C","context":[["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/LLVM\")",285],["# which compilers to use for C and C++",285],["# which compilers to use for C and C++",285],["IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE \"C\"",282],["foreach(lang C)",304],["# The C and CXX include file search paths:",935],["FOREACH(lang C)",1002],["\"C\"",2111],["# The C and CXX include file regular expressions for this directory.",2244],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OpenSceneGraph\")",291]],"useCount":29593},{"word":"CACHE","context":[["SET(SDL2_LIBRARY_TEMP \"${SDL2_LIBRARY_TEMP}\" CACHE INTERNAL \"\")",146],["CACHE STRING \"Result from TRY_RUN\" FORCE)",567],["CACHE",421],["# I think it has something to do with the CACHE STRING.",237],["unset( NDK_CCACHE CACHE )",223],["SET(MINGW32_LIBRARY mingw32 CACHE STRING \"mwindows for MinGW\")",199],["CACHE STRING",196],["CACHE STRING \"Output from TRY_RUN\" FORCE)",147],["SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING \"Where the SDL2 Library can be found\")",146],["set(MPI_LIB \"MPI_LIB-NOTFOUND\" CACHE FILEPATH \"Cleared\" FORCE)",141]],"useCount":45626},{"word":"CHECK_FUNCTION_EXISTS","context":[["CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)",104],["CHECK_FUNCTION_EXISTS (poll HAVE_POLL)",100],["CHECK_FUNCTION_EXISTS (dlopen HAVE_DLOPEN)",98],["CHECK_FUNCTION_EXISTS (gethostbyaddr_r HAVE_GETHOSTBYADDR_R)",97],["CHECK_FUNCTION_EXISTS (pthread_sigmask HAVE_PTHREAD_SIGMASK)",97],["CHECK_FUNCTION_EXISTS (getrlimit HAVE_GETRLIMIT)",97],["CHECK_FUNCTION_EXISTS (realpath HAVE_REALPATH)",97],["CHECK_FUNCTION_EXISTS (stpcpy HAVE_STPCPY)",97],["CHECK_FUNCTION_EXISTS (fseeko HAVE_FSEEKO)",97],["CHECK_FUNCTION_EXISTS (initgroups HAVE_INITGROUPS)",97]],"useCount":14171},{"word":"CHECK_INCLUDE_FILES","context":[["CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)",99],["CHECK_INCLUDE_FILES (dirent.h HAVE_DIRENT_H)",98],["CHECK_INCLUDE_FILES (dlfcn.h HAVE_DLFCN_H)",98],["CHECK_INCLUDE_FILES (sys/select.h HAVE_SYS_SELECT_H)",98],["CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)",98],["CHECK_INCLUDE_FILES (sys/ioctl.h HAVE_SYS_IOCTL_H)",98],["CHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)",99],["CHECK_INCLUDE_FILES (ieeefp.h HAVE_IEEEFP_H)",100],["CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)",102],["CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)",103]],"useCount":8264},{"word":"CHECK_SYMBOL_EXISTS","context":[["CHECK_SYMBOL_EXISTS(O_NONBLOCK \"unistd.h;fcntl.h\" HAVE_FCNTL_NONBLOCK)",92],["CHECK_SYMBOL_EXISTS(TIOCGWINSZ \"sys/ioctl.h\" GWINSZ_IN_SYS_IOCTL)",92],["CHECK_SYMBOL_EXISTS(log2  math.h HAVE_LOG2)",92],["CHECK_SYMBOL_EXISTS(FIONREAD \"sys/ioctl.h\" FIONREAD_IN_SYS_IOCTL)",92],["CHECK_SYMBOL_EXISTS(isnan math.h HAVE_ISNAN)",81],["CHECK_SYMBOL_EXISTS(rint  math.h HAVE_RINT)",81],["CHECK_SYMBOL_EXISTS(madvise \"sys/mman.h\" HAVE_DECL_MADVISE)",82],["CHECK_SYMBOL_EXISTS(FIONREAD \"sys/filio.h\" FIONREAD_IN_SYS_FILIO)",89],["CHECK_SYMBOL_EXISTS(lrand48 \"stdlib.h\" HAVE_LRAND48)",92],["CHECK_SYMBOL_EXISTS(fdatasync \"unistd.h\" HAVE_DECL_FDATASYNC)",92]],"useCount":2277},{"word":"CMAKE","context":[["#     build rules specified by CMAKE and the cuda files are compiled to object",34],["# see accompanying file COPYING-CMAKE-SCRIPTS for details.",51],["# CMAKE commands to actually use the LaTeX compiler",37],["cotire_write_file(\"CMAKE\" \"${_targetCotireScript}\" \"${_contents}\" FALSE)",38],["#  For details see the COPYING-CMAKE-SCRIPTS file.",25],["#      build rules specified by CMAKE and the cuda files are compiled to object",26],["# CMAKE generated file: DO NOT EDIT!",3617],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["if (\"${_language}\" STREQUAL \"CMAKE\")",38]],"useCount":6519},{"word":"CMAKE_","context":[["set (_option_COMPILER_ID \"${CMAKE_${_option_LANGUAGE}_ID}\")",91],["set(CMAKE_${lang}_LINK_EXECUTABLE",73],["COMPILER_ARG1 ${CMAKE_${COTIRE_TARGET_LANGUAGE}_COMPILER_ARG1}",76],["COMPILER_EXECUTABLE \"${CMAKE_${COTIRE_TARGET_LANGUAGE}_COMPILER}\"",76],["COMPILER_ID \"${CMAKE_${COTIRE_TARGET_LANGUAGE}_COMPILER_ID}\"",76],["\"${_language}\" \"${CMAKE_${_language}_COMPILER_ID}\" \"${CMAKE_${_language}_COMPILER_VERSION}\"",80],["if (WIN32 AND CMAKE_${_language}_COMPILER_ID MATCHES \"MSVC|Intel\")",136],["set(generated_extension ${CMAKE_${CUDA_C_OR_CXX}_OUTPUT_EXTENSION})",98],["\"${_language}\" \"${CMAKE_${_language}_COMPILER_ID}\" \"${COTIRE_${_language}_COMPILER_VERSION}\"",94],["\"${_language}\" \"${CMAKE_${_language}_COMPILER_ID}\" \"${CMAKE_${_language}_COMPILER_VERSION}\"",80]],"useCount":6659},{"word":"CMAKE_ABSOLUTE_DESTINATION_FILES","context":[["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["list(APPEND CMAKE_ABSOLUTE_DESTINATION_FILES",1652],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652]],"useCount":4956},{"word":"CMAKE_ASM_TARGET_INCLUDE_PATH","context":[["set(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["SET(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977]],"useCount":6702},{"word":"CMAKE_BINARY_DIR","context":[["if( CMAKE_BINARY_DIR AND EXISTS \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeSystem.cmake\" )",134],["\"${CMAKE_BINARY_DIR}\"",152],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",257],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",273],["INSTALL_DIR ${CMAKE_BINARY_DIR}",351],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",403],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",404],["WORKING_DIRECTORY ${CMAKE_BINARY_DIR}",629],["${CMAKE_BINARY_DIR}",878],["if( CMAKE_BINARY_DIR AND EXISTS \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeSystem.cmake\" )",134]],"useCount":12735},{"word":"CMAKE_BUILD_TYPE","context":[["if (CMAKE_BUILD_TYPE)",112],["if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")",133],["if (NOT CMAKE_BUILD_TYPE)",135],["IF(NOT CMAKE_BUILD_TYPE)",139],["if(NOT CMAKE_BUILD_TYPE)",160],["# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value",204],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}",226],["\"CMAKE_BUILD_TYPE=\\\"RelWithDebInfo\\\"\"",240],["-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}",283]],"useCount":7670},{"word":"CMAKE_COMMAND","context":[["execute_process(COMMAND ${CMAKE_COMMAND} -E echo ${cuda_execute_process_string})",198],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"",396],["${CMAKE_COMMAND}",210],["COMMAND \"${CMAKE_COMMAND}\"",599],["execute_process(COMMAND \"${CMAKE_COMMAND}\" -E echo -- ${status})",199],["COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different \"${cmake_dependency_file}.tmp\" \"${cmake_dependency_file}\"",199],["COMMAND  \"${CMAKE_COMMAND}\"",198],["COMMAND    ${CMAKE_COMMAND}",600],["COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}",736],["COMMAND ${CMAKE_COMMAND}",965]],"useCount":10083},{"word":"CMAKE_COMPILER_IS_CYGWIN","context":[["SET(CMAKE_COMPILER_IS_CYGWIN 1)",21],["set(CMAKE_COMPILER_IS_CYGWIN 1)",34],["SET(CMAKE_COMPILER_IS_CYGWIN )",200],["ENDIF(CMAKE_COMPILER_IS_CYGWIN)",201],["if(CMAKE_COMPILER_IS_CYGWIN)",744],["set(CMAKE_COMPILER_IS_CYGWIN )",743],["IF(CMAKE_COMPILER_IS_CYGWIN)",201]],"useCount":2144},{"word":"CMAKE_COMPILER_IS_GNUCXX","context":[["set(CMAKE_COMPILER_IS_GNUCXX )",190],["set(CMAKE_COMPILER_IS_GNUCXX 1)",207],["ELSE(CMAKE_COMPILER_IS_GNUCXX)",212],["ENDIF(CMAKE_COMPILER_IS_GNUCXX)",341],["if (CMAKE_COMPILER_IS_GNUCXX)",462],["if(CMAKE_COMPILER_IS_GNUCXX)",581],["endif(CMAKE_COMPILER_IS_GNUCXX)",125],["IF(NOT CMAKE_COMPILER_IS_GNUCXX)",135],["endif (CMAKE_COMPILER_IS_GNUCXX)",150],["IF(CMAKE_COMPILER_IS_GNUCXX)",609]],"useCount":4552},{"word":"CMAKE_COMPILER_IS_MINGW","context":[["if(CMAKE_COMPILER_IS_MINGW)",744],["SET(CMAKE_COMPILER_IS_MINGW 1)",25],["set( CMAKE_COMPILER_IS_MINGW TRUE ) # tell CMake that we are MinGW",95],["SET(CMAKE_COMPILER_IS_MINGW )",196],["IF(CMAKE_COMPILER_IS_MINGW)",201],["ENDIF(CMAKE_COMPILER_IS_MINGW)",201],["set(CMAKE_COMPILER_IS_MINGW )",722],["set(CMAKE_COMPILER_IS_MINGW 1)",55]],"useCount":2239},{"word":"CMAKE_CONFIGURATION_TYPES","context":[["if (CMAKE_CONFIGURATION_TYPES)",118],["if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)",95],["IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)",87],["foreach(config ${CMAKE_CONFIGURATION_TYPES})",84],["if (NOT CMAKE_CONFIGURATION_TYPES)",124],["if(CMAKE_CONFIGURATION_TYPES)",176],["if( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )",75],["set(CUDA_configuration_types ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE} Debug MinSizeRel Release RelWithDebInfo)",64],["# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we",64],["ELSE(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)",62]],"useCount":2143},{"word":"CMAKE_CROSSCOMPILING","context":[["set(CMAKE_CROSSCOMPILING \"FALSE\")",359],["SET(CMAKE_CROSSCOMPILING \"FALSE\")",259],["if(CMAKE_CROSSCOMPILING)",235],["IF(CMAKE_CROSSCOMPILING)",146],["if( DEFINED CMAKE_CROSSCOMPILING )",144],["if (CMAKE_CROSSCOMPILING)",113],["set( CMAKE_CROSSCOMPILING TRUE )    # stop recursion",95],["IF(NOT CMAKE_CROSSCOMPILING AND NOT MSVC)",92],["if(NOT CMAKE_CROSSCOMPILING)",67],["set(CMAKE_CROSSCOMPILING TRUE)",59]],"useCount":2150},{"word":"CMAKE_CURRENT_BINARY_DIR","context":[["${CMAKE_CURRENT_BINARY_DIR}",302],["-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/${proj}-install",73],["${CMAKE_CURRENT_BINARY_DIR}/DummyConfigureOutput)",338],["set(GIT_DATA \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/git-data\")",93],["\"${CMAKE_CURRENT_BINARY_DIR}\"",82],["WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}",357],["set( EXTERNAL_BINARY_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )",70],["SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/ui_${outfile}.h)",70],["SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/qrc_${outfilename}.cxx)",69],["${CMAKE_CURRENT_BINARY_DIR}/merge_archives_${TARGET}.cmake",68]],"useCount":10230},{"word":"CMAKE_CURRENT_LIST_DIR","context":[["include(${CMAKE_CURRENT_LIST_DIR}/SelectLibraryConfigurations.cmake)",91],["get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",98],["include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)",821],["PATHS \"${CMAKE_CURRENT_LIST_DIR}/..\" NO_DEFAULT_PATH",215],["include(\"${CMAKE_CURRENT_LIST_DIR}/utilities/polly_clear_environment_variables.cmake\")",124],["include(\"${CMAKE_CURRENT_LIST_DIR}/utilities/polly_common.cmake\")",208],["include(\"${CMAKE_CURRENT_LIST_DIR}/utilities/polly_init.cmake\")",192],["set( EXTERNAL_SOURCE_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/ExternalSources )",120],["include(\"${CMAKE_CURRENT_LIST_DIR}/flags/cxx11.cmake\")",133],["INCLUDE(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)",136]],"useCount":4268},{"word":"CMAKE_CURRENT_LIST_FILE","context":[["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] \"",2154],["\\\"${CMAKE_CURRENT_LIST_FILE}\\\"",399],["get_filename_component(CMAKE_CURRENT_LIST_FILENAME ${CMAKE_CURRENT_LIST_FILE} NAME_WE)",216],["get_filename_component(_IMPORT_PREFIX \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",171],["get_filename_component(_ROOT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",151],["get_filename_component(_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",142],["GET_FILENAME_COMPONENT(MYSQL_CMAKE_SCRIPT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",140],["STRING(REPLACE \"/cmake/sources.cmake\" \"\" THIS_SRC_DIR ${CMAKE_CURRENT_LIST_FILE})",122],["MESSAGE(STATUS ${CMAKE_CURRENT_LIST_FILE})",118],["get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",98]],"useCount":5023},{"word":"CMAKE_CURRENT_LIST_LINE","context":[["message(STATUS \"[ FindOpenSceneGraph.cmake:${CMAKE_CURRENT_LIST_LINE} ] \"",24],["math(EXPR _ep_documentation_line_count \"${CMAKE_CURRENT_LIST_LINE} - 16\")",25],["\"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): \\n\"",27],["message(STATUS \"[FindGTK3.cmake:${CMAKE_CURRENT_LIST_LINE}] \"",29],["message(STATUS \"[FindGTK3.cmake:${CMAKE_CURRENT_LIST_LINE}]     \"",43],["#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")",49],["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] Boost_FOUND = ${Boost_FOUND}\")",80],["message(STATUS \"[FindGTK2.cmake:${CMAKE_CURRENT_LIST_LINE}] \"",126],["message(STATUS \"[FindGTK2.cmake:${CMAKE_CURRENT_LIST_LINE}]     \"",189],["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] \"",2154]],"useCount":2831},{"word":"CMAKE_CURRENT_SOURCE_DIR","context":[["WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}",622],["\"${CMAKE_CURRENT_SOURCE_DIR}\"",88],["FILE(RELATIVE_PATH rel ${CMAKE_CURRENT_SOURCE_DIR} ${infile})",105],["file (GLOB PLATFORM RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}",107],["RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}",114],["include( \"${CMAKE_CURRENT_SOURCE_DIR}/../android.toolchain.config.cmake\" OPTIONAL )",129],["WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\")",136],["WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})",152],["${CMAKE_CURRENT_SOURCE_DIR}",166],["WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"",270]],"useCount":7813},{"word":"CMAKE_CXX_COMPILER","context":[["string( REPLACE \"<CMAKE_CXX_COMPILER>\" \"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}\" __cmd \"${__cmd}\" )",104],["${CMAKE_CXX_COMPILER}",79],["string( REPLACE \"<CMAKE_CXX_COMPILER>\" \"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}\" __cmd \"${__cmd}\" )",104],["set( CMAKE_CXX_COMPILER \"${NDK_CCACHE}\" CACHE PATH \"ccache as C++ compiler\" )",112],["OR \"${CMAKE_CXX_COMPILER}\" MATCHES \"icpc\")",128],["set(CMAKE_CXX_COMPILER \"/usr/bin/c++\")",144],["-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}",148],["-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}",174],["exec_program(${CMAKE_CXX_COMPILER}",98],["EXEC_PROGRAM(${CMAKE_CXX_COMPILER}",91]],"useCount":3353},{"word":"CMAKE_CXX_COMPILER_ID","context":[["set(CMAKE_CXX_COMPILER_ID \"Clang\")",466],["SET(CMAKE_CXX_COMPILER_ID \"Clang\")",253],["set(CMAKE_CXX_COMPILER_ID \"MSVC\")",122],["set( CMAKE_CXX_COMPILER_ID Clang)",109],["if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")",97],["IF(NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")",73],["elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")",72],["elseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)",70],["set(CMAKE_CXX_COMPILER_ID \"AppleClang\")",69],["IF(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")",67]],"useCount":3571},{"word":"CMAKE_CXX_FLAGS","context":[["#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )",135],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")",275],["#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )",135],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")",147],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")",147],["SET(CMAKE_CXX_FLAGS",171],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")",275],["set( CMAKE_CXX_FLAGS           \"${ANDROID_CXX_FLAGS} ${CMAKE_CXX_FLAGS}\" )",134],["CMAKE_CXX_FLAGS",129],["set( CMAKE_CXX_FLAGS           \"${ANDROID_CXX_FLAGS} ${CMAKE_CXX_FLAGS}\" )",134]],"useCount":10977},{"word":"CMAKE_CXX_FLAGS_DEBUG","context":[["set( CMAKE_CXX_FLAGS_DEBUG     \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c++ Debug flags\" )",110],["set(CMAKE_CXX_FLAGS_DEBUG",48],["set(CMAKE_CXX_FLAGS_DEBUG          \"-g\")",53],["set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /bigobj\")",73],["set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /bigobj\")",73],["SET(CMAKE_CXX_FLAGS_DEBUG          \"${COMMON_CXX_FLAGS}\")",98],["set( CMAKE_CXX_FLAGS_DEBUG     \"${ANDROID_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_DEBUG}\" )",112],["set( CMAKE_CXX_FLAGS_DEBUG     \"${ANDROID_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_DEBUG}\" )",112],["CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE",114],["CMAKE_CXX_FLAGS_DEBUG",118]],"useCount":2074},{"word":"CMAKE_CXX_INCLUDE_REGEX_COMPLAIN","context":[["set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})",535],["SET(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})",1709]],"useCount":2244},{"word":"CMAKE_CXX_INCLUDE_REGEX_SCAN","context":[["SET(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})",1709],["set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})",535]],"useCount":2244},{"word":"CMAKE_CXX_TARGET_INCLUDE_PATH","context":[["set(CMAKE_CXX_TARGET_INCLUDE_PATH",704],["set(CMAKE_CXX_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["SET(CMAKE_CXX_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977]],"useCount":7406},{"word":"CMAKE_C_COMPILER","context":[["-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}",139],["if( NOT CMAKE_C_COMPILER )",113],["set( CMAKE_C_COMPILER   \"${NDK_CCACHE}\" CACHE PATH \"ccache as C compiler\" )",112],["string( REPLACE \"<CMAKE_C_COMPILER>\"   \"${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1}\"   __cmd \"${__cmd}\" )",104],["-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}",177],["string( REPLACE \"<CMAKE_C_COMPILER>\"   \"${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1}\"   __cmd \"${__cmd}\" )",104],["execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion",71],["elseif(CMAKE_C_COMPILER MATCHES \"icc\")",51],["SET(CMAKE_C_COMPILER \"/usr/bin/gcc\")",66],["set(CMAKE_C_COMPILER \"/usr/bin/cc\")",142]],"useCount":2788},{"word":"CMAKE_C_FLAGS","context":[["set( CMAKE_C_FLAGS             \"\"                        CACHE STRING \"c flags\" )",110],["SET(CMAKE_C_FLAGS",110],["set( CMAKE_C_FLAGS \"-fno-exceptions ${CMAKE_C_FLAGS}\" )",112],["set( CMAKE_C_FLAGS \"-fno-exceptions ${CMAKE_C_FLAGS}\" )",112],["set( CMAKE_C_FLAGS \"-fexceptions ${CMAKE_C_FLAGS}\" )",112],["set( CMAKE_C_FLAGS \"-fexceptions ${CMAKE_C_FLAGS}\" )",112],["set( CMAKE_C_FLAGS             \"${ANDROID_CXX_FLAGS} ${CMAKE_C_FLAGS}\" )",133],["set( CMAKE_C_FLAGS             \"${ANDROID_CXX_FLAGS} ${CMAKE_C_FLAGS}\" )",133],["#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )",135],["#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )",135]],"useCount":6330},{"word":"CMAKE_C_INCLUDE_PATH","context":[["SET(CMAKE_ASM_INCLUDE_PATH ${CMAKE_C_INCLUDE_PATH})",623],["SET(CMAKE_Fortran_INCLUDE_PATH ${CMAKE_C_INCLUDE_PATH})",922],["SET(CMAKE_CXX_INCLUDE_PATH ${CMAKE_C_INCLUDE_PATH})",935],["SET(CMAKE_C_INCLUDE_PATH",935]],"useCount":3415},{"word":"CMAKE_C_INCLUDE_REGEX_COMPLAIN","context":[["SET(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})",1709],["set(CMAKE_C_INCLUDE_REGEX_COMPLAIN \"^$\")",535],["set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})",535],["SET(CMAKE_C_INCLUDE_REGEX_COMPLAIN \"^$\")",1709]],"useCount":4488},{"word":"CMAKE_C_INCLUDE_REGEX_SCAN","context":[["set(CMAKE_C_INCLUDE_REGEX_SCAN \"^.*$\")",535],["set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})",535],["SET(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})",1709],["SET(CMAKE_C_INCLUDE_REGEX_SCAN \"^.*$\")",1707]],"useCount":4486},{"word":"CMAKE_C_TARGET_INCLUDE_PATH","context":[["SET(CMAKE_CXX_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977],["set(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["set(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["set(CMAKE_CXX_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["set(CMAKE_C_TARGET_INCLUDE_PATH",2057],["SET(CMAKE_C_TARGET_INCLUDE_PATH",4977],["SET(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977],["SET(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977]],"useCount":27140},{"word":"CMAKE_DEPENDS_CHECK_C","context":[["set(CMAKE_DEPENDS_CHECK_C",480],["SET(CMAKE_DEPENDS_CHECK_C",1632]],"useCount":2112},{"word":"CMAKE_DEPENDS_CHECK_CXX","context":[["set(CMAKE_DEPENDS_CHECK_CXX",2244],["SET(CMAKE_DEPENDS_CHECK_CXX",5746]],"useCount":7990},{"word":"CMAKE_DEPENDS_LANGUAGES","context":[["set(CMAKE_DEPENDS_LANGUAGES",2756],["SET(CMAKE_DEPENDS_LANGUAGES",7929]],"useCount":10685},{"word":"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION","context":[["ENDIF (CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION)",1269],["if(CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION)",383],["IF (CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION)",1269]],"useCount":2921},{"word":"CMAKE_EXE_LINKER_FLAGS","context":[["set( CMAKE_EXE_LINKER_FLAGS    \"-Wl,-z,nocopyreloc\"      CACHE STRING \"executable linker flags\" )",110],["# SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /subsystem:windows\")",96],["# SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /subsystem:windows\")",96],["OR CMAKE_EXE_LINKER_FLAGS MATCHES \" -static$\")",92],["set( CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fPIE -pie\")",69],["set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE\")",85],["set( CMAKE_EXE_LINKER_FLAGS    \"${ANDROID_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}\" )",132],["IF (CMAKE_EXE_LINKER_FLAGS MATCHES \" -static \"",92],["set( CMAKE_EXE_LINKER_FLAGS    \"${ANDROID_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}\" )",132],["set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE\")",85]],"useCount":2316},{"word":"CMAKE_EXTRA_INCLUDE_FILES","context":[["SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} netinet/in6.h)",92],["ss_family \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_STORAGE_SS_FAMILY)",92],["SET(CMAKE_EXTRA_INCLUDE_FILES ieeefp.h)",92],["\"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN_SIN_LEN)",92],["SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h netinet/in.h sys/socket.h)",92],["set(CMAKE_EXTRA_INCLUDE_FILES)",230],["SET(CMAKE_EXTRA_INCLUDE_FILES)",320],["\"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN6_SIN6_LEN)",92],["SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} winsock2.h ws2ipdef.h)",92],["SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} netinet/in6.h)",92]],"useCount":2364},{"word":"CMAKE_FILES_DIRECTORY","context":[["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/android.toolchain.config.cmake\" \"${__toolchain_config}\" )",125],["string( REPLACE \"<TARGET>\" \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/toolchain_crtlink_test.so\" __cmd \"${__cmd}\" )",103],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",403],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",273],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",257],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",404],["${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/src.cxx",52],["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/cvt83.cmd\" \"@echo %~s1\" )",102],["${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",95],["if( CMAKE_BINARY_DIR AND EXISTS \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeSystem.cmake\" )",134]],"useCount":2740},{"word":"CMAKE_FIND_LIBRARY_SUFFIXES","context":[["set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})",116],["set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})",116],["# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES",116],["LIST(REVERSE CMAKE_FIND_LIBRARY_SUFFIXES)",80],["set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})",68],["set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})",68],["set(CMAKE_FIND_LIBRARY_SUFFIXES .lib ${CMAKE_FIND_LIBRARY_SUFFIXES})",99],["set(CMAKE_FIND_LIBRARY_SUFFIXES .lib ${CMAKE_FIND_LIBRARY_SUFFIXES})",99],["set (CMAKE_FIND_LIBRARY_SUFFIXES \".dylib\" \".so\" \".a\")",85],["set(CMAKE_FIND_LIBRARY_SUFFIXES .a )",95]],"useCount":2130},{"word":"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE","context":[["SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",258],["set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )",303],["set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )",474],["set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",720],["set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",187],["set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)",67],["set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)",25],["set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)",18],["#set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",16],["SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)",14]],"useCount":2093},{"word":"CMAKE_FIND_ROOT_PATH_MODE_LIBRARY","context":[["set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )",473],["set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)",12],["set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)",22],["SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)",15],["#set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",16],["SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",260],["set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )",304],["set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)",67],["set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",721],["set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",187]],"useCount":2077},{"word":"CMAKE_FIND_ROOT_PATH_MODE_PROGRAM","context":[["set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )",445],["set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)",45],["set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",691],["#set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",14],["set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)",20],["set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )",333],["SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",259],["set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)",149],["set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",102]],"useCount":2058},{"word":"CMAKE_FORCE_UNIX_PATHS","context":[["SET(CMAKE_FORCE_UNIX_PATHS 1)",1709],["set(CMAKE_FORCE_UNIX_PATHS 1)",524]],"useCount":2233},{"word":"CMAKE_Fortran_TARGET_INCLUDE_PATH","context":[["set(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["SET(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977]],"useCount":6702},{"word":"CMAKE_GENERATOR","context":[["CMAKE_GENERATOR ${gen}",487],["elseif(CMAKE_GENERATOR MATCHES \"Makefiles\")",67],["elseif (\"${CMAKE_GENERATOR}\" MATCHES \"Makefiles|Ninja\")",66],["if(CMAKE_GENERATOR MATCHES Visual*)",64],["if(CMAKE_GENERATOR MATCHES \"Visual Studio\")",269],["if( CMAKE_GENERATOR MATCHES \"Ninja\" AND CMAKE_HOST_WIN32 )",95],["IF(CMAKE_GENERATOR MATCHES \"Ninja\")",62],["endif(CMAKE_GENERATOR MATCHES Visual*)",63],["if (CMAKE_GENERATOR MATCHES \"Visual Studio\")",69],["set(gen \"${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}\")",64]],"useCount":3684},{"word":"CMAKE_INSTALL_COMPONENT","context":[["SET(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")",5696],["if(NOT CMAKE_INSTALL_COMPONENT)",2385],["ENDIF(NOT CMAKE_INSTALL_COMPONENT)",5696],["IF(NOT CMAKE_INSTALL_COMPONENT)",5696],["SET(CMAKE_INSTALL_COMPONENT)",5696],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["set(CMAKE_INSTALL_COMPONENT)",2385],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352]],"useCount":109345},{"word":"CMAKE_INSTALL_CONFIG_NAME","context":[["SET(CMAKE_INSTALL_CONFIG_NAME \"Release\")",2436],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",836],["set(CMAKE_INSTALL_CONFIG_NAME \"Release\")",1373],["SET(CMAKE_INSTALL_CONFIG_NAME \"\")",1698],["if(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",2385],["message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",2385],["ENDIF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["IF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["MESSAGE(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",5696],["CMAKE_INSTALL_CONFIG_NAME \"${BUILD_TYPE}\")",8081]],"useCount":44008},{"word":"CMAKE_INSTALL_DO_STRIP","context":[["IF(CMAKE_INSTALL_DO_STRIP)",2211],["ENDIF(CMAKE_INSTALL_DO_STRIP)",2211],["if(CMAKE_INSTALL_DO_STRIP)",321]],"useCount":4743},{"word":"CMAKE_INSTALL_LOCAL_ONLY","context":[["ENDIF(NOT CMAKE_INSTALL_LOCAL_ONLY)",1208],["if(NOT CMAKE_INSTALL_LOCAL_ONLY)",464],["IF(NOT CMAKE_INSTALL_LOCAL_ONLY)",1208]],"useCount":2880},{"word":"CMAKE_INSTALL_MANIFEST","context":[["set(CMAKE_INSTALL_MANIFEST \"install_manifest.txt\")",618],["set(CMAKE_INSTALL_MANIFEST \"install_manifest_${CMAKE_INSTALL_COMPONENT}.txt\")",618],["SET(CMAKE_INSTALL_MANIFEST \"install_manifest.txt\")",1131],["SET(CMAKE_INSTALL_MANIFEST \"install_manifest_${CMAKE_INSTALL_COMPONENT}.txt\")",1131]],"useCount":3498},{"word":"CMAKE_INSTALL_PREFIX","context":[["string(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",2385],["${CMAKE_INSTALL_PREFIX}/include",303],["set(CMAKE_INSTALL_PREFIX \"/usr/local\")",1094],["string(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",2385],["if(NOT DEFINED CMAKE_INSTALL_PREFIX)",2389],["SET(CMAKE_INSTALL_PREFIX \"/usr/local\")",3426],["STRING(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",5696],["STRING(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",5696],["ENDIF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5703],["IF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5705]],"useCount":43268},{"word":"CMAKE_INSTALL_SO_NO_EXE","context":[["IF(CMAKE_INSTALL_SO_NO_EXE)",27],["set(CMAKE_INSTALL_SO_NO_EXE \"0\")",172],["IF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["set(CMAKE_INSTALL_SO_NO_EXE \"1\")",441],["SET(CMAKE_INSTALL_SO_NO_EXE \"0\")",460],["if(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",613],["SET(CMAKE_INSTALL_SO_NO_EXE \"1\")",3908],["ENDIF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367]],"useCount":14355},{"word":"CMAKE_MATCH_1","context":[["set(_type  \"${CMAKE_MATCH_1}\")",39],["set(EIGEN3_WORLD_VERSION \"${CMAKE_MATCH_1}\")",105],["set(EIGEN3_MINOR_VERSION \"${CMAKE_MATCH_1}\")",105],["set(EIGEN3_MAJOR_VERSION \"${CMAKE_MATCH_1}\")",105],["set(_CMAKE_TOOLCHAIN_PREFIX ${CMAKE_MATCH_1})",89],["string (LENGTH \"${CMAKE_MATCH_1}\" ${_headerDepthVar})",76],["set(LINUX_VER \"${CMAKE_MATCH_1}\")",56],["set(Boost_${v} \"${CMAKE_MATCH_1}\")",46],["set(count \"${CMAKE_MATCH_1}\")",42],["set(${ICU_PUBLIC_VAR_NS}_MAJOR_VERSION \"${CMAKE_MATCH_1}\")",39]],"useCount":2278},{"word":"CMAKE_REQUIRED_FLAGS","context":[["SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")",89],["#   CMAKE_REQUIRED_FLAGS = string of compile command line flags",81],["SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")",89],["\"-D${VAR} ${CMAKE_REQUIRED_FLAGS}\")",101],["set(CMAKE_REQUIRED_FLAGS \"${SAFE_CMAKE_REQUIRED_FLAGS}\")",105],["set(SAFE_CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS}\")",105],["set(CMAKE_REQUIRED_FLAGS)",134],["set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})",75],["set(CMAKE_REQUIRED_FLAGS \"${FLAG}\")",117],["#  CMAKE_REQUIRED_FLAGS = string of compile command line flags",209]],"useCount":2230},{"word":"CMAKE_REQUIRED_INCLUDES","context":[["set(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR})",81],["set(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIRS})",76],["\"-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}\"",73],["ELSE(CMAKE_REQUIRED_INCLUDES)",101],["ENDIF(CMAKE_REQUIRED_INCLUDES)",103],["if(CMAKE_REQUIRED_INCLUDES)",106],["#  CMAKE_REQUIRED_INCLUDES = list of include directories",190],["\"-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}\")",201],["IF(CMAKE_REQUIRED_INCLUDES)",107],["set(CMAKE_REQUIRED_INCLUDES)",132]],"useCount":2179},{"word":"CMAKE_REQUIRED_LIBRARIES","context":[["\"-DLINK_LIBRARIES:STRING=${CMAKE_REQUIRED_LIBRARIES}\")",166],["SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})",111],["ENDIF(CMAKE_REQUIRED_LIBRARIES)",126],["if(CMAKE_REQUIRED_LIBRARIES)",146],["set(CMAKE_REQUIRED_LIBRARIES)",818],["#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link",156],["IF(CMAKE_REQUIRED_LIBRARIES)",156],["SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})",111],["set(CMAKE_REQUIRED_LIBRARIES pthread)",192],["set(CMAKE_REQUIRED_LIBRARIES m)",371]],"useCount":5194},{"word":"CMAKE_SIZEOF_VOID_P","context":[["set(CMAKE_SIZEOF_VOID_P \"${CMAKE_CXX_SIZEOF_DATA_PTR}\")",345],["if (CMAKE_SIZEOF_VOID_P EQUAL 8)",156],["IF(CMAKE_SIZEOF_VOID_P EQUAL 8)",150],["if(CMAKE_SIZEOF_VOID_P EQUAL 4)",112],["ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)",110],["ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)",109],["SET(CMAKE_SIZEOF_VOID_P \"${CMAKE_C_SIZEOF_DATA_PTR}\")",99],["SET(CMAKE_SIZEOF_VOID_P \"${CMAKE_CXX_SIZEOF_DATA_PTR}\")",98],["if(CMAKE_SIZEOF_VOID_P EQUAL 8)",664],["set(CMAKE_SIZEOF_VOID_P \"${CMAKE_C_SIZEOF_DATA_PTR}\")",391]],"useCount":4719},{"word":"CMAKE_SOURCE_DIR","context":[["FIND_PROGRAM( GCOVR_PATH gcovr PATHS ${CMAKE_SOURCE_DIR}/tests)",88],["WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"",453],["WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}",292],["if( EXISTS \"${CMAKE_SOURCE_DIR}/jni/CMakeLists.txt\" )",141],["${CMAKE_SOURCE_DIR}/cmake/stack_direction.c",92],["\"${CMAKE_SOURCE_DIR}/revision.h.in.cmake\"",84],["SET(MYSYS_LIBWRAP_SOURCE  ${CMAKE_SOURCE_DIR}/mysys/my_libwrap.c)",78],["WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})",77],["\"${CMAKE_SOURCE_DIR}\"",74],["#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary",71]],"useCount":7049},{"word":"CMAKE_SYSTEM_NAME","context":[["set(CMAKE_SYSTEM_NAME \"Linux\")",324],["SET(CMAKE_SYSTEM_NAME Linux)",163],["SET(CMAKE_SYSTEM_NAME Windows)",287],["set(CMAKE_SYSTEM_NAME Linux)",283],["SET(CMAKE_SYSTEM_NAME \"Linux\")",254],["IF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")",177],["if(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")",169],["set(CMAKE_SYSTEM_NAME Windows)",148],["set( CMAKE_SYSTEM_NAME Linux )",160],["elseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")",144]],"useCount":8645},{"word":"CMAKE_SYSTEM_PROCESSOR","context":[["set(CMAKE_SYSTEM_PROCESSOR \"x86_64\")",313],["set( CMAKE_SYSTEM_PROCESSOR \"armv7-a\" )",411],["SET(CMAKE_SYSTEM_PROCESSOR \"x86_64\")",144],["set( CMAKE_SYSTEM_PROCESSOR \"armv5te\" )",138],["set( CMAKE_SYSTEM_PROCESSOR \"armv6\" )",136],["set( CMAKE_SYSTEM_PROCESSOR \"i686\" )",136],["set( CMAKE_SYSTEM_PROCESSOR \"mips\" )",135],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib/${CMAKE_SYSTEM_PROCESSOR}\" )",112],["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib/${CMAKE_SYSTEM_PROCESSOR}/thumb\" )",112]],"useCount":4311},{"word":"CMAKE_TARGET_DEFINITIONS","context":[["set(CMAKE_TARGET_DEFINITIONS",1122],["SET(CMAKE_TARGET_DEFINITIONS",5143]],"useCount":6265},{"word":"CMAKE_TARGET_LINKED_INFO_FILES","context":[["set(CMAKE_TARGET_LINKED_INFO_FILES",2756],["SET(CMAKE_TARGET_LINKED_INFO_FILES",7921]],"useCount":10677},{"word":"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION","context":[["IF (CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION)",1269],["ENDIF (CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION)",1269],["if(CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION)",383]],"useCount":2921},{"word":"CMake","context":[["# CMake generated Testfile for",2420],["# CMake doesn't display the -framework Cocoa string in the UI even",239],["# But for non-OSX systems, I will use the CMake Threads package.",239],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["# should be set in the CMake list file of the project before CPack module is",370],["# This file is part of the CMake build system for OGRE",449],["# (To distributed this file outside of CMake, substitute the full",586],["# Byproducts of CMake generate step:",1365],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["# (To distribute this file outside of CMake, substitute the full",3976]],"useCount":30433},{"word":"CMakeCCompiler","context":[["\"CMakeFiles/3.4.1/CMakeCCompiler.cmake\"",37],["\"/usr/share/cmake/Modules/CMakeCCompiler.cmake.in\"",64],["\"CMakeFiles/3.2.2/CMakeCCompiler.cmake\"",76],["\"CMakeFiles/3.5.1/CMakeCCompiler.cmake\"",58],["\"CMakeFiles/3.4.0/CMakeCCompiler.cmake\"",47],["\"CMakeFiles/3.3.2/CMakeCCompiler.cmake\"",106],["\"CMakeFiles/3.0.2/CMakeCCompiler.cmake\"",176],["\"/usr/share/cmake-2.8/Modules/CMakeCCompiler.cmake.in\"",313],["\"CMakeFiles/2.8.12.2/CMakeCCompiler.cmake\"",813],["\"CMakeFiles/CMakeCCompiler.cmake\"",397]],"useCount":2518},{"word":"CMakeCXXCompiler","context":[["\"/usr/share/cmake-2.8/Modules/CMakeCXXCompiler.cmake.in\"",298],["\"CMakeFiles/2.8.12.2/CMakeCXXCompiler.cmake\"",714],["\"CMakeFiles/3.0.2/CMakeCXXCompiler.cmake\"",171],["\"CMakeFiles/3.2.2/CMakeCXXCompiler.cmake\"",75],["\"CMakeFiles/3.3.2/CMakeCXXCompiler.cmake\"",69],["\"/usr/share/cmake/Modules/CMakeCXXCompiler.cmake.in\"",66],["\"CMakeFiles/3.2.1/CMakeCXXCompiler.cmake\"",39],["\"CMakeFiles/3.5.1/CMakeCXXCompiler.cmake\"",61],["\"CMakeFiles/CMakeCXXCompiler.cmake\"",388],["\"CMakeFiles/3.4.0/CMakeCXXCompiler.cmake\"",47]],"useCount":2312},{"word":"CMakeDirectoryInformation","context":[["\"core/CMakeFiles/CMakeDirectoryInformation.cmake\"",22],["\"lib/CMakeFiles/CMakeDirectoryInformation.cmake\"",22],["\"doc/CMakeFiles/CMakeDirectoryInformation.cmake\"",26],["\"examples/CMakeFiles/CMakeDirectoryInformation.cmake\"",34],["\"docs/CMakeFiles/CMakeDirectoryInformation.cmake\"",36],["\"tests/CMakeFiles/CMakeDirectoryInformation.cmake\"",39],["\"include/CMakeFiles/CMakeDirectoryInformation.cmake\"",50],["\"src/CMakeFiles/CMakeDirectoryInformation.cmake\"",156],["\"gtest/CMakeFiles/CMakeDirectoryInformation.cmake\"",167],["\"CMakeFiles/CMakeDirectoryInformation.cmake\"",1373]],"useCount":3402},{"word":"CMakeFiles","context":[["\"CMakeFiles/CMakeCCompiler.cmake\"",397],["\"CMakeFiles/CMakeCXXCompiler.cmake\"",388],["\"CMakeFiles/2.8.12.2/CMakeCXXCompiler.cmake\"",714],["\"CMakeFiles/2.8.12.2/CMakeCCompiler.cmake\"",813],["\"CMakeFiles\"",248],["\"CMakeFiles/R10.5\"",240],["\"CMakeFiles/CMakeDirectoryInformation.cmake\"",1373],["\"CMakeFiles/cmake.check_cache\"",1373],["\"CMakeFiles/2.8.12.2/CMakeSystem.cmake\"",628],["\"CMakeFiles/CMakeSystem.cmake\"",399]],"useCount":36065},{"word":"CMakeLists","context":[["if( EXISTS \"${CMAKE_SOURCE_DIR}/jni/CMakeLists.txt\" )",141],["#    In your CMakeLists.txt, add these lines:",73],["# Included from ../CMakeLists.txt",113],["\"/usr/src/gtest/CMakeLists.txt\"",162],["# Non-cache variables you might use in your CMakeLists.txt:",112],["# 2. Add the following line to your CMakeLists.txt:",101],["## Then modify the CMakeLists.txt file in the root directory of your",231],["\"CMakeLists.txt\"",522],["\"../CMakeLists.txt\"",627],["\"../src/CMakeLists.txt\"",70]],"useCount":5646},{"word":"CMakeParseArguments","context":[["include(CMakeParseArguments) # cmake_parse_arguments",63],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeParseArguments.cmake\"",28],["\"/usr/share/cmake-3.0/Modules/CMakeParseArguments.cmake\"",35],["include(CMakeParseArguments)",1058],["\"/usr/share/cmake-2.8/Modules/CMakeParseArguments.cmake\"",475],["include (CMakeParseArguments)",100],["\"/usr/share/cmake/Modules/CMakeParseArguments.cmake\"",46],["INCLUDE(CMakeParseArguments)",50],["include( CMakeParseArguments )",62],["include(${CMAKE_CURRENT_LIST_DIR}/CMakeParseArguments.cmake)",66]],"useCount":2061},{"word":"CMakeSystem","context":[["if( CMAKE_BINARY_DIR AND EXISTS \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeSystem.cmake\" )",134],["\"CMakeFiles/3.3.2/CMakeSystem.cmake\"",98],["\"/usr/share/cmake/Modules/CMakeSystem.cmake.in\"",66],["\"CMakeFiles/3.2.2/CMakeSystem.cmake\"",59],["\"CMakeFiles/3.5.1/CMakeSystem.cmake\"",51],["\"CMakeFiles/3.4.0/CMakeSystem.cmake\"",37],["\"CMakeFiles/2.8.12.2/CMakeSystem.cmake\"",628],["\"CMakeFiles/3.0.2/CMakeSystem.cmake\"",136],["\"/usr/share/cmake-2.8/Modules/CMakeSystem.cmake.in\"",318],["\"CMakeFiles/CMakeSystem.cmake\"",399]],"useCount":2334},{"word":"COMMAND","context":[["COMMAND ${cmd}",274],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"",396],["EXECUTE_PROCESS(COMMAND \"/usr/bin/strip\" \"${file}\")",215],["execute_process(COMMAND",442],["COMMAND \"${CUDA_NVCC_EXECUTABLE}\"",590],["COMMAND",1350],["COMMAND ${CMAKE_COMMAND}",965],["COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}",736],["COMMAND    ${CMAKE_COMMAND}",600],["COMMAND \"${CMAKE_COMMAND}\"",599]],"useCount":23361},{"word":"COMMENT","context":[["COMMENT \"${cuda_build_comment_string}\"",65],["COMMENT \"${_comment}\"",58],["COMMENT \"Creating export file for ${target_name}\")",54],["COMMENT ${comment}",126],["COMMENT \"Running C++ protocol buffer compiler on ${FIL}\"",71],["COMMENT",121],["COMMENT \"Resetting code coverage counters to zero.\\nProcessing code coverage counters and generating report.\"",94],["COMMENT \"Cobertura code coverage report saved in ${_outputname}.xml.\"",91],["COMMENT \"Open ./${_outputname}/index.html in your browser to view the coverage report.\"",91],["COMMENT \"Running gcovr to produce Cobertura code coverage report.\"",90]],"useCount":2614},{"word":"COMMON","context":[["\"/home/einstein/openairinterface5g/targets/ARCH/COMMON\"",240],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair2/COMMON\"",242],["\"/home/einstein/openairinterface5g/targets/COMMON\"",240]],"useCount":2471},{"word":"COMPILE_FLAGS","context":[["COMPILE_FLAGS \" ${c_compile_flags}\")",93],["COMPILE_FLAGS \"${cxx_flags}\")",109],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106],["GET_TARGET_PROPERTY(oldProps ${_targetName} COMPILE_FLAGS)",92],["COMPILE_FLAGS \"-F${OGRE_FRAMEWORK_PATH}\"",69],["IF(\"${ARGV3}\" STREQUAL \"COMPILE_FLAGS\")",42],["#        COMPILE_FLAGS - Compile flags",66],["SET_TARGET_PROPERTIES(${_targetName} PROPERTIES COMPILE_FLAGS \"${newProperties}\")",49],["COMPILE_FLAGS ${_compileFlags})",55],["COMPILE_FLAGS",58]],"useCount":3125},{"word":"COMPONENT","context":[["set(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")",2385],["IF(COMPONENT)",5696],["message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",2385],["SET(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")",5696],["ELSE(COMPONENT)",5696],["MESSAGE(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",5696],["ENDIF(COMPONENT)",5696],["if(COMPONENT)",2385],["foreach(COMPONENT ${Boost_FIND_COMPONENTS})",258],["ENDFOREACH(COMPONENT)",216]],"useCount":45022},{"word":"CONFIGURATIONS","context":[["CONFIGURATIONS Release",61],["CONFIGURATIONS Debug)",52],["RUNTIME DESTINATION \"bin${OGRE_DEBUG_PATH}\" CONFIGURATIONS Debug",45],["RUNTIME DESTINATION \"bin${OGRE_RELEASE_PATH}\" CONFIGURATIONS Release None \"\"",45],["CONFIGURATIONS Debug RelWithDebInfo",63],["CONFIGURATIONS Release RelWithDebInfo",66],["CONFIGURATIONS Release)",73],["set(_multiValueArgs LANGUAGES CONFIGURATIONS)",76],["CONFIGURATIONS RelWithDebInfo",256],["CONFIGURATIONS Debug",324]],"useCount":2498},{"word":"COPYING","context":[["# Licence details can be found in the file COPYING.",30],["#  For details see the COPYING-CMAKE-SCRIPTS file.",25],["# For details see the accompanying COPYING file.",35],["# For details see the accompanying COPYING* file.",37],["# the Snow Leopard project; see the file COPYING. If not see",40],["set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/COPYING\")",43],["# see accompanying file COPYING-CMAKE-SCRIPTS for details.",51],["## found in the COPYING file.",458],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534]],"useCount":3481},{"word":"CPack","context":[["SET(CPACK_PACKAGE_DESCRIPTION_FILE \"/usr/share/cmake-2.8/Templates/CPack.GenericDescription.txt\")",104],["\"/usr/share/cmake-2.8/Modules/CPack.cmake\"",53],["include(CPack)",425],["# This file will be configured to contain variables for CPack. These variables",370],["# should be set in the CMake list file of the project before CPack module is",370],["INCLUDE(CPack)",213],["SET(CPACK_RESOURCE_FILE_WELCOME \"/usr/share/cmake-2.8/Templates/CPack.GenericWelcome.txt\")",125],["SET(CPACK_RESOURCE_FILE_README \"/usr/share/cmake-2.8/Templates/CPack.GenericDescription.txt\")",109],["SET(CPACK_RESOURCE_FILE_LICENSE \"/usr/share/cmake-2.8/Templates/CPack.GenericLicense.txt\")",64],["include (CPack)",74]],"useCount":3074},{"word":"CUDA","context":[["# Helper to add the include directory for CUDA only once",66],["# CUDA COMPILE",64],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["#                            Only available for CUDA version 3.2+.",96],["#                           Only available for CUDA version 3.2+.",80],["#                            Only available for CUDA version 5.5+.",72],["# Initialize our list of includes with the user ones followed by the CUDA system ones.",66],["\"/Developer/CUDA\"",66],["# Locate CUDA, Set Build Type, etc.",66],["# CUDA ADD CUBLAS TO TARGET",64]],"useCount":3189},{"word":"CXX","context":[["# The C and CXX include file search paths:",935],["# The C and CXX include file regular expressions for this directory.",2244],["foreach(lang CXX)",2027],["IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE \"CXX\"",1128],["FOREACH(lang CXX)",4715],["IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG \"CXX\"",541],["set(CMAKE_CXX_COMPILER_ENV_VAR \"CXX\")",355],["IMPORTED_LINK_INTERFACE_LANGUAGES_RELWITHDEBINFO \"CXX\"",352],["IMPORTED_LINK_INTERFACE_LANGUAGES_MINSIZEREL \"CXX\"",234],["\"CXX\"",7991]],"useCount":24559},{"word":"CYGWIN","context":[["ENDIF(WIN32 AND NOT CYGWIN)",108],["SET(CYGWIN 1)",206],["if(CYGWIN)",185],["if(WIN32 AND NOT CYGWIN)",160],["if (CYGWIN)",153],["IF (CYGWIN)",147],["ENDIF (CYGWIN)",146],["if( CYGWIN )",137],["IF(WIN32 AND NOT CYGWIN)",118],["set(CYGWIN 1)",746]],"useCount":4022},{"word":"Cellar","context":[["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeCommonLanguageInclude.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeSystemSpecificInformation.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Platform/UnixPaths.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Platform/Darwin-Clang.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeSystemSpecificInitialize.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Platform/Darwin-Clang-C.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeGenericSystem.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Platform/Darwin-Initialize.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/CMakeCInformation.cmake\"",65],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Compiler/Clang.cmake\"",65]],"useCount":2504},{"word":"Check","context":[["# Check the existence of the libraries.",160],["# Check arguments.",120],["# Check prereqs",108],["# Check if struct sockaddr_in::sin_len is available.",92],["# Check if struct sockaddr_in6::sin6_len is available.",92],["# Check for sockaddr_storage.ss_family",92],["# Check for IPv6 support",92],["# Check the version of Boost against the requested version.",90],["# Check the platform selection and setup for developer root",81],["# Check return type of signal handlers",80]],"useCount":6780},{"word":"Clang","context":[["SET(CMAKE_CXX_COMPILER_ID \"Clang\")",253],["set(CMAKE_C_COMPILER_ID \"Clang\")",323],["set(CMAKE_CXX_COMPILER_ID \"Clang\")",466],["set( CMAKE_CXX_COMPILER_ID Clang)",109],["message( FATAL_ERROR \"Could not find the Clang compiler driver\" )",109],["SET(CMAKE_C_COMPILER_ID \"Clang\")",104],["if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")",97],["# - Added support for Clang.",88],["# Clang version 3.0.0 and greater now supports gcov as well.",83],["# Clang options used",76]],"useCount":5079},{"word":"Compiler","context":[["#  PORTAUDIO_DEFINITIONS - Compiler switches required for using Portaudio",28],["# XLC MPI Compiler names",43],["#  LIBXML2_DEFINITIONS - Compiler switches required for using LibXml2",33],["#   MPI_<lang>_COMPILER        MPI Compiler wrapper for <lang>",30],["\"Compiler support for a deprecated attribute\")",29],["# Compiler options",43],["DOC \"The Google Protocol Buffers Compiler\"",47],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Compiler/Clang-C.cmake\"",57],["CACHE INTERNAL \"Compiler support for a deprecated attribute\")",29],["\"/usr/local/Cellar/cmake/3.3.2/share/cmake/Modules/Compiler/Clang.cmake\"",65]],"useCount":2696},{"word":"Could","context":[["message( WARNING \"Could not determine machine name for compiler from ${_root}\" )",112],["message( FATAL_ERROR \"Could not find any working toolchain in the NDK. Probably your Android NDK is broken.\" )",110],["message( ERROR \"Could not find libsupc++.a for a chosen platform. Either your NDK is not supported or is broken.\")",111],["message( FATAL_ERROR \"Could not find install_name_tool, please check your installation.\" )",136],["message( FATAL_ERROR \"Could not find neither Android NDK nor Android standalone toolchain.",115],["message( FATAL_ERROR \"Could not find the Clang compiler driver\" )",109],["set(FIND_SFML_ERROR \"Could NOT find SFML (missing: ${FIND_SFML_MISSING})\")",101],["message(STATUS \"Could NOT find Boost\")",75],["message(STATUS \"Could NOT find Boost\\n${Boost_ERROR_REASON}\")",75],["message(STATUS \"Could not locate ${PREFIX}\")",68]],"useCount":2811},{"word":"Create","context":[["# Create imported target opencv_video",36],["# Create Swig module",39],["# Create a revision-string that we can use",48],["#Create a dummy custom command that depends on other targets",49],["# Create an include path for each file specified",53],["# Create up the comment string",66],["# Create a static archive incrementally for large object file counts.",44],["# Create custom commands and targets for each file.",247],["# Create the actual revision.h file from the above params",88],["# Include the dependency file.  Create it first if it doesn't exist .  The",66]],"useCount":2796},{"word":"D","context":[["-D \"TEST_EXPECT=${resultcode}\"",212],["-D \"output_file:FILEPATH=${cmake_dependency_file}.tmp\"",200],["-D \"input_file:FILEPATH=${NVCC_generated_dependency_file}\"",199],["-D \"input_file:STRING=${generated_cubin_file}\"",198],["-D LATEX_TARGET=${LATEX_TARGET}",176],["#  Options (can be set as cmake parameters: -D<option_name>=<value>):",135],["-D MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}",126],["-D \"TEST_PROGRAM=$<TARGET_FILE:h5dump>\"",110],["set(definitions ${definitions} -D${d})",105],["\"-D${VAR} ${CMAKE_REQUIRED_FLAGS}\")",101]],"useCount":6200},{"word":"DEBUG","context":[["#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")",71],["foreach(c DEBUG RELEASE)",62],["# Find DEBUG libraries",70],["DEBUG:BOOL=OFF",69],["IMPORTED_CONFIGURATIONS DEBUG)",83],["if(DEBUG)",60],["DEBUG:BOOL=ON",101],["IF(DEBUG)",121],["SET(CMAKE_INSTALL_CONFIG_NAME \"DEBUG\")",76],["SET(BUILD_TYPE DEBUG)",82]],"useCount":2432},{"word":"DEFAULT_MSG","context":[["DEFAULT_MSG",853],["find_package_handle_standard_args(Eigen3 DEFAULT_MSG EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK)",98],["find_package_handle_standard_args(DOXYFILE_IN DEFAULT_MSG \"DOXYFILE_IN\")",47],["find_package_handle_standard_args(PY_${module} DEFAULT_MSG PY_${module_upper})",44],["find_package_handle_standard_args(OpenSSL DEFAULT_MSG",40],["find_package_handle_standard_args(MPI_${lang} DEFAULT_MSG MPI_${lang}_LIBRARIES MPI_${lang}_INCLUDE_PATH)",39],["FIND_PACKAGE_HANDLE_STANDARD_ARGS( OpenCL DEFAULT_MSG OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS )",34],["FIND_PACKAGE_HANDLE_STANDARD_ARGS(GLM DEFAULT_MSG",34],["FIND_PACKAGE_HANDLE_STANDARD_ARGS(OpenCL DEFAULT_MSG OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS)",35],["find_package_handle_standard_args(MPI_${lang} DEFAULT_MSG MPI_${lang}_COMPILER)",38]],"useCount":2738},{"word":"DEFINED","context":[["IF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["if (CUDA_HOST_COMPILER STREQUAL \"$(VCInstallDir)bin\" AND DEFINED CCBIN)",180],["if(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",613],["if(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",2385],["IF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5705],["ENDIF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5703],["if(NOT DEFINED CMAKE_INSTALL_PREFIX)",2389],["ENDIF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["IF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["ENDIF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672]],"useCount":46699},{"word":"DEPENDS","context":[["DEPENDS",2706],["DEPENDS ${proj_DEPENDENCIES}",124],["#     [DEPENDS dep1 ...]",90],["DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}",76],["DEPENDS libraries",78],["DEPENDS ${TARGET_NAME})",79],["DEPENDS ${ALL_GEN_OUTPUT_FILES_lisp}",85],["DEPENDS ${ALL_GEN_OUTPUT_FILES_py}",85],["DEPENDS ${ALL_GEN_OUTPUT_FILES_cpp}",85],["DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)",88]],"useCount":10561},{"word":"DESTINATION","context":[["LIBRARY DESTINATION lib",113],["DESTINATION bin${OGRE_RELWDBG_PATH}",121],["DESTINATION bin${OGRE_DEBUG_PATH}",121],["DESTINATION bin",158],["file(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/OGRE/Samples\" TYPE SHARED_LIBRARY FILES",172],["FILE(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib\" TYPE SHARED_LIBRARY FILES",172],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["DESTINATION",269],["RUNTIME DESTINATION bin",216]],"useCount":12370},{"word":"DIRECTORY","context":[["DIRECTORY",52],["install(DIRECTORY",86],["include_directories(${DIRECTORY})",39],["set(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})",39],["DIRECTORY     # Property Scope",49],["list(APPEND out_files \"${DIRECTORY}/${ARGS_GENERATE_VAPI}.vapi\")",40],["set_property(DIRECTORY APPEND PROPERTY",118],["set_property(DIRECTORY APPEND",44],["set(out_file \"${DIRECTORY}/${src}\")",40],["list(APPEND out_files \"${DIRECTORY}/${ARGS_GENERATE_HEADER}.h\")",40]],"useCount":2735},{"word":"DO","context":[["set (NDK_GDB_MK \"# This is a generated file. DO NOT EDIT!\\n\\nAPP_ABI := ${ANDROID_NDK_ABI_NAME}\\n\")",13],["# Helper function.  DO NOT CALL DIRECTLY.",13],["message(\"*** DO NOT DISABLE IT UNLESS YOU KNOW WHAT YOU'RE DOING!\")",16],["# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few",66],["# CMAKE generated file: DO NOT EDIT!",3617],["# !!! DO NOT PLACE HEADER GUARDS HERE !!!",584],["message(\" *** DO NOT ENABLE IT UNLESS YOU KNOW WHAT YOU'RE DOING!\")",11],["message(\" *** DO NOT DISABLE IT UNLESS YOU KNOW WHAT YOU'RE DOING!\")",53],["#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #",102],["# WARNING: DO NOT EDIT BEYOND THIS POINT #",20]],"useCount":4506},{"word":"DOC","context":[["find_program( NDK_CCACHE \"${_ndk_ccache}\" DOC \"The path to ccache binary\")",112],["DOC ${_doc}",90],["elseif (${arg} STREQUAL \"DOC\")",88],["DOC \"Specify the location of the mysql library here.\"",82],["DOC \"Location of FFMPEG Headers\"",74],["DOC \"Toolkit location.\"",132],["DOC \"The directory where GL/glew.h resides\")",170],["DOC \"The GLEW library\")",194],["DOC",595],["FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC \"OpenCL lib for OSX\")",69]],"useCount":5462},{"word":"Darwin","context":[["# on Mac OS X/Darwin is \"xgcc\".",89],["# the Mac OS X/Darwin version of GCC.",89],["if(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")",169],["elseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")",144],["elseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")",124],["if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")",115],["if (${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")",108],["# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake",83],["set(CMAKE_CXX_PLATFORM_ID \"Darwin\")",83],["set(CMAKE_C_PLATFORM_ID \"Darwin\")",92]],"useCount":3452},{"word":"Dd","context":[["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",110],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",60],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",60],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",661],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",836]],"useCount":3145},{"word":"Debug","context":[["CONFIGURATIONS Debug",324],["set( ANDROID_CXX_FLAGS_DEBUG   \"${ANDROID_CXX_FLAGS_DEBUG}\"   CACHE INTERNAL \"Android specific c/c++ Debug flags\" )",109],["set( CMAKE_C_FLAGS_DEBUG       \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c Debug flags\" )",110],["set( CMAKE_CXX_FLAGS_DEBUG     \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c++ Debug flags\" )",110],["if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")",133],["# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or",198],["# If we weren't given a build_configuration, use Debug.",198],["#                               blank or unspecified Debug is assumed as this is",198],["set(build_configuration Debug)",199],["SET(CMAKE_INSTALL_CONFIG_NAME \"Debug\")",783]],"useCount":8300},{"word":"Default","context":[["#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)",34],["#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)",34],["#                            specified by these hint variables. Default is OFF.",35],["#  CUDA_BUILD_EMULATION (Default OFF for device mode)",34],["#  * Default   : -",298],["#     Default   : -",236],["#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be",71],["#  * Default   :",56],["#      \"\" CACHE PATH \"Default install path\")",44],["# Default GCC flags",35]],"useCount":2633},{"word":"Define","context":[["/* Define to the version of this package. */",191],["/* Define to 1 if you have the <sys/stat.h> header file. */",189],["/* Define to 1 if you have the <inttypes.h> header file. */",189],["/* Define to the address where bug reports for this package should be sent. */",187],["/* Define to the one symbol short name of this package. */",179],["/* Define to the full name of this package. */",192],["/* Define to the full name and version of this package. */",193],["/* Define to 1 if you have the <unistd.h> header file. */",225],["/* Define to 1 if you have the <sys/types.h> header file. */",214],["/* Define to 1 if you have the <stdint.h> header file. */",203]],"useCount":14927},{"word":"DependInfo","context":[["\"/home/kdbanman/browseRDF/tulip-3.8.0-src/build/thirdparty/libqhull/CMakeFiles/qhull.dir/DependInfo.cmake\"",121],["\"/home/bharat/gtsam/gtsam-3.2.0/build/CppUnitLite/CMakeFiles/CppUnitLite.dir/DependInfo.cmake\"",127],["\"CMakeFiles/test.dir/DependInfo.cmake\"",136],["\"CMakeFiles/run_tests.dir/DependInfo.cmake\"",162],["\"CMakeFiles/doxygen.dir/DependInfo.cmake\"",163],["\"gtest/CMakeFiles/gtest.dir/DependInfo.cmake\"",167],["\"gtest/CMakeFiles/gtest_main.dir/DependInfo.cmake\"",167],["\"/home/bharat/gtsam/gtsam-3.2.0/build/gtsam/CMakeFiles/gtsam.dir/DependInfo.cmake\"",172],["\"CMakeFiles/clean_test_results.dir/DependInfo.cmake\"",162],["\"CMakeFiles/tests.dir/DependInfo.cmake\"",201]],"useCount":20829},{"word":"Doxygen","context":[["# documentation generated by doxygen is written. Doxygen will use this",84],["# the version control system). Doxygen will invoke the program by executing (via",75],["# input file. Doxygen will then use the output that the filter program writes",66],["# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all",63],["# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen",63],["DOCSET_FEEDNAME        = \"Doxygen generated docs\"",78],["# invoke to filter for each input file. Doxygen will invoke the filter program",87],["FIND_PACKAGE(Doxygen)",97],["# sources only. Doxygen will then generate output that is more tailored for",109],["find_package(Doxygen)",236]],"useCount":5253},{"word":"E","context":[["execute_process(COMMAND ${CMAKE_COMMAND} -E echo ${cuda_execute_process_string})",198],["COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}",736],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"",396],["-E remove",252],["execute_process(COMMAND \"${CMAKE_COMMAND}\" -E echo -- ${status})",199],["COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different \"${cmake_dependency_file}.tmp\" \"${cmake_dependency_file}\"",199],["${CMAKE_COMMAND} -E chdir ${output_dir}",158],["COMMAND ${CMAKE_COMMAND} -E copy_if_different",197],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${cmake_dependency_file}.tmp\" \"${NVCC_generated_dependency_file}\"",191],["COMMAND ${CMAKE_COMMAND} -E copy",175]],"useCount":7677},{"word":"EDIT","context":[["#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #",102],["# CMAKE generated file: DO NOT EDIT!",3617],["# WARNING: DO NOT EDIT BEYOND THIS POINT #",20],["set (NDK_GDB_MK \"# This is a generated file. DO NOT EDIT!\\n\\nAPP_ABI := ${ANDROID_NDK_ABI_NAME}\\n\")",13]],"useCount":3752},{"word":"ELSE","context":[["ELSE (WIN32)",569],["ELSE(APPLE)",289],["ELSE (APPLE)",215],["ELSE(CMAKE_COMPILER_IS_GNUCXX)",212],["ELSE()",10757],["ELSE(BUILD_TYPE)",5696],["ELSE(COMPONENT)",5696],["ELSE(CMAKE_INSTALL_COMPONENT)",1131],["ELSE ()",1119],["ELSE(WIN32)",886]],"useCount":35920},{"word":"ELSEIF","context":[["ELSEIF(WITH_ATOMIC_OPS STREQUAL \"smp\")",79],["ELSEIF(MINGW)",107],["ELSEIF(UNIX)",121],["ELSEIF(APPLE)",129],["ELSEIF(WIN32)",216],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(NOT WITH_ATOMIC_OPS)",79],["ELSEIF(WITH_ATOMIC_OPS STREQUAL \"rwlocks\")",69]],"useCount":4930},{"word":"ENDFOREACH","context":[["ENDFOREACH()",4570],["ENDFOREACH(lang)",9004],["ENDFOREACH ()",402],["ENDFOREACH(COMPONENT)",216],["ENDFOREACH (_current_FILE)",213],["ENDFOREACH (it)",218],["ENDFOREACH(dir)",210],["ENDFOREACH(arg)",184],["ENDFOREACH(it)",166],["ENDFOREACH(file)",1333]],"useCount":20568},{"word":"ENDFUNCTION","context":[["ENDFUNCTION ()",28],["ENDFUNCTION(LATEX_FILE_MATCH)",15],["ENDFUNCTION(LATEX_COPY_INPUT_FILE)",15],["ENDFUNCTION(ADD_LATEX_TARGETS)",15],["ENDFUNCTION()",1799],["ENDFUNCTION() # SETUP_TARGET_FOR_COVERAGE",99],["ENDFUNCTION() # SETUP_TARGET_FOR_COVERAGE_COBERTURA",84],["ENDFUNCTION(PYTHON_ADD_MODULE)",41],["ENDFUNCTION(LATEX_PROCESS_IMAGES)",15],["ENDFUNCTION(PYTHON_WRITE_MODULES_HEADER)",25]],"useCount":2532},{"word":"ENDIF","context":[["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5703],["ENDIF(NOT CMAKE_INSTALL_COMPONENT)",5696],["ENDIF(BUILD_TYPE)",5696],["ENDIF(COMPONENT)",5696],["ENDIF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["ENDIF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["ENDIF ()",3618],["ENDIF(CMAKE_INSTALL_DO_STRIP)",2211],["ENDIF()",46975]],"useCount":144379},{"word":"ENDMACRO","context":[["ENDMACRO (QT4_ADD_RESOURCES)",68],["ENDMACRO(_PCH_GET_COMPILE_FLAGS)",54],["ENDMACRO (QT4_WRAP_CPP)",68],["ENDMACRO (QT4_WRAP_UI)",68],["ENDMACRO(ADD_PRECOMPILED_HEADER)",69],["ENDMACRO(PARSE_ARGUMENTS)",76],["ENDMACRO ()",519],["ENDMACRO()",4116],["ENDMACRO (QT4_EXTRACT_OPTIONS)",61],["ENDMACRO (QT4_MAKE_OUTPUT_FILE )",53]],"useCount":7871},{"word":"ENV","context":[["$ENV{OSGDIR}",237],["$ENV{SDL2}",227],["ENV SDL2DIR",223],["ENV LD_LIBRARY_PATH",215],["PATHS ENV LIBRARY_PATH ENV LD_LIBRARY_PATH)",169],["$ENV{SDLDIR}",293],["$ENV{SDL2DIR}",488],["ENV CUDA_PATH",278],["$ENV{OSG_DIR}",262],["ENV SDLDIR",240]],"useCount":26577},{"word":"EQUAL","context":[["if(NOT res EQUAL 0)",141],["if(CMAKE_SIZEOF_VOID_P EQUAL 8)",664],["if(_index EQUAL -1)",648],["if(${count} EQUAL 1)",605],["if(${_index} EQUAL ${_count})",598],["if( __toolchainIdx EQUAL -1 )",272],["if (MPI_COMPILER_RETURN EQUAL 0)",218],["if (NOT MPI_COMPILER_RETURN EQUAL 0)",164],["if (CMAKE_SIZEOF_VOID_P EQUAL 8)",156],["IF(CMAKE_SIZEOF_VOID_P EQUAL 8)",150]],"useCount":15520},{"word":"ERROR_QUIET","context":[["ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)",107],["execute_process( COMMAND ${__cmd} RESULT_VARIABLE __cmd_result OUTPUT_QUIET ERROR_QUIET )",104],["RESULT_VARIABLE __result ERROR_QUIET )",103],["ERROR_QUIET",1528],["ERROR_QUIET)",230],["OUTPUT_QUIET ERROR_QUIET",54],["set(_quiet_arg ERROR_QUIET)",24],["ERROR_QUIET )",23],["OUTPUT_QUIET ERROR_QUIET)",23],["OUTPUT_VARIABLE RUBY_HAS_VENDOR_RUBY  ERROR_QUIET)",20]],"useCount":2362},{"word":"EXECUTE_PROCESS","context":[["EXECUTE_PROCESS(",1089],["EXECUTE_PROCESS(COMMAND \"/usr/bin/install_name_tool\"",116],["EXECUTE_PROCESS (",111],["EXECUTE_PROCESS(COMMAND",93],["#  EXECUTE_PROCESS(COMMAND \"date\" \"/T\" OUTPUT_VARIABLE TMP_DATE)",54],["EXECUTE_PROCESS(COMMAND \"date\" \"+%Y\" OUTPUT_VARIABLE MYSQL_COPYRIGHT_YEAR OUTPUT_STRIP_TRAILING_WHITESPACE)",44],["EXECUTE_PROCESS(COMMAND sw_vers \"-productVersion\"",42],["# Use the newer EXECUTE_PROCESS command if it is available.",34],["ENDIF(COMMAND EXECUTE_PROCESS)",30],["EXECUTE_PROCESS(COMMAND \"/usr/bin/strip\" \"${file}\")",215]],"useCount":2297},{"word":"EXISTS","context":[["IF(EXISTS \"${file}\" AND",424],["if(NOT EXISTS \"${file}\" )",360],["if( NOT EXISTS \"${__libsupcxx}\" )",213],["if( EXISTS \"${CMAKE_SOURCE_DIR}/jni/CMakeLists.txt\" )",141],["if( __test_path AND NOT EXISTS \"${${var_name}}\" )",136],["if( CMAKE_BINARY_DIR AND EXISTS \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeSystem.cmake\" )",134],["if (NOT EXISTS \"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/.catkin\")",114],["if (NOT EXISTS \"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}\")",114],["ENDIF (EXISTS ${_file})",120],["IF (EXISTS ${_file})",128]],"useCount":14827},{"word":"EXPR","context":[["math(EXPR _index \"${_index} + 1\")",1190],["math(EXPR Boost_MINOR_VERSION \"${Boost_VERSION} / 100 % 1000\")",78],["math (EXPR _index \"${_index} + 1\")",120],["MATH(EXPR Boost_MAJOR_VERSION \"${Boost_VERSION} / 100000\")",60],["math(EXPR ip1 \"${i}+1\")",60],["math( EXPR ANDROID_NDK_RELEASE_NUM \"${ANDROID_NDK_RELEASE_NUM}+${__ndkReleaseLetterNum}\" )",69],["math (EXPR _endIndex \"${_index} - 1\")",76],["math( EXPR __availableToolchainsCount \"${__availableToolchainsCount}-1\" )",136],["math(EXPR Boost_SUBMINOR_VERSION \"${Boost_VERSION} % 100\")",78],["math(EXPR Boost_MAJOR_VERSION \"${Boost_VERSION} / 100000\")",78]],"useCount":4523},{"word":"Ee","context":[["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",661],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",836],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583]],"useCount":12314},{"word":"Enable","context":[["/* Enable multithreading support. */",36],["# - Enable Code Coverage",101],["#Enable extended object support for debug compiles on X64 (not required on X86)",74],["# of all compounds will be generated. Enable this if the project",63],["# Enable and treat as errors the following warnings to easily detect virtual function signature failures:",49],["option (COTIRE_DEBUG \"Enable cotire debugging output?\" ${COTIRE_DEBUG_INIT})",38],["# Enable ExternalProject CMake module",38],["option (COTIRE_VERBOSE \"Enable cotire verbose output?\" ${COTIRE_VERBOSE_INIT})",38],["# Enable and setup External project global properties",36],["/* Enable word list support. */",36]],"useCount":2556},{"word":"Example","context":[["#    Example:",125],["# included. Example variables are:",92],["#\tExample:",88],["# Example Usages:",47],["#  Example:",134],["# Example of how to find an include file from the CUDA_SDK_ROOT_DIR",58],["# Example of how to find a library in the CUDA_SDK_ROOT_DIR",60],["# Example:",467],["# Example usage:",278],["# Example Usage:",143]],"useCount":2067},{"word":"ExternalProject_Add","context":[["ExternalProject_Add(${name}",23],["_ep_parse_arguments(ExternalProject_Add ${name} _EP_ \"${ARGN}\")",28],["ExternalProject_Add(${PROJECT}",23],["function(ExternalProject_Add name)",28],["ExternalProject_Add(eigen",21],["ExternalProject_Add(",1005],["ExternalProject_Add(${proj}",575],["\"See documentation of the ExternalProject_Add() function in the \"",62],["ExternalProject_Add( ${proj}",41],["ExternalProject_Add(${ep}",31]],"useCount":2090},{"word":"FALSE","context":[["set( Boost_FOUND FALSE )",132],["set(OGRE_DEPS_FOUND FALSE)",465],["set(CMAKE_CROSSCOMPILING \"FALSE\")",359],["if(\"FALSE\" STREQUAL \"TRUE\")",297],["set(SFML_FOUND FALSE)",275],["SET(CMAKE_CROSSCOMPILING \"FALSE\")",259],["set (_targetUsePCH FALSE)",249],["set(SFML_VERSION_OK FALSE)",206],["\"Defaults to FALSE.\"",152],["set(VERSION_OK FALSE)",143]],"useCount":13624},{"word":"FATAL_ERROR","context":[["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["message(FATAL_ERROR \"CMake >= 2.6.0 required\")",198],["message(FATAL_ERROR \"Error generating file ${generated_file}\")",198],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["message(FATAL_ERROR \"Qt 5 requires at least CMake version 2.8.3\")",215],["message( FATAL_ERROR \"ANDROID_STL is set to invalid value \\\"${ANDROID_STL}\\\".",224],["MESSAGE(FATAL_ERROR",630],["message(FATAL_ERROR \"Error generating ${generated_file}\")",795],["message(FATAL_ERROR",1189],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652]],"useCount":19670},{"word":"FILE","context":[["FILE(RELATIVE_PATH rel ${CMAKE_CURRENT_SOURCE_DIR} ${infile})",105],["FILE(REMOVE ${_file})",123],["FILE(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib\" TYPE SHARED_LIBRARY FILES",172],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",257],["FILE \"${file}\"",258],["FILE(RPATH_CHANGE",405],["FILE(RPATH_REMOVE",825],["FILE(RPATH_CHECK",1852],["FILE(REMOVE_RECURSE",9633],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",273]],"useCount":20082},{"word":"FILEPATH","context":[["-D \"output_file:FILEPATH=${cmake_dependency_file}.tmp\"",200],["SET(QT_QMAKE_EXECUTABLE \"${QT_QMAKE_EXECUTABLE}-NOTFOUND\" CACHE FILEPATH \"Invalid qmake found\" FORCE)",51],["set(MPI_LIBRARY ${MPI_LIBRARY_WORK} CACHE FILEPATH \"MPI library to link against\" FORCE)",52],["-DPYTHON_LIBRARY:FILEPATH=${PYTHON_LIBRARY}",60],["set(${_library} ${_boost_filepathreal} CACHE FILEPATH \"${_docstring}\")",66],["set(MPI_LIB \"MPI_LIB-NOTFOUND\" CACHE FILEPATH \"Cleared\" FORCE)",141],["-DQT_QMAKE_EXECUTABLE:FILEPATH=${QT_QMAKE_EXECUTABLE}",152],["-D \"input_file:FILEPATH=${NVCC_generated_dependency_file}\"",199],["-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}",174],["-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}",177]],"useCount":2971},{"word":"FILES","context":[["FOREACH(FILE ${FILES})",52],["INSTALL(FILES ${STL_LIBRARY_NAME} ${real_library}",50],["FILES",278],["elseif (${arg} STREQUAL \"FILES\")",199],["file(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/OGRE/Samples\" TYPE SHARED_LIBRARY FILES",172],["FILE(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib\" TYPE SHARED_LIBRARY FILES",172],["INSTALL(FILES",116],["FILES \"${UNIVERSAL_LIBRARY_NAME}\"",60],["file(DIFFERENT EXPORT_FILE_CHANGED FILES",53],["install(FILES",425]],"useCount":4898},{"word":"FIND","context":[["list( FIND __availableToolchains \"${ANDROID_TOOLCHAIN_NAME}\" __toolchainIdx )",136],["string( FIND \" abcdefghijklmnopqastuvwxyz\" \"${CMAKE_MATCH_2}\" __ndkReleaseLetterNum )",71],["list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)",77],["LIST(FIND larg_names \"${arg}\" is_arg_name)",90],["LIST(FIND loption_names \"${arg}\" is_option)",91],["list( FIND ANDROID_SUPPORTED_ABIS \"${ANDROID_ABI}\" __androidAbiIdx )",136],["list( FIND ANDROID_SUPPORTED_NATIVE_API_LEVELS \"${ANDROID_NATIVE_API_LEVEL}\" __levelIdx )",136],["list( FIND CUDA_NVCC_FLAGS \"-ccbin\" ccbin_found0 )",180],["list( FIND CUDA_NVCC_FLAGS \"--compiler-bindir\" ccbin_found1 )",180],["list(FIND ${listname} ${_item} _index)",607]],"useCount":4600},{"word":"FIND_LIBRARY","context":[["FIND_LIBRARY(",704],["# FIND_PATH and FIND_LIBRARY normally search standard locations",62],["FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC \"OpenCL lib for OSX\")",69],["FIND_LIBRARY(LUA_LIBRARY",72],["FIND_LIBRARY(LIB_EAY",80],["FIND_LIBRARY(SDL2_LIBRARY_TEMP",122],["FIND_LIBRARY(SDL2MAIN_LIBRARY",190],["FIND_LIBRARY( GLEW_LIBRARY",191],["# in the FIND_PATH() and FIND_LIBRARY() calls",577],["FIND_LIBRARY(${MYLIBRARY}",121]],"useCount":6580},{"word":"FIND_PACKAGE","context":[["FIND_PACKAGE(X11)",46],["FIND_PACKAGE(Threads)",314],["FIND_PACKAGE(PkgConfig)",311],["# make FIND_PACKAGE friendly",111],["FIND_PACKAGE(Doxygen)",97],["FIND_PACKAGE (Threads)",96],["FIND_PACKAGE(LATEX)",81],["LABELS \"FIND_PACKAGE\"",54],["FIND_PACKAGE(PackageHandleStandardArgs)",52],["FIND_PACKAGE(ZLIB)",48]],"useCount":2593},{"word":"FIND_PATH","context":[["FIND_PATH(SDL2_INCLUDE_DIR SDL.h",159],["FIND_PATH( GLEW_INCLUDE_PATH GL/glew.h",132],["# FIND_PATH and FIND_LIBRARY normally search standard locations",62],["FIND_PATH(OPENSSL_ROOT_DIR",106],["FIND_PATH(LUA_INCLUDE_DIR lua.h",72],["FIND_PATH( GLEW_INCLUDE_DIR GL/glew.h",70],["FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC \"Include for OpenCL on OSX\")",68],["FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC \"Include for OpenCL CPP bindings on OSX\")",67],["# in the FIND_PATH() and FIND_LIBRARY() calls",577],["FIND_PATH(",599]],"useCount":5122},{"word":"FIND_SFML_COMPONENT_UPPER","context":[["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG",101],["set(FIND_SFML_MISSING \"${FIND_SFML_MISSING} SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY\")",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND FALSE)",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["set(SFML_LIBRARIES ${SFML_LIBRARIES} \"${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY}\")",101],["SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["optimized ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["string(TOUPPER ${FIND_SFML_COMPONENT} FIND_SFML_COMPONENT_UPPER)",103]],"useCount":4060},{"word":"FORCE","context":[["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["set(MPI_LIB \"MPI_LIB-NOTFOUND\" CACHE FILEPATH \"Cleared\" FORCE)",141],["CACHE STRING \"Output from TRY_RUN\" FORCE)",147],["FORCE",402],["FORCE )",438],["CACHE STRING \"Result from TRY_RUN\" FORCE)",567],["FORCE)",784],["set( ANDROID_NDK \"${ANDROID_NDK}\" CACHE INTERNAL \"Path of the Android NDK\" FORCE )",111],["set(vc OFF CACHE BOOL \"\" FORCE)",131],["SET(HAVE_DLOPEN FALSE CACHE \"Disable dlopen due to -static flag\" FORCE)",92]],"useCount":10535},{"word":"FOREACH","context":[["FOREACH(arg_name ${arg_names})",132],["FOREACH(lang CXX)",4715],["FOREACH(lang)",3112],["FOREACH(file ${CMAKE_INSTALL_MANIFEST_FILES})",1134],["FOREACH(lang C)",1002],["FOREACH(file",424],["FOREACH (_current_FILE ${ARGN})",202],["FOREACH(arg ${ARGN})",195],["FOREACH(lang C CXX)",182],["FOREACH(option ${option_names})",137]],"useCount":16696},{"word":"Files","context":[["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/BULLET_PHYSICS\")",69],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OpenSceneGraph\")",291],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files/BoringSSL\")",54],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/MySQL\")",56],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/RGBDemo\")",56],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/Eigen\")",78],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files/MySQL\")",98],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files/FreeRDP\")",99],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OSGEARTH\")",119],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/LLVM\")",285]],"useCount":3853},{"word":"Find","context":[["# Find Ogre plugins",64],["# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT",64],["# Find libraries",65],["# - Find python libraries",70],["# Find DEBUG libraries",70],["# Find RELEASE libraries",70],["# - Find unix commands from cygwin",74],["# Find all generators",86],["# Find out which libraries to use.",92],["# or change the Find behavior for a particular module (perhaps because the",159]],"useCount":6273},{"word":"FindPackageHandleStandardArgs","context":[["include(FindPackageHandleStandardArgs)",8410],["INCLUDE(FindPackageHandleStandardArgs)",2995],["include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)",821],["include (FindPackageHandleStandardArgs)",532],["\"/usr/share/cmake-2.8/Modules/FindPackageHandleStandardArgs.cmake\"",479],["include( FindPackageHandleStandardArgs )",264],["INCLUDE(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)",136],["INCLUDE (FindPackageHandleStandardArgs)",131],["#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)",131],["include ( FindPackageHandleStandardArgs )",103]],"useCount":14660},{"word":"Flags","context":[["CACHE STRING \"Flags used by the C++ compiler during coverage builds.\"",72],["CACHE STRING \"Flags used by the shared libraries linker during coverage builds.\"",71],["CACHE STRING \"Flags used for linking binaries during coverage builds.\"",71],["CACHE STRING \"Flags used by the C compiler during coverage builds.\"",70],["\"Flags used by the compiler during debug builds.\")",48],["CACHE STRING \"Flags passed to latex.\")",39],["CACHE STRING \"Flags passed to pdflatex.\")",39],["CACHE STRING \"Flags used by the compiler during all build types.\" FORCE)",39],["CACHE STRING \"Flags passed to bibtex.\")",38],["CACHE STRING \"Flags passed to makeindex.\")",38]],"useCount":2076},{"word":"For","context":[["# For SDL2main",174],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["# For the latest info, see http://www.ogre3d.org/",448],["# For MinGW library",246],["# For threads, as mentioned Apple doesn't need this.",239],["# For backward compatibility with CMake < 2.8.12",216],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["#     For older NDK you have to install it separately.",133]],"useCount":10716},{"word":"Force","context":[["# Force out-of-source build",40],["# Example: Force CMAKE_INSTALL_PREFIX to be preloaded with something before",44],["# Force re-linking when the exports file changes. Actually, it",18],["# Force static runtime libraries",22],["option(FORCE_EXTERNAL_BUILDS \"Force rebuilding of external project (if they are updated)\" OFF)",21],["## Force rebuilding of the main subproject every time building from super structure",20],["set (CMAKE_OSX_DEPLOYMENT_TARGET \"\" CACHE STRING \"Force unset of the deployment target for iOS\" FORCE)",60],["# Force the compilers to gcc for iOS",68],["# Force set compilers because standard identification works badly for us",138],["# Force unix paths in dependencies.",2233]],"useCount":2766},{"word":"Fortran","context":[["enable_language(Fortran)",32],["# Fortran module output directory.",622],["foreach (lang C CXX Fortran)",123],["# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran",75],["# Fortran.",54],["if (${lang} STREQUAL Fortran)",47],["# We could add Fortran here (as there is usually libfmpich, etc.), but",41],["# Note that we might still have found Fortran, but you'll need to use MPI_Fortran_FOUND",39],["enable_language(Fortran OPTIONAL)",37],["if (NOT _LANGUAGES_ MATCHES Fortran)",34]],"useCount":2534},{"word":"Found","context":[["message(STATUS \"Found MySQL library: ${MYSQL_LIBRARY}\")",43],["message(STATUS \"Found SFML ${SFML_VERSION_MAJOR}.${SFML_VERSION_MINOR}.${SFML_VERSION_PATCH} in ${SFML_INCLUDE_DIR}\")",45],["message(STATUS \"Found Python interpreter version ${PYTHON_VERSION}\")",44],["message(STATUS \"Found the following Boost libraries:\")",70],["message(STATUS \"Found ${PREFIX}: ${${PREFIX}_LIBRARIES}\")",68],["message(\"Found Boost components:\")",62],["pkg_message(OGRE \"Found Ogre ${OGRE_VERSION_NAME} (${OGRE_VERSION})\")",59],["message(STATUS \"Found CLANG compiler\")",55],["set(VERSION_MSG \"Found unsuitable version \\\"${VERSION}\\\", but required is exact version \\\"${${_NAME}_FIND_VERSION}\\\"\")",49],["MESSAGE(STATUS \"Found Iconv: ${ICONV_LIBRARIES}\")",48]],"useCount":2702},{"word":"Frameworks","context":[["${CMAKE_IOS_SDK_ROOT}/System/Library/Frameworks",87],["/Library/Frameworks",2541],["~/Library/Frameworks",2425],["\"/System/Library/Frameworks/GLUT.framework/Headers\"",109],["\"/System/Library/Frameworks/OpenGL.framework\"",106],["/Network/Library/Frameworks",97],["${CMAKE_IOS_SDK_ROOT}/Developer/Library/Frameworks",86],["/System/Library/Frameworks",79],["\"/Library/Frameworks/Cg.framework/Headers\"",58],["\"/System/Library/Frameworks/OIS.framework/Headers\"",58]],"useCount":6948},{"word":"GCC","context":[["#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)",72],["# GCC options used",76],["# add GCC visibility flags to shared library build",70],["set(_boost_COMPILER \"-mgw\") # no GCC version encoding prior to 1.34",64],["set(_boost_COMPILER \"-gcc\") # no GCC version encoding prior to 1.34",64],["#   ANDROID_COMPILER_VERSION : GCC version used",63],["# Until version 4.3.2, GCC doesn't define a macro to indicate",52],["message(STATUS \"GCC: All warnings enabled\")",51],["# the Mac OS X/Darwin version of GCC.",89],["# Determine which version of GCC we have.",94]],"useCount":2263},{"word":"GET","context":[["list(GET ANDROID_NDK_SEARCH_PATHS 0 ANDROID_NDK_SEARCH_PATH)",135],["list (GET _CMAKE_IOS_SDKS 0 CMAKE_IOS_SDK_ROOT)",80],["list(GET _argn ${_index} library)",589],["list(GET _argn ${_index} lib)",588],["list( GET __availableToolchainArchs ${__toolchainIdx} __toolchainArch )",136],["list( GET __availableToolchainMachines ${__toolchainIdx} ANDROID_TOOLCHAIN_MACHINE_NAME )",136],["list( GET __availableToolchainArchs ${__idx} __toolchainArch )",136],["list( GET __availableToolchainCompilerVersions ${__toolchainIdx} ANDROID_COMPILER_VERSION )",136],["list( GET __availableToolchainCompilerVersions ${__idx} __toolchainVersion )",136],["list( GET __availableToolchains ${__toolchainIdx} ANDROID_TOOLCHAIN_NAME )",136]],"useCount":5779},{"word":"GET_FILENAME_COMPONENT","context":[["GET_FILENAME_COMPONENT(MYSQL_CMAKE_SCRIPT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",140],["GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)",142],["GET_FILENAME_COMPONENT(_name ${_input} NAME)",175],["GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)",190],["GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)",117],["GET_FILENAME_COMPONENT(_IMPORT_PREFIX \"${_IMPORT_PREFIX}\" PATH)",106],["GET_FILENAME_COMPONENT(_path ${_input} PATH)",96],["GET_FILENAME_COMPONENT(_abs_FILE ${_current_FILE} ABSOLUTE)",89],["GET_FILENAME_COMPONENT(rc_path ${infile} PATH)",77],["GET_FILENAME_COMPONENT(outfilename ${it} NAME_WE)",74]],"useCount":4431},{"word":"GLOB","context":[["file( GLOB __gccExePath RELATIVE \"${_root}/bin/\" \"${_root}/bin/*-gcc${TOOL_OS_SUFFIX}\" )",111],["file (GLOB PLATFORM RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}",107],["file( GLOB __availableToolchainsLst RELATIVE \"${ANDROID_NDK_TOOLCHAINS_PATH}\" \"${ANDROID_NDK_TOOLCHAINS_PATH}/*\" )",103],["file(GLOB files ${fp})",89],["file (GLOB _CMAKE_IOS_SDKS \"${CMAKE_IOS_DEVELOPER_ROOT}/SDKs/*\")",80],["GLOB",72],["file(GLOB files inc/${fp})",70],["file (GLOB ENTRIES",55],["file(GLOB",55],["FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)",45]],"useCount":2568},{"word":"GLOBAL","context":[["set_property(GLOBAL PROPERTY USE_FOLDERS ON)",83],["set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)",40],["SET_PROPERTY(GLOBAL  APPEND  PROPERTY  PY_MODULES_LIST ${_NAME})",45],["SET_PROPERTY(GLOBAL  APPEND  PROPERTY  PY_STATIC_MODULES_LIST ${_NAME})",45],["set_property(GLOBAL APPEND PROPERTY VTK_TARGETS ${name})",46],["# USAGE: GLOBAL INSTALL",49],["set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS ${name})",50],["GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)",71],["set_property(GLOBAL APPEND PROPERTY",73],["get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )",111]],"useCount":2819},{"word":"GREATER","context":[["ENDIF (is_arg_name GREATER -1)",88],["if (_index GREATER -1)",172],["ELSE (is_arg_name GREATER -1)",88],["IF (is_arg_name GREATER -1)",90],["IF (is_option GREATER -1)",91],["IF(MSVC_VERSION GREATER 1310)",120],["else (${ARGC} GREATER 0)",139],["if(${ARGC} GREATER 2)",140],["endif (${ARGC} GREATER 0)",148],["if (${ARGC} GREATER 0)",151]],"useCount":6676},{"word":"Generated","context":[["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.5",122],["# Generated CMake target import file for configuration \"Debug\".",94],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.4",128],["# Generated CMake target import file for configuration \"Release\".",146],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2",152],["message(\"Generated ${generated_file} successfully.\")",198],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.3",212],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227],["# Generated CMake target import file.",233],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544]],"useCount":4795},{"word":"Generating","context":[["COMMENT \"Generating ${file}\"",52],["message(STATUS \"Generating ${INPUT_NAME}\")",97],["\"Generating dependency file: ${NVCC_generated_dependency_file}\"",197],["\"Generating ${generated_cubin_file}\"",198],["\"Generating ${generated_file}\"",199],["#message(\"Generating an empty dependency_file: ${dependency_file}\")",50],["\"Generating temporary cmake readable file: ${cmake_dependency_file}.tmp\"",199],["### Generating Messages",260],["### Generating Services",260],["### Generating Module File",260]],"useCount":2271},{"word":"Generator","context":[["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.5",122],["#   CPACK_CMAKE_GENERATOR               - CMake Generator used for the projects",92],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.4",128],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2",152],["# CMake - Cross Platform Makefile Generator",169],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.3",212],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["#   CPACK_GENERATOR                     - Generator used to create package",92],["# NSIS Generator:",92]],"useCount":4102},{"word":"Get","context":[["#---Get the list of header files-------------------------",100],["# Get the system search path as a list.",60],["#---Get Selection file------------------------------------",65],["# Get the list of definitions from the directory property",65],["# Get the include directories for this directory and use them for our nvcc command.",66],["#---Get LinkDef.h file------------------------------------",69],["# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes",73],["#---Get the list of include directories------------------",101],["# Get path, convert backslashes as ${ENV_${var}}",204],["# Get rid of the value marker leaving just the architecture name",60]],"useCount":2107},{"word":"HEADER","context":[["macro (find LIB_NAME HEADER)",23],["#  HEADER - the header(s) where the prototype should be declared",30],["/************************** HEADER FILES *************************/",34],["macro(ogre_find_component COMPONENT HEADER)",38],["# HEADER FILES",38],["foreach (HEADER ${HEADERS})",40],["find_path(OGRE_${PLUGIN}_INCLUDE_DIR NAMES ${HEADER}",61],["macro(ogre_find_plugin PLUGIN HEADER)",61],["# !!! DO NOT PLACE HEADER GUARDS HERE !!!",584],["# @HEADER",1274]],"useCount":2418},{"word":"HINTS","context":[["HINTS",7163],["HINTS ${_JAVA_HINTS}",123],["HINTS ${_MPI_BASE_DIR} ${_MPI_PREFIX_PATH}",103],["HINTS ${_boost_LIBRARY_SEARCH_DIRS_tmp}",88],["HINTS         ${_boost_INCLUDE_SEARCH_DIRS}",87],["HINTS         ${_MPI_BASE_DIR} ${_MPI_PREFIX_PATH}",87],["HINTS ENV HDF5_ROOT",86],["HINTS ${ICE_PATH}/lib ${ICE_PATH}/lib64",69],["HINTS ${OPENSSL_ROOT_DIR}/lib)",68],["HINTS ${OPENSSL_ROOT_DIR}/include",68]],"useCount":11947},{"word":"HTML","context":[["# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.",70],["# each generated HTML page. If it is left blank doxygen will generate a",126],["# configuration options related to the HTML output",109],["#                       HTML report is generated in _outputname/index.html",94],["# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML",79],["# The HTML_FOOTER tag can be used to specify a personal HTML footer for",63],["# The HTML_HEADER tag can be used to specify a personal HTML header for",63],["# contain links (just like the HTML output) instead of page references.",63],["# of the generated HTML documentation.",63],["# generate HTML output.",63]],"useCount":4328},{"word":"I","context":[["# I think it has something to do with the CACHE STRING.",237],["# In fact, there seems to be a problem if I used the Threads package",238],["# So I use a temporary variable until the end so I can set the",237],["# But for non-OSX systems, I will use the CMake Threads package.",239],["# though it actually is there if I modify a pre-used variable.",237],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# Now I need to append each element to NUBOT_SRCS",122],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["# So I use a temporary variable until the end so I can set the",237]],"useCount":7131},{"word":"IF","context":[["IF(APPLE)",1326],["IF(CMAKE_INSTALL_DO_STRIP)",2211],["IF(WIN32)",2568],["IF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["IF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["IF(COMPONENT)",5696],["IF(BUILD_TYPE)",5696],["IF(NOT CMAKE_INSTALL_COMPONENT)",5696],["IF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5705],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352]],"useCount":117734},{"word":"IMPORTED_CONFIGURATIONS","context":[["set_property(TARGET Qt5::${Plugin} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${Configuration})",214],["IMPORTED_CONFIGURATIONS DEBUG)",83],["set_property(TARGET opencv_videostab APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_stitching APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_calib3d APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_core APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_imgproc APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_photo APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["set_property(TARGET opencv_highgui APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)",59],["IMPORTED_CONFIGURATIONS RELEASE)",86]],"useCount":2321},{"word":"IN","context":[["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",128],["# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE",636],["foreach(arg IN LISTS args)",55],["# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE",58],["# ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE",68],["foreach(arg IN LISTS ARGN)",79],["foreach(dep IN LISTS ${vtk-module}_LINK_DEPENDS)",57],["# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE",103],["# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR",91],["foreach(arg IN LISTS command)",86]],"useCount":3538},{"word":"INCLUDE","context":[["INCLUDE (CheckTypeSize)",170],["INCLUDE(CheckCXXSourceCompiles)",173],["INCLUDE(CheckFunctionExists)",190],["##   INCLUDE(CTest)",200],["INCLUDE(CPack)",213],["\"/home/einstein/openairinterface5g/openair3/RAL-LTE/LTE_RAL_ENB/INCLUDE\"",240],["\"/home/einstein/openairinterface5g/openair3/RAL-LTE/LTE_RAL_UE/INCLUDE\"",240],["\"/home/einstein/openairinterface5g/openair3/RAL-LTE/INTERFACE-802.21/INCLUDE\"",240],["INCLUDE(FindPkgConfig)",373],["INCLUDE(FindPackageHandleStandardArgs)",2995]],"useCount":12682},{"word":"INSTALL","context":[["INSTALL(FILES",116],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["INSTALL(",339],["file(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/OGRE/Samples\" TYPE SHARED_LIBRARY FILES",172],["FILE(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib\" TYPE SHARED_LIBRARY FILES",172],["if(step STREQUAL \"INSTALL\")",93],["INSTALL(FILES ${STL_LIBRARY_NAME} ${real_library}",50],["MESSAGE(STATUS \"INSTALL ${STL_LIBRARY_NAME} ${real_library}\")",50],["# USAGE: GLOBAL INSTALL",49]],"useCount":5583},{"word":"INSTALL_DIR","context":[["INSTALL_DIR ${CMAKE_BINARY_DIR}",351],["CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix <INSTALL_DIR>",55],["CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>",62],["--prefix=<INSTALL_DIR>",118],["-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>",196],["foreach(dir SOURCE_DIR BINARY_DIR INSTALL_DIR TMP_DIR)",28],["INSTALL_DIR \"${prefix}\"",28],["INSTALL_DIR ${${proj}_DIR}",33],["INSTALL_DIR",35],["CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>",47]],"useCount":2041},{"word":"INTERNAL","context":[["set( __toolchain_config \"${__toolchain_config}set( ${__var} ${${__var}} CACHE INTERNAL \\\"\\\" )\\n\" )",129],["set( ANDROID_CXX_FLAGS_RELEASE \"${ANDROID_CXX_FLAGS_RELEASE}\" CACHE INTERNAL \"Android specific c/c++ Release flags\" )",109],["set( ANDROID_CXX_FLAGS_DEBUG   \"${ANDROID_CXX_FLAGS_DEBUG}\"   CACHE INTERNAL \"Android specific c/c++ Debug flags\" )",109],["set( ANDROID_CXX_FLAGS         \"${ANDROID_CXX_FLAGS}\"         CACHE INTERNAL \"Android specific c/c++ flags\" )",109],["set( ANDROID_NDK \"${ANDROID_NDK}\" CACHE INTERNAL \"Path of the Android NDK\" FORCE )",111],["CACHE INTERNAL \"\"",123],["set( __toolchain_config \"${__toolchain_config}set( ${__var} \\\"${${__var}}\\\" CACHE INTERNAL \\\"\\\" )\\n\" )",129],["SET(SDL2_LIBRARY_TEMP \"${SDL2_LIBRARY_TEMP}\" CACHE INTERNAL \"\")",146],["# [PRIVATE/INTERNAL]",720],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267]],"useCount":21968},{"word":"IS_ABSOLUTE","context":[["if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})",606],["elseif(IS_ABSOLUTE ${library})",605],["if (NOT IS_ABSOLUTE \"${_relPath}\" AND NOT \"${_relPath}\" MATCHES \"^\\\\.\\\\.\")",38],["if(NOT IS_ABSOLUTE ${extra})",605],["if(IS_ABSOLUTE \"${file_path}\")",88],["if( IS_ABSOLUTE ${f})",80],["if (IS_ABSOLUTE \"${_path}\")",76],["if(IS_ABSOLUTE ${ARG_SELECTION})",65],["if(NOT IS_ABSOLUTE \"${original_file}\")",44],["if (IS_ABSOLUTE \"${bpath}\")",47]],"useCount":3447},{"word":"ITK","context":[["ITK-TestKernel",95],["ITK-ImageGrid",34],["# ITK",35],["ITK-IO-Base",38],["find_package(ITK REQUIRED)",28],["# Local data store populated by the ITK pre-commit hook",28],["ITK-ImageIntensity",41],["ITK-Common",31],["ITK-ImageFilterBase",29],["#    as part of the Insight Segmentation and Registration Toolkit (ITK).",42]],"useCount":2085},{"word":"If","context":[["# each generated HTML page. If it is left blank doxygen will generate a",126],["# and *.h) to filter out the source-files in the directories. If left",127],["# If you want to use a more convenient module that includes everything,",161],["# If the value of the INPUT tag contains directories, you can use the",170],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321],["# If we weren't given a build_configuration, use Debug.",198],["# If there are quotes, excape them, so they come through.",198],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["# If you have questions regarding the use of this file, please contact",186],["#                               configuration used when compiling the code.  If",198]],"useCount":29988},{"word":"Ii","context":[["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716]],"useCount":5490},{"word":"In","context":[["# In windows, automatic linking is performed, so you do not have",89],["# In Boost 1.36.0 and newer, the mangled compiler name used",89],["# In Boost <= 1.35.0, there is no mangled compiler name for",89],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["# the dependency file needed by CMake to compute dependencies.  In addition the",198],["# In fact, there seems to be a problem if I used the Threads package",238],["# In applying this licence, ECMWF does not waive the privileges and immunities",213],["#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.",80],["# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:",74],["#    In your CMakeLists.txt, add these lines:",73]],"useCount":2933},{"word":"Include","context":[["# Include dir",373],["# Include the install script for each subdirectory.",1672],["# Include the dependency file.  Create it first if it doesn't exist .  The",66],["FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC \"Include for OpenCL CPP bindings on OSX\")",67],["FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC \"Include for OpenCL on OSX\")",68],["\"../gtsam/3rdparty/CCOLAMD/Include\"",186],["# Include dependent projects if any",227],["\"Include debugging info:\")",81],["# Include directories",87],["option(WITH_COREDEBUG   \"Include additional debug-code in core\"                       0)",105]],"useCount":4665},{"word":"Install","context":[["message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",2385],["# Install the manifest that allows DLLs to be loaded from the",118],["message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",2385],["MESSAGE(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",5696],["MESSAGE(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",5696],["# Install",113],["message(\"* Install configs to     : ${CONF_DIR}\")",122],["message(\"* Install libraries to   : ${LIBSDIR}\")",122],["#--Install step---------------",84],["message(\"* Install core to        : ${CMAKE_INSTALL_PREFIX}\")",118]],"useCount":18113},{"word":"Intel","context":[["# Windows Intel options used",102],["if (NOT CMAKE_${_language}_COMPILER_ID MATCHES \"MSVC|Intel\")",68],["elseif (_compilerID MATCHES \"Intel\")",102],["# Cannot run endian test on universal PPC/Intel binaries",77],["# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68],["# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68],["if (CMAKE_${_language}_COMPILER_ID MATCHES \"MSVC|Intel\")",68],["elseif (CMAKE_${_language}_COMPILER_ID MATCHES \"Intel\")",68],["if (WIN32 AND CMAKE_${_language}_COMPILER_ID MATCHES \"MSVC|Intel\")",136],["# Linux / Mac OS X Intel options used",102]],"useCount":2965},{"word":"It","context":[["# It defines the following variables",111],["# It defines the following variables:",93],["# It has been altered for iOS development",84],["# It is called differently under OS400 and older AIX",77],["# and libraries are. It also determines what the name of the library is. This",74],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["# It sets the following variables:",134],["# include files and libraries are. It also determines what the name of",112],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# This is the list of host compilation flags.  It C or CXX should already have",198]],"useCount":3779},{"word":"L","context":[["STRING(REGEX REPLACE \"[-][L]\" \"\" GSL_LINK_DIRECTORIES ${GSL_LINK_DIRECTORIES_WITH_PREFIX} )",54],["#    and -L).",60],["string(REGEX REPLACE \"[ ]*-L([^ ]*)\" \"\\\\1\" LIB \"${LIB}\")",55],["## remove prefix -L because we need the pure directory for LINK_DIRECTORIES",66],["#      Note: building for \"android-L\" requires explicit configuration.",70],["## use regular expression to match wildcard equivalent \"-L*<endchar>\"",70],["# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)",73],["# #%L",93],["# #L%",94],["STRING(REGEX MATCHALL \"[-][L]([^ ;])+\"",101]],"useCount":2284},{"word":"LATEX_TARGET","context":[["${PS2PDF_CONVERTER} ${PS2PDF_CONVERTER_FLAGS} ${LATEX_TARGET}.ps ${LATEX_TARGET}.pdf",58],["${PS2PDF_CONVERTER} ${PS2PDF_CONVERTER_FLAGS} ${LATEX_TARGET}.ps ${LATEX_TARGET}.pdf",58],["${MAKEINDEX_COMPILER} ${MAKEINDEX_COMPILER_FLAGS} ${LATEX_TARGET}.idx)",58],["ENDIF (NOT LATEX_TARGET)",61],["MESSAGE(SEND_ERROR \"Need to define LATEX_TARGET\")",64],["IF (NOT LATEX_TARGET)",64],["${BIBTEX_COMPILER} ${BIBTEX_COMPILER_FLAGS} ${LATEX_TARGET})",66],["-D LATEX_TARGET=${LATEX_TARGET}",176],["-D LATEX_TARGET=${LATEX_TARGET}",176],["DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)",88]],"useCount":2175},{"word":"LENGTH","context":[["list(LENGTH depend_list count)",609],["string (LENGTH \"${CMAKE_MATCH_1}\" ${_headerDepthVar})",76],["list(LENGTH Boost_FIND_COMPONENTS Boost_NUM_COMPONENTS_WANTED)",89],["list(LENGTH _Boost_MISSING_COMPONENTS Boost_NUM_MISSING_COMPONENTS)",89],["string( LENGTH \"${ANDROID_NDK_TOOLCHAINS_PATH}\" __length )",104],["string( LENGTH \"${ANDROID_STANDALONE_TOOLCHAIN}\" __length )",135],["list( LENGTH __gccExePath __gccExePathsCount )",136],["list( LENGTH __availableToolchains __availableToolchainsCount )",136],["list (LENGTH _sourceFiles _numberOfSources)",150],["list(LENGTH _argn _count)",589]],"useCount":4983},{"word":"LESS","context":[["while(${_index} LESS ${_count})",592],["if( ccbin_found0 LESS 0 AND ccbin_found1 LESS 0 )",144],["if( ccbin_found0 LESS 0 AND ccbin_found1 LESS 0 )",144],["if( ccbin_found0 LESS 0 AND ccbin_found1 LESS 0 AND CUDA_HOST_COMPILER )",68],["if( ccbin_found0 LESS 0 AND ccbin_found1 LESS 0 AND CUDA_HOST_COMPILER )",68],["if(Boost_VERSION LESS 103500)",65],["if( NOT ANDROID_NDK_RELEASE_NUM LESS 8004 ) # before r8d",69],["if(SFML_VERSION LESS SFML_REQUESTED_VERSION)",102],["if( ANDROID_NDK_RELEASE_NUM LESS 7000 ) # before r7",207],["if(\"${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}\" LESS 2.5)",198]],"useCount":4102},{"word":"LIB","context":[["\"/home/einstein/openairinterface5g/targets/ARCH/EXMIMO/USERSPACE/LIB\"",240],["\"/home/einstein/openairinterface5g/targets/ARCH/USRP/USERSPACE/LIB\"",119],["ENDFOREACH(LIB)",103],["ENV LIB",99],["WX_CLEAR_LIB(WX_${LIB}${_DBG})",75],["LIST(APPEND OSLIBS ${LIB})",70],["$ENV{LIB}",69],["endforeach(LIB ${MYSQL_LIBS})",57],["string(REGEX REPLACE \"[ ]*-L([^ ]*)\" \"\\\\1\" LIB \"${LIB}\")",55],["string(REGEX REPLACE \"[ ]*-L([^ ]*)\" \"\\\\1\" LIB \"${LIB}\")",55]],"useCount":4823},{"word":"LIBRARIES","context":[["#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")",71],["set(LIBRARIES",355],["#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")",71],["# the link test, LIBRARIES is set to the list of complete library paths that",103],["set(${LIBRARIES} FALSE)",64],["LIBRARIES",76],["set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})",82],["# have been found.  Otherwise, LIBRARIES is set to FALSE.",82],["set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})",82],["set(${LIBRARIES})",64]],"useCount":2082},{"word":"LIST","context":[["LIST(REVERSE CMAKE_FIND_LIBRARY_SUFFIXES)",80],["LIST(APPEND YOUR_CMAKE_FILES \"${THIS_SRC_DIR}/${loop_var}/cmake/sources.cmake\")",116],["LIST(APPEND WebCore_INCLUDE_DIRECTORIES",89],["LIST(APPEND WebCore_SOURCES",263],["LIST(APPEND NUBOT_SRCS \"${THIS_SRC_DIR}/${loop_var}\" )",122],["LIST(FIND larg_names \"${arg}\" is_arg_name)",90],["LIST(FIND loption_names \"${arg}\" is_option)",91],["LIST(REMOVE_DUPLICATES CMAKE_REQUIRED_LIBRARIES)",92],["LIST(APPEND OSLIBS ${LIB})",70],["LIST(APPEND CINT_CXX_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/dict/libstrm.cxx)",72]],"useCount":4135},{"word":"LLVM","context":[["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/LLVM\")",285],["#   LLVM components this library depends on.",60],["/* LLVM name for the native AsmParser init function, if available */",35],["/* Time at which LLVM was configured */",40],["/* LLVM name for the native TargetInfo init function, if available */",39],["#   Don't embed LLVM bitcode in this target, even if it is enabled globally.",60],["/* LLVM name for the native Target init function, if available */",39],["/* LLVM name for the native AsmPrinter init function, if available */",39],["/* LLVM architecture name for the native architecture, if available */",39],["# Check to see if we are using LLVM's libc++ rather than e.g. libstd++",38]],"useCount":2583},{"word":"LaTeX","context":[["# command to the generated LaTeX files. This will instruct LaTeX to keep",63],["# generate index for LaTeX. If left blank `makeindex' will be used as the",62],["# packages that should be included in the LaTeX output.",63],["# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX",63],["# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.",63],["# The LATEX_HEADER tag can be used to specify a personal LaTeX header for",63],["# command to the generated LaTeX files. This will instruct LaTeX to keep",63],["# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated",63],["# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be",83],["# configuration options related to the LaTeX output",106]],"useCount":2147},{"word":"Library","context":[["#  Library:   CTK",87],["# Library is already found or was predefined",92],["/Network/Library/Frameworks",97],["\"/System/Library/Frameworks/OpenGL.framework\"",106],["\"/System/Library/Frameworks/GLUT.framework/Headers\"",109],["# Library:   TubeTK",122],["SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING \"Where the SDL2 Library can be found\")",146],["~/Library/Frameworks",2425],["/Library/Frameworks",2541],["${CMAKE_IOS_SDK_ROOT}/System/Library/PrivateFrameworks",87]],"useCount":8869},{"word":"Linux","context":[["SET(CPACK_SYSTEM_NAME \"Linux\")",207],["set( CMAKE_SYSTEM_NAME Linux )",160],["\"/usr/share/cmake-2.8/Modules/Platform/Linux-CXX.cmake\"",158],["SET(CMAKE_SYSTEM_NAME \"Linux\")",254],["SET(CMAKE_HOST_SYSTEM_NAME \"Linux\")",238],["SET(CMAKE_SYSTEM_NAME Linux)",163],["set(CMAKE_SYSTEM_NAME Linux)",283],["set(CMAKE_HOST_SYSTEM_NAME \"Linux\")",314],["set(CMAKE_SYSTEM_NAME \"Linux\")",324],["\"/usr/share/cmake-2.8/Modules/Platform/Linux.cmake\"",740]],"useCount":9177},{"word":"Ll","context":[["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",76],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66]],"useCount":4470},{"word":"Look","context":[["# Look for the library",75],["# Look in places relative to the system executable search path.",63],["# Look for some of the toolkit helper libraries",63],["# Look for the header file.",367],["# Look for the library.",301],["# Look in other places.",115],["# Look for the boost library path.",103],["# Look for a standard boost header file.",95],["# Look in standard UNIX install locations.",64],["# Look for an installation.",64]],"useCount":2156},{"word":"MACRO","context":[["MACRO (QT4_EXTRACT_OPTIONS _qt4_files _qt4_options)",62],["MACRO(PARSE_ARGUMENTS prefix arg_names option_names)",73],["MACRO (QT4_ADD_RESOURCES outfiles )",69],["MACRO (QT4_WRAP_CPP outfiles )",69],["MACRO (QT4_MAKE_OUTPUT_FILE infile prefix ext outfile )",54],["MACRO(GET_MYSQL_VERSION)",53],["MACRO(dios_config_find_module MODULE)",52],["MACRO(dios_config_module_init MODULE)",52],["MACRO(_PCH_GET_COMPILE_FLAGS _out_compile_flags)",53],["MACRO(dios_config_module_pre_build)",52]],"useCount":4575},{"word":"MARK_AS_ADVANCED","context":[["MARK_AS_ADVANCED(WITH_ATOMIC_LOCKS MY_ATOMIC_MODE_RWLOCK MY_ATOMIC_MODE_DUMMY)",62],["MARK_AS_ADVANCED(OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES)",61],["MARK_AS_ADVANCED(CMAKE_MAKE_PROGRAM)",52],["MARK_AS_ADVANCED (",49],["MARK_AS_ADVANCED(VERSION MYSQL_VERSION_ID MYSQL_BASE_VERSION)",44],["MARK_AS_ADVANCED( GLEW_FOUND )",43],["MARK_AS_ADVANCED(OPENSSL_CRYPTO_LIBRARIES OPENSSL_SSL_LIBRARIES)",43],["MARK_AS_ADVANCED(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY",100],["MARK_AS_ADVANCED(",2166],["MARK_AS_ADVANCED(SSL_EAY LIB_EAY)",96]],"useCount":4500},{"word":"MATCH","context":[["string( REGEX MATCH \"[0-9]+[.][0-9]+\" ANDROID_CLANG_VERSION \"${ANDROID_CLANG_VERSION}\")",111],["string( REGEX MATCH \"3[.][0-9]$\" ANDROID_CLANG_VERSION \"${ANDROID_TOOLCHAIN_NAME}\")",110],["string( REGEX MATCH \"[0-9]+[.][0-9]+([.][0-9x]+)?$\" __version \"${__gcc_toolchain}\" )",103],["string(REGEX MATCH",99],["string( REGEX MATCH \"r([0-9]+)([a-z]?)\" ANDROID_NDK_RELEASE \"${ANDROID_NDK_RELEASE_FULL}\" )",69],["STRING(REGEX MATCH \"^/|([A-Za-z]:/)\" _ABS_PATH_INDICATOR \"${_RC_FILE}\")",65],["string( REGEX MATCH r[0-9]+[a-z]? ANDROID_NDK_RELEASE \"${ANDROID_NDK_RELEASE_FULL}\" )",36],["STRING(REGEX MATCH \"[^ <\\\"]+\\\\.moc\" _current_MOC \"${_current_MOC_INC}\")",50],["string(REGEX MATCH \"cmake_ARCH ([a-zA-Z0-9_]+)\" ARCH \"${ARCH}\")",57],["string( REGEX MATCH \"[0-9]+\" ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" )",64]],"useCount":2518},{"word":"MATCHES","context":[["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",836],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["if(\"${library}\" MATCHES \"^(debug|optimized|general)$\")",414],["if(\"${lib}\" MATCHES \"^(debug|optimized|general)$\")",415],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Dd][Ee][Bb][Uu][Gg])$\")",661],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716]],"useCount":37779},{"word":"MESSAGE","context":[["MESSAGE(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",5696],["MESSAGE(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",5696],["MESSAGE(FATAL_ERROR",630],["MESSAGE(\"\")",315],["MESSAGE(SEND_ERROR",113],["MESSAGE(STATUS",205],["MESSAGE(FATAL_ERROR \"",174],["MESSAGE(",154],["MESSAGE(STATUS \"\")",144],["MESSAGE(STATUS ${CMAKE_CURRENT_LIST_FILE})",118]],"useCount":23576},{"word":"MINGW","context":[["SET(MINGW 1)",202],["ELSEIF(MINGW)",107],["elseif(MINGW)",108],["elseif (MINGW)",124],["endif(MINGW)",143],["if (MINGW)",237],["if(MINGW)",523],["IF(MINGW)",541],["ENDIF(MINGW)",542],["set(MINGW 1)",746]],"useCount":5022},{"word":"MODULE","context":[["list(FIND _cuda_wrap_cmake_options MODULE _cuda_found_MODULE)",61],["MODULE",87],["# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then",60],["FOREACH(type EXE SHARED MODULE)",60],["# dios_module_link_library(${MODULE} lua false)",64],["# SHARED, MODULE",61],["if(MODULE)",60],["list(FIND cmake_args MODULE _cuda_found_MODULE)",60],["SET(DIOS_MODULE_${MODULE}_IPHONEOS_DEPLOYMENT_TARGET 5.0)",53],["# dios_module_link_library(${MODULE} tolua false)",66]],"useCount":4930},{"word":"MPI","context":[["set(MPI_EXTRA_LIBRARY \"MPI_EXTRA_LIBRARY-NOTFOUND\" CACHE STRING \"Extra MPI libraries to link against\" FORCE)",52],["set(MPI_LIBRARY ${MPI_LIBRARY_WORK} CACHE FILEPATH \"MPI library to link against\" FORCE)",52],["SET(COMM_TYPE MPI)",96],["# to link against in an MPI program",55],["# Decide between 32-bit and 64-bit libraries for Microsoft's MPI",54],["# The Message Passing Interface (MPI) is a library used to write",54],["MPI",53],["set(MPI_EXTRA_LIBRARY ${MPI_EXTRA_LIBRARY_WORK} CACHE STRING \"Extra MPI libraries to link against\" FORCE)",52],["set(MPI_LIBRARY \"MPI_LIBRARY-NOTFOUND\" CACHE FILEPATH \"MPI library to link against\" FORCE)",51],["DOC \"Executable for running MPI programs.\")",47]],"useCount":3935},{"word":"MPI_","context":[["if (MPI_${lang}_COMPILER)",82],["COMMAND ${MPI_${lang}_COMPILER} -showme:libdirs",41],["#   MPI_<lang>_COMPILE_FLAGS   MPI_<lang>_LIBRARIES",41],["#   MPI_<lang>_COMPILE_FLAGS   MPI_<lang>_LIBRARIES",41],["find_program(MPI_${lang}_COMPILER",41],["COMMAND ${MPI_${lang}_COMPILER} -showme:link",41],["set(MPI_${lang}_FOUND FALSE PARENT_SCOPE)",41],["if (MPI_${lang}_INCLUDE_PATH AND MPI_${lang}_LIBRARIES)",41],["set(MPI_${lang}_COMPILER \"MPI_${lang}_COMPILER-NOTFOUND\" CACHE FILEPATH \"Cleared\" FORCE)",41],["set(MPI_LIBRARIES_WORK \"MPI_${lang}_LIBRARIES-NOTFOUND\")",82]],"useCount":2947},{"word":"MSVC","context":[["elseif(MSVC)",236],["if(MSVC)",2158],["if (MSVC)",1272],["IF(MSVC)",945],["endif(MSVC)",407],["if (NOT MSVC)",217],["if(NOT MSVC)",221],["IF (MSVC)",233],["ENDIF(MSVC)",532],["endif (MSVC)",281]],"useCount":13186},{"word":"MY_CHECK_TYPE_SIZE","context":[["MY_CHECK_TYPE_SIZE(int INT)",81],["MY_CHECK_TYPE_SIZE(off_t OFF_T)",81],["MY_CHECK_TYPE_SIZE(long LONG)",81],["MY_CHECK_TYPE_SIZE(\"long long\" LONG_LONG)",81],["MY_CHECK_TYPE_SIZE(short SHORT)",81],["MY_CHECK_TYPE_SIZE(u_int32_t U_INT32_T)",91],["MY_CHECK_TYPE_SIZE(uint UINT)",92],["MY_CHECK_TYPE_SIZE(ulong ULONG)",92],["FUNCTION(MY_CHECK_TYPE_SIZE type defbase)",92],["MY_CHECK_TYPE_SIZE(fp_except FP_EXCEPT)",92]],"useCount":2293},{"word":"Mac","context":[["#  10.x == Mac OSX 10.6 (Snow Leopard)",68],["#   9.x == Mac OSX 10.5 (Leopard)",64],["# GvdB: Mac OS X distribution places libraries directly in lib directory.",71],["# and Mac users are advised to set this option to NO.",80],["# on Mac OS X/Darwin is \"xgcc\".",89],["# the Mac OS X/Darwin version of GCC.",89],["# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless",94],["# Linux / Mac OS X Intel options used",102],["# For Windows and Mac, don't need to explicitly include the math library",131],["#   8.x == Mac OSX 10.4 (Tiger)",64]],"useCount":2215},{"word":"Make","context":[["# Make sure this file is included only once",90],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# Make sure the targets which have been exported in some other",198],["# Make variables changeble to the advanced user",194],["# Make sure this file is included only once by creating globally unique varibles",139],["# Make sure that the ExtProjName/IntProjName variables are unique globally",137],["#    Make sure to do the following in your scripts:",135],["# No incoming dependencies, so we need to generate them.  Make the",71],["# Make sure the build system knows the file is generated.",66],["# Set all of our file names.  Make sure that whatever filenames that have",65]],"useCount":2711},{"word":"Makefile","context":[["# plain latex in the generated Makefile. Set this option to YES to get a",63],["\"Makefile\"",1379],["# The top level Makefile was generated from the following files:",1373],["# CMake - Cross Platform Makefile Generator",169],["# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we",64],["# Makefile don't overwrite each other's variables.",62],["# the necessary Makefile rules, Perl scripts and LaTeX code to be able",62],["# To create a documentation set, doxygen will generate a Makefile in the",54],["# Makefile that is written to the output directory.",42],["#  LINK_DEPENDS - list of additional files on which a target binary depends for linking (Makefile-based generator only)",39]],"useCount":3962},{"word":"Makefiles","context":[["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.5",122],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.4",128],["#   $ cmake.exe -G\"MinGW Makefiles\"",135],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2",152],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.3",212],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227],["SET(CPACK_CMAKE_GENERATOR \"Unix Makefiles\")",293],["set(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")",405],["SET(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")",940]],"useCount":6262},{"word":"MinGW","context":[["#   $ cmake.exe -G\"MinGW Makefiles\"",135],["# Added needed compile switches for MinGW.",247],["# For MinGW library",246],["# MinGW needs an additional library, mwindows",230],["SET(MINGW32_LIBRARY mingw32 CACHE STRING \"mwindows for MinGW\")",199],["# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW",95],["set( CMAKE_COMPILER_IS_MINGW TRUE ) # tell CMake that we are MinGW",95],["\"lib/MinGW\"",70],["${OPENSSL_ROOT_DIR}/lib/MinGW",66],["# MinGW builds does not seem to handle spaces in the path to the",52]],"useCount":2145},{"word":"Modules","context":[["\"/usr/share/cmake-2.8/Modules/CMakeGenericSystem.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/CMakeParseArguments.cmake\"",475],["\"/usr/share/cmake-2.8/Modules/FindPackageHandleStandardArgs.cmake\"",479],["\"/usr/share/cmake-2.8/Modules/FindPackageMessage.cmake\"",485],["\"/usr/share/cmake-2.8/Modules/CMakeCXXInformation.cmake\"",712],["\"/usr/share/cmake-2.8/Modules/CMakeCInformation.cmake\"",736],["\"/usr/share/cmake-2.8/Modules/Platform/Linux.cmake\"",740],["\"/usr/share/cmake-2.8/Modules/CMakeCommonLanguageInclude.cmake\"",741],["\"/usr/share/cmake-2.8/Modules/Platform/UnixPaths.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/CMakeSystemSpecificInformation.cmake\"",742]],"useCount":26929},{"word":"MySQL","context":[["message(\"* Use MySQL sourcetree   : No\")",88],["message(\"* Use MySQL sourcetree   : Yes (default)\")",88],["#define PACKAGE_NAME \"MySQL Server\"",87],["#define PACKAGE_STRING \"MySQL Server @VERSION@\"",87],["MySQL features",76],["$ENV{ProgramFiles}/MySQL/*/include",58],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/MySQL\")",56],["# Find the native MySQL includes and library",51],["# Find the MySQL client includes and library",50],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files/MySQL\")",98]],"useCount":3746},{"word":"NAME","context":[["get_filename_component(_fileName \"${_file}\" NAME)",68],["GET_FILENAME_COMPONENT(_name ${_input} NAME)",175],["get_filename_component(_pchName \"${_pchFile}\" NAME)",68],["NAME",71],["NAME)",75],["get_filename_component(_moduleName \"${COTIRE_CMAKE_MODULE_FILE}\" NAME)",76],["#           NAME test",80],["get_filename_component(src_name \"${source_dir}\" NAME)",105],["get_filename_component( __libstlname \"${__libstl}\" NAME )",111],["find_program(_python_path NAME \"python\" PATHS ENV PATH)",132]],"useCount":5063},{"word":"NAMES","context":[["find_program( CMAKE_INSTALL_NAME_TOOL NAMES install_name_tool )",136],["NAMES ${FIND_SFML_COMPONENT_NAME}-d",157],["NAMES ${FIND_SFML_COMPONENT_NAME}",157],["NAMES OpenCL",166],["NAMES SDL2",202],["NAMES SDL2main",240],["NAMES ${_library}",248],["NAMES         boost/config.hpp",99],["NAMES",6503],["NAMES nvcc nvcc.exe",130]],"useCount":21385},{"word":"NAME_WE","context":[["GET_FILENAME_COMPONENT(TMP_FILENAME ${FILE} NAME_WE)",48],["GET_FILENAME_COMPONENT( _source_base_name ${_asciidocsource} NAME_WE )",41],["GET_FILENAME_COMPONENT(_outfile ${_outfile} NAME_WE)",55],["GET_FILENAME_COMPONENT(_basename ${_current_FILE} NAME_WE)",61],["GET_FILENAME_COMPONENT(outfilename ${it} NAME_WE)",74],["get_filename_component( __gccExeName \"${__gccExePath}\" NAME_WE )",136],["get_filename_component(FIL_WE ${FIL} NAME_WE)",140],["get_filename_component(_basename ${_tmp_FILE} NAME_WE)",40],["GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)",142],["get_filename_component(CMAKE_CURRENT_LIST_FILENAME ${CMAKE_CURRENT_LIST_FILE} NAME_WE)",216]],"useCount":2401},{"word":"NAS","context":[["\"/home/einstein/openairinterface5g/openair-cn/NAS/UE/EMM/SAP\"",129],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair2/NAS\"",240],["\"/home/einstein/openairinterface5g/openair-cn/NAS/UE/ESM\"",131],["\"/home/einstein/openairinterface5g/openair-cn/NAS/UE/EMM\"",131]],"useCount":3138},{"word":"NDK","context":[["or put the toolchain or NDK in the default path:",137],["#                          Implies -fno-rtti -fno-exceptions for NDK before r7.",218],["#                          Implies -frtti -fno-exceptions for NDK r7 and newer.",218],["#                          Available for NDK r7 and newer.",218],["# NDK flags",145],["#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK",135],["#      used by ndk-build tool from Android NDK.",135],["#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)",135],["#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)",135],["#    android-cmake toolchain searches for NDK/toolchain in the following order:",135]],"useCount":7574},{"word":"NEVER","context":[["set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)",67],["set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )",333],["set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )",304],["set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )",303],["SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",259],["set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",102],["# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.",98],["set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)",67],["CMAKE_FIND_FRAMEWORK NEVER",60],["set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)",691]],"useCount":2442},{"word":"NO","context":[["EXAMPLE_RECURSIVE      = NO",123],["FILTER_SOURCE_FILES    = NO",123],["EXCLUDE_SYMLINKS       = NO",124],["GENERATE_AUTOGEN_DEF   = NO",127],["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",128],["#     Mandatory : NO",264],["#  * Mandatory : NO",452],["# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE",636],["# The default value is: NO.",1874],["COMPACT_RTF            = NO",123]],"useCount":18948},{"word":"NOT","context":[["IF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["ENDIF(NOT CMAKE_INSTALL_COMPONENT)",5696],["IF(NOT CMAKE_INSTALL_COMPONENT)",5696],["ENDIF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5703],["ENDIF(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",5672],["IF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["ENDIF(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)",4367],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["IF(NOT DEFINED CMAKE_INSTALL_PREFIX)",5705]],"useCount":203806},{"word":"NOTFOUND","context":[["set(${_var} \"HEAD-HASH-NOTFOUND\" PARENT_SCOPE)",70],["set(${_var} \"GIT-NOTFOUND\" PARENT_SCOPE)",79],["set(${_refspecvar} \"GITDIR-NOTFOUND\" PARENT_SCOPE)",81],["set(MPI_LIBRARIES_WORK \"MPI_${lang}_LIBRARIES-NOTFOUND\")",82],["set(${_hashvar} \"GITDIR-NOTFOUND\" PARENT_SCOPE)",84],["set(ri \"ri-NOTFOUND\")",118],["set(MPI_LIB \"MPI_LIB-NOTFOUND\" CACHE FILEPATH \"Cleared\" FORCE)",141],["set(lib \"${library}-NOTFOUND\")",605],["set(CTEST_CVS_COMMAND                   \"CVSCOMMAND-NOTFOUND\")",72],["set(out \"${out}-${res}-NOTFOUND\")",91]],"useCount":4726},{"word":"NO_DEFAULT_PATH","context":[["NO_DEFAULT_PATH",4512],["PATHS ${QT_${_upper_qt_plugin_type}_PLUGINS_DIR} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH",56],["# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH",70],["#   NO_DEFAULT_PATH",114],["NO_DEFAULT_PATH )",125],["PATHS \"${CMAKE_CURRENT_LIST_DIR}/..\" NO_DEFAULT_PATH",215],["NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH",275],["NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",625],["NO_DEFAULT_PATH)",1209],["set(_boost_LIBRARY_SEARCH_DIRS ${Boost_LIBRARY_DIR} NO_DEFAULT_PATH)",34]],"useCount":7783},{"word":"Nn","context":[["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",76],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee]|[Nn][Oo][Nn][Ee]|)$\")",59],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",60],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348]],"useCount":3068},{"word":"No","context":[["\"FIRMWARE_VERSION=\\\"No svn information\\\"\"",249],["\"PACKAGE_VERSION=\\\"No svn information\\\"\"",240],["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["message( FATAL_ERROR \"No one of known Android ABIs is supported by this cmake toolchain.\" )",136],["message(\"* Show compile-warnings  : No  (default)\")",117],["message(\"* Use coreside debug     : No  (default)\")",115],["message(\"* Build core w/PCH       : No\")",114],["message(\"* Build with scripts     : No\")",113],["message(\"* Build scripts w/PCH    : No\")",113],["message(\"* Build map/vmap tools   : No  (default)\")",112]],"useCount":3336},{"word":"Note","context":[["# the code including all documentation. Note that this",65],["# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list",65],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["#      Note: building for \"android-L\" requires explicit configuration.",70],["# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.",80],["# or class method. Note that enabling this option will significantly increase",108],["# Note that the expected include convention is",151],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["# Note:",179],["# Note that this will remove all occurances of -G.",191]],"useCount":5385},{"word":"OF","context":[["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",420],["# OF ENERGY, NOR SANDIA CORPORATION, NOR ANY OF THEIR EMPLOYEES, MAKES",397],["# OF ENERGY, NOR SANDIA CORPORATION, NOR ANY OF THEIR EMPLOYEES, MAKES",397],["# RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY",397],["# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",45],["# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",45],["# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",45],["# NOTE: THESE GUIDS *MUST* BE UNIQUE TO YOUR PLUGIN/ACTIVEX CONTROL!  YES, ALL OF THEM!",41],["# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",36],["#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",34]],"useCount":2219},{"word":"OFF","context":[["SET(CPACK_BINARY_NSIS \"OFF\")",144],["SET(CPACK_BINARY_RPM \"OFF\")",144],["SET(CPACK_SOURCE_ZIP \"OFF\")",153],["set(build_cubin OFF) # bool",168],["# verbose:BOOL=<>          OFF: Be as quiet as possible (default)",200],["-DBUILD_EXAMPLES:BOOL=OFF",225],["OFF",233],["-DBUILD_TESTING:BOOL=OFF",273],["set( ANDROID_EXCEPTIONS       OFF )",333],["SET(CPACK_SET_DESTDIR \"OFF\")",342]],"useCount":17996},{"word":"OGRE","context":[["pkg_message(OGRE \"Found Ogre ${OGRE_VERSION_NAME} (${OGRE_VERSION})\")",59],["create_search_paths(OGRE)",59],["# This file is part of the CMake build system for OGRE",449],["share/OGRE/media",59],["findpkg_begin(OGRE)",60],["findpkg_finish(OGRE)",60],["file(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/OGRE/Samples\" TYPE SHARED_LIBRARY FILES",172],["#       the OGRE plugins are located",116],["pkg_message(OGRE \"Could not determine Ogre build configuration.\")",63],["# - Try to find OGRE",60]],"useCount":2614},{"word":"OGRE_","context":[["find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}",64],["set(OGRE_${PLUGIN}_FOUND TRUE)",64],["set(OGRE_${PLUGIN}_LIBRARY_NAMES \"${PLUGIN}${OGRE_LIB_SUFFIX}\")",64],["get_debug_names(OGRE_${PLUGIN}_LIBRARY_NAMES)",64],["get_filename_component(OGRE_PLUGIN_DIR_TMP ${OGRE_${PLUGIN}_LIBRARY_REL} PATH)",61],["set(OGRE_${PLUGIN}_INCLUDE_DIRS ${OGRE_${PLUGIN}_INCLUDE_DIR})",61],["find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}",64],["find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}",66],["find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}",66],["make_library_set(OGRE_${PLUGIN}_LIBRARY)",64]],"useCount":2274},{"word":"ON","context":[["SET(CPACK_SOURCE_TGZ \"ON\")",154],["set( ANDROID_RTTI             ON )",346],["set( ANDROID_EXCEPTIONS       ON )",345],["ON",142],["SET(CPACK_SOURCE_TZ \"ON\")",143],["SET(CPACK_BINARY_TGZ \"ON\")",144],["LOG_DOWNLOAD ON",145],["SET(CPACK_SOURCE_TBZ2 \"ON\")",153],["#                          ON : Describe each step",198],["set(Boost_USE_STATIC_LIBS ON)",164]],"useCount":20708},{"word":"ONLY","context":[["@ONLY",1003],["set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",187],["SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",258],["SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",260],["set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )",445],["set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )",473],["set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )",474],["@ONLY)",634],["set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",720],["set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)",721]],"useCount":7595},{"word":"OPTIONAL","context":[["INCLUDE(CMakeFiles/test.dir/cmake_clean_${lang}.cmake OPTIONAL)",62],["INCLUDE(CMakeFiles/gtest_main.dir/cmake_clean_${lang}.cmake OPTIONAL)",91],["INCLUDE(CMakeFiles/gtest.dir/cmake_clean_${lang}.cmake OPTIONAL)",95],["OPTIONAL)",113],["include( \"${CMAKE_CURRENT_SOURCE_DIR}/../android.toolchain.config.cmake\" OPTIONAL )",129],["OPTIONAL",208],["INCLUDE(CMakeFiles/tests.dir/cmake_clean_${lang}.cmake OPTIONAL)",50],["INCLUDE(CMakeFiles/ROSBUILD_genmsg_cpp.dir/cmake_clean_${lang}.cmake OPTIONAL)",47],["INCLUDE(CMakeFiles/ROSBUILD_gensrv_cpp.dir/cmake_clean_${lang}.cmake OPTIONAL)",46],["INCLUDE(CMakeFiles/test-results.dir/cmake_clean_${lang}.cmake OPTIONAL)",46]],"useCount":2368},{"word":"OPTIONS","context":[["# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix",65],["if(arg STREQUAL \"OPTIONS\")",43],["#---REFLEX_BUILD_DICTIONARY( dictionary headerfiles selectionfile OPTIONS opt1 opt2 ...  LIBRARIES lib1 lib2 ... )",35],["#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )",34],["# Separate the OPTIONS out from the sources",65],["OPTIONS ${_options} )",160],["# OPTIONS",98],["OPTIONS",76],["CUDA_WRAP_SRCS( ${cuda_target} OBJ _generated_files ${_sources} OPTIONS ${_options} )",69],["#   OPTIONS             - Extra options to NVCC",66]],"useCount":2363},{"word":"OR","context":[["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Server\")",460],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_swig\")",519],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_swig\")",519],["# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE",636],["if(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",1823],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_devel\")",504],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_devel\")",504],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Server\")",460]],"useCount":56360},{"word":"OS","context":[["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# macro to find packages on the host OS",144],["# Added new modifications to recognize OS X frameworks and",246],["# Non-OS X framework versions expect you to also dynamically link to",233],["# this module will try to find on your behalf.) Also for OS X, this",226],["# module, but with modifications to recognize OS X frameworks and",189],["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms",168],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["if (${IOS_PLATFORM} STREQUAL \"OS\")",153]],"useCount":5583},{"word":"OSX","context":[["FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC \"Include for OpenCL CPP bindings on OSX\")",67],["# On OSX, this will prefer the Framework version (if found) over others.",292],["# But for non-OSX systems, I will use the CMake Threads package.",239],["# Set CMake OSX variable to pass down the external project",209],["if(\"${sdk}\" STREQUAL \"OSX\")",120],["# OSX  executable are always PIC",92],["Special handling required for OSX to support universal binaries that",72],["FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC \"OpenCL lib for OSX\")",69],["FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC \"Include for OpenCL on OSX\")",68],["#  10.x == Mac OSX 10.6 (Snow Leopard)",68]],"useCount":2604},{"word":"OUTPUT","context":[["OUTPUT",364],["OUTPUT_VARIABLE OUTPUT",342],["\"${OUTPUT}\\n\"",317],["\"${OUTPUT}\\n\\n\")",250],["\"the following output:\\n${OUTPUT}\\n\\n\")",188],["\"${OUTPUT}\\n\")",161],["ADD_CUSTOM_COMMAND(OUTPUT ${_impl} ${_header}",89],["OUTPUT ${_output}",88],["ADD_CUSTOM_COMMAND(OUTPUT ${outfile}",384],["OUTPUT_VARIABLE OUTPUT)",570]],"useCount":7390},{"word":"OUTPUT_STRIP_TRAILING_WHITESPACE","context":[["OUTPUT_STRIP_TRAILING_WHITESPACE",2158],["OUTPUT_VARIABLE  MPI_LINK_CMDLINE OUTPUT_STRIP_TRAILING_WHITESPACE",82],["EXECUTE_PROCESS(COMMAND \"date\" \"+%Y\" OUTPUT_VARIABLE MYSQL_COPYRIGHT_YEAR OUTPUT_STRIP_TRAILING_WHITESPACE)",44],["OUTPUT_VARIABLE  MPI_LIBDIRS OUTPUT_STRIP_TRAILING_WHITESPACE",40],["OUTPUT_VARIABLE __path OUTPUT_STRIP_TRAILING_WHITESPACE",103],["ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)",107],["OUTPUT_VARIABLE  MPI_COMPILE_CMDLINE OUTPUT_STRIP_TRAILING_WHITESPACE",128],["OUTPUT_VARIABLE __availableToolchainCompilerVersions OUTPUT_STRIP_TRAILING_WHITESPACE )",137],["OUTPUT_STRIP_TRAILING_WHITESPACE )",181],["OUTPUT_STRIP_TRAILING_WHITESPACE)",2475]],"useCount":5827},{"word":"OUTPUT_VARIABLE","context":[["OUTPUT_VARIABLE OUTPUT)",570],["OUTPUT_VARIABLE",389],["OUTPUT_VARIABLE OUTPUT",342],["OUTPUT_VARIABLE rm_out",170],["OUTPUT_VARIABLE __path OUTPUT_STRIP_TRAILING_WHITESPACE",103],["OUTPUT_VARIABLE GCC_VERSION)",92],["OUTPUT_VARIABLE __availableToolchainCompilerVersions OUTPUT_STRIP_TRAILING_WHITESPACE )",137],["OUTPUT_VARIABLE  MPI_COMPILE_CMDLINE OUTPUT_STRIP_TRAILING_WHITESPACE",128],["OUTPUT_VARIABLE output",120],["OUTPUT_VARIABLE _boost_COMPILER_VERSION",114]],"useCount":8915},{"word":"On","context":[["# On return:",219],["# On Unix OpenGL most certainly always requires X11.",54],["# On Unix, the plugins might have no prefix",64],["# On Win32 search relative to the library",65],["/* On some platforms (e.g. HP-UX) the multithreading c-runtime does not",72],["# On OSX, this will prefer the Framework version (if found) over others.",292],["# On versions < 1.35, remove the System library from the considered list",80],["# On 32bit build find the 32bit libs",92],["# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless",94],["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111]],"useCount":2811},{"word":"Once","context":[["# Once done this will define",4139],["# Once done, this will define",984],["# Once done this will define:",222],["# Once run this will define:",197],["# Once anyone knows how OpenSSL would call the patch versions beyond 'z'",51],["# Once done these will be defined:",46],["#  Once done this will define",44],["# Once we find the new variables, we translate them back into their old",38],["# Once done, this will define:",38],["## Once run this will define:",28]],"useCount":5939},{"word":"OpenCV","context":[["\"/usr/local/share/OpenCV/OpenCVConfig.cmake\"",93],["OpenCV",146],["#      - OpenCV_INCLUDE_DIRS             : The OpenCV include directories.",49],["# OpenCV",57],["#  The OpenCV CMake configuration file",58],["#    Or you can search for specific OpenCV modules:",49],["\"/usr/local/share/OpenCV/OpenCVModules-release.cmake\"",74],["message(FATAL_ERROR \"Minimum required by OpenCV API level is android-${OpenCV_ANDROID_NATIVE_API_LEVEL}\")",78],["\"/usr/local/share/OpenCV/OpenCVConfig-version.cmake\"",93],["\"/usr/local/share/OpenCV/OpenCVModules.cmake\"",86]],"useCount":2278},{"word":"OpenGL","context":[["# So this flag option is required for all projects using OpenGL from native.",111],["\"/System/Library/Frameworks/OpenGL.framework\"",106],["find_package(OpenGL QUIET)",72],["/opt/graphics/OpenGL/include",179],["/opt/graphics/OpenGL/include /usr/X11R6/include",93],["find_package(OpenGL REQUIRED)",101],["# also opt into OpenGL and OpenThreads (and Producer if needed) as these",153],["OpenGL",68],["/opt/graphics/OpenGL/contrib/libglfw",70],["find_package(OpenGL)",177]],"useCount":2610},{"word":"P","context":[["-P \"${CMAKE_BINARY_DIR}/cmake_install.cmake\")",55],["-P \"${CUDA_parse_cubin}\"",198],["-P \"${HDF_RESOURCES_EXT_DIR}/runTest.cmake\"",114],["# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands",59],["\"${CMAKE_COMMAND}\" -P \"${CMAKE_BINARY_DIR}/cmake_uninstall.cmake\"",61],["-P ${_JAVA_SYMLINK_SCRIPT}",71],["-P \"${custom_target_script}\"",74],["-P \"${HDF5_RESOURCES_DIR}/runTest.cmake\"",84],["-P ${LATEX_USE_LATEX_LOCATION}",176],["-P \"${CUDA_make2cmake}\"",198]],"useCount":2566},{"word":"PACKAGE_NAME","context":[["PACKAGE_NAME",1868],["\"PACKAGE_NAME=\\\"oaisim\\\"\"",60],["\"PACKAGE_NAME=\\\"EPC\\\"\"",61],["SET(${PACKAGE_NAME}_FOUND \"TRUE\")",76],["SET(${PACKAGE_NAME}_LIBRARIES  \"\" )",85],["#define PACKAGE_NAME \"MySQL Server\"",87],["\"PACKAGE_NAME=\\\"lte-softmodem\\\"\"",60],["\"PACKAGE_NAME=\\\"lte-softmodem-nos1\\\"\"",59],["SET(${PACKAGE_NAME}_INCLUDE_DIRS \"\")",100],["PACKAGE_NAME Qt",163]],"useCount":3255},{"word":"PARENT_SCOPE","context":[["set (${_cmdsVar} ${${_cmdsVar}} PARENT_SCOPE)",170],["set(\"${result_var_name}\" \"${result}\" PARENT_SCOPE)",116],["PARENT_SCOPE)",392],["set (${_flagsVar} ${_flags} PARENT_SCOPE)",114],["set(${warning_flags} \"${result}\" PARENT_SCOPE)",100],["set(${SRCS} ${${SRCS}} PARENT_SCOPE)",123],["set (${_msgVar} \"\" PARENT_SCOPE)",148],["set(${HDRS} ${${HDRS}} PARENT_SCOPE)",93],["set(${_var} \"${out}\" PARENT_SCOPE)",198],["PARENT_SCOPE",182]],"useCount":13206},{"word":"PATH","context":[["set(ENV{PATH} \"${__new_path}\")",137],["get_filename_component(work_dir \"${source_dir}\" PATH)",136],["GET_FILENAME_COMPONENT(MYSQL_CMAKE_SCRIPT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",140],["-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>",196],["PATH",378],["get_filename_component(_IMPORT_PREFIX \"${_IMPORT_PREFIX}\" PATH)",374],["PATH)",160],["get_filename_component(_ROOT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",151],["get_filename_component(_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",142],["get_filename_component(_IMPORT_PREFIX \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",171]],"useCount":16661},{"word":"PATHS","context":[["PATHS \"${CMAKE_CURRENT_LIST_DIR}/..\" NO_DEFAULT_PATH",215],["PATHS ${FFTW_ROOT}",148],["PATHS",15647],["PATHS /usr/lib /usr/local/lib",212],["PATHS ENV LIBRARY_PATH ENV LD_LIBRARY_PATH)",169],["PATHS ${path}",605],["PATHS ${FIND_SFML_PATHS})",426],["PATHS /usr/local/include",160],["PATHS ${SDL2_SEARCH_PATHS}",362],["PATHS ${QT_BINARY_DIR}",293]],"useCount":28488},{"word":"PATH_SUFFIXES","context":[["PATH_SUFFIXES",3340],["PATH_SUFFIXES lib",1048],["PATH_SUFFIXES bin",296],["PATH_SUFFIXES lib)",264],["PATH_SUFFIXES include",1381],["PATH_SUFFIXES lib64 lib",1592],["PATH_SUFFIXES lib lib64",221],["PATH_SUFFIXES include/SDL2 include",210],["PATH_SUFFIXES include)",169],["PATH_SUFFIXES \"include\"",145]],"useCount":13928},{"word":"PLUGIN","context":[["find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}",66],["find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}",66],["string(REPLACE \"RenderSystem_\" \"\" PLUGIN_TEMP ${PLUGIN})",64],["set(OGRE_${PLUGIN}_FOUND TRUE)",64],["set(OGRE_${PLUGIN}_LIBRARY_NAMES \"${PLUGIN}${OGRE_LIB_SUFFIX}\")",64],["set(OGRE_${PLUGIN}_LIBRARY_NAMES \"${PLUGIN}${OGRE_LIB_SUFFIX}\")",64],["PlugIns PlugIns/${PLUGIN_NAME} Plugins Plugins/${PLUGIN_NAME} ${PLUGIN}",64],["find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}",64],["find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}",64],["make_library_set(OGRE_${PLUGIN}_LIBRARY)",64]],"useCount":2136},{"word":"POST_BUILD","context":[["ADD_CUSTOM_COMMAND(TARGET ${_targetname} POST_BUILD",189],["add_custom_command(TARGET ${_TARGET_NAME} POST_BUILD",40],["add_custom_command(TARGET ${EXECUTABLE} POST_BUILD",46],["add_custom_command (TARGET ${TARGET_NAME} POST_BUILD",52],["add_custom_command (TARGET ${_target} POST_BUILD",60],["ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD",73],["add_custom_command(TARGET ${TARGET_NAME} POST_BUILD",96],["add_custom_command(TARGET ${target} POST_BUILD",105],["add_custom_command(TARGET tf_python_build_pip_package POST_BUILD",120],["POST_BUILD",1058]],"useCount":2097},{"word":"PREFIX","context":[["set (${PREFIX}_FOUND FALSE)",88],["PREFIX              ${BUILDEM_DIR}",122],["if (${PREFIX}_FIND_REQUIRED)",171],["PREFIX \"\"",245],["if (NOT ${PREFIX}_FIND_QUIETLY)",314],["if (NOT ${PREFIX}_FOUND)",119],["PREFIX              ${ILASTIK_DEPENDENCY_DIR}",116],["pkg_check_modules(${PREFIX} ${PKGNAME})",105],["endif (${PREFIX}_FIND_REQUIRED)",86],["PREFIX ${proj}${ep_suffix}",96]],"useCount":9609},{"word":"PROJECT_NAME","context":[["${PROJECT_NAME}",50],["IF (${PROJECT_NAME}_VERBOSE_CONFIGURE)",192],["target_link_libraries(${PROJECT_NAME}",100],["FILE(APPEND ${${PROJECT_NAME}_BUILD_FILE}",95],["SET(OUT \"${OUT}.${${PROJECT_NAME}_VERSION_PATCH}\")",36],["INSTALL(TARGETS ${PROJECT_NAME}",41],["# The PROJECT_NAME tag is a single word (or a sequence of words surrounded",44],["if(${PROJECT_NAME}_BUILD_DICOM_SUPPORT)",44],["if( NOT PROJECT_NAME STREQUAL \"CMAKE_TRY_COMPILE\" )",74],["if (${PROJECT_NAME}_USE_PYTHONQT)",56]],"useCount":2800},{"word":"PROPERTIES","context":[["set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)",99],["set_target_properties(opencv_stitching PROPERTIES",84],["set_source_files_properties(${_sourceFiles} PROPERTIES COTIRE_TARGET \"${_target}\")",106],["set_target_properties(opencv_highgui PROPERTIES",84],["set_target_properties(${_name} PROPERTIES LINK_FLAGS -Wl,--as-needed)",85],["set_target_properties(${name} PROPERTIES",106],["set_target_properties(${target} PROPERTIES",207],["SET_TARGET_PROPERTIES(${target} PROPERTIES",116],["set_target_properties(Qt5::${Plugin} PROPERTIES",214],["PROPERTIES",1945]],"useCount":12643},{"word":"PROPERTY","context":[["set_property(DIRECTORY APPEND PROPERTY",118],["get_property(_prefixFile TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER)",94],["set_property(TARGET ${name} APPEND_STRING PROPERTY",101],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106],["get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )",111],["get_property(_propertyValue ${_type} \"${_object}\" PROPERTY ${_property})",114],["PROPERTY",290],["set_property(TARGET Qt5::${Plugin} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${Configuration})",214],["set_property(TARGET ${target_name} APPEND_STRING PROPERTY",145],["set_property( CACHE ANDROID_NATIVE_API_LEVEL PROPERTY STRINGS ${ANDROID_SUPPORTED_NATIVE_API_LEVELS} )",128]],"useCount":15237},{"word":"PYTHON_EXECUTABLE","context":[["if(PYTHON_EXECUTABLE)",141],["execute_process(COMMAND \"${PYTHON_EXECUTABLE}\" \"-c\"",112],["endif(PYTHON_EXECUTABLE)",108],["IF(NOT PYTHON_EXECUTABLE)",85],["COMMAND ${PYTHON_EXECUTABLE}",147],["COMMAND ${PYTHON_EXECUTABLE} ${PYTHON_DASH_B}",73],["ENDIF() # NOT PYTHON_EXECUTABLE",83],["# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.",46],["if(NOT PYTHON_EXECUTABLE)",51],["execute_process(COMMAND ${PYTHON_EXECUTABLE} -c",62]],"useCount":2362},{"word":"Path","context":[["#  QT_QTASSISTANT_INCLUDE_DIR  Path to \"include/QtAssistant\"",36],["set( ANDROID_NDK \"${ANDROID_NDK}\" CACHE INTERNAL \"Path of the Android NDK\" FORCE )",111],["message(WARNING \"Path to your Android NDK (or toolchain) has non-alphanumeric symbols.\\nThe build might be broken.\\n\")",103],["\"Path to where Python.h is found\" FORCE)",37],["#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the",36],["#  QT_QTGUI_INCLUDE_DIR        Path to \"include/QtGui\"",36],["#  QT_QTSVG_INCLUDE_DIR        Path to \"include/QtSvg\"",36],["#  QT_QTCORE_INCLUDE_DIR       Path to \"include/QtCore\"",36],["#  QT_QTSQL_INCLUDE_DIR        Path to \"include/QtSql\"",36],["#  QT_QT3SUPPORT_INCLUDE_DIR   Path to \"include/Qt3Support\"",36]],"useCount":3030},{"word":"Per","context":[["# Per-user current Windows SDK for VS2005/2008",17],["#        the Q_OBJECT declaration.  Per-direcotry preprocessor definitions",18],["# Per my request, CMake should search for frameworks first in",24],["# Per-language clean rules from dependency scanning.",11977],["# Per-recommendation",43]],"useCount":12079},{"word":"PkgConfig","context":[["FIND_PACKAGE (PkgConfig)",19],["#find_package(PkgConfig)",19],["find_package(PkgConfig)",1787],["find_package(PkgConfig QUIET)",348],["FIND_PACKAGE(PkgConfig)",311],["find_package(PkgConfig REQUIRED)",174],["find_package (PkgConfig)",38],["# Check if we can use PkgConfig",38],["find_package( PkgConfig )",29],["FIND_PACKAGE(PkgConfig REQUIRED)",27]],"useCount":2873},{"word":"Platform","context":[["\"/usr/share/cmake-2.8/Modules/Platform/Linux-CXX.cmake\"",158],["\"../src/Platform/Linux\"",97],["include(Platform/UnixPaths)",102],["INCLUDE(Platform/UnixPaths)",105],["\"/usr/share/cmake-2.8/Modules/Platform/UnixPaths.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/Platform/Linux.cmake\"",740],["#                   FreeFOAM: The Cross-Platform CFD Toolkit",392],["# CMake - Cross Platform Makefile Generator",169],["\"/usr/share/cmake/Modules/Platform/UnixPaths.cmake\"",119],["\"/usr/share/cmake/Modules/Platform/Linux.cmake\"",119]],"useCount":5215},{"word":"Preprocessor","context":[["# Preprocessor definitions",27],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file before the inclusion of each source file.\"",38],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file after the inclusion of each source file.\"",38],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file after the inclusion of this source file.\"",38],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file before the inclusion of this source file.\"",38],["# Preprocessor definitions for this target.",6763]],"useCount":6942},{"word":"Program","context":[["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/MySQL\")",56],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/Eigen\")",78],["# Iowa State University HCI Graduate Program/VRAC",431],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OpenSceneGraph\")",291],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/LLVM\")",285],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OSGEARTH\")",119],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files/FreeRDP\")",99],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files/MySQL\")",98],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/BULLET_PHYSICS\")",69],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/RGBDemo\")",56]],"useCount":3796},{"word":"Python","context":[["NAMES Python.h",74],["#include <Python.h>",54],["\"Python not found in PATH:\\n  $ENV{PATH}\\n\"",132],["\"Python required for building Qt component (qtdeclarative):\\n\"",132],["# Python",118],["MESSAGE(FATAL_ERROR \"Python not found! Aborting...\")",83],["# Look for the static library in the Python config directory",49],["# We are not supporting Python tests on Linux yet as they consider",46],["# This module finds if Python is installed and determines where the",63],["CMAKE_FIND_FRAMEWORKS(Python)",67]],"useCount":3653},{"word":"QT_","context":[["ENDIF (QT_${basename}_INCLUDE_DIR)",26],["PATHS ${QT_${_upper_qt_plugin_type}_PLUGINS_DIR} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH",56],["IF (QT_${basename}_INCLUDE_DIR)",31],["IF (QT_${basename}_LIBRARY_RELEASE AND NOT QT_${basename}_LIBRARY_DEBUG)",30],["IF (QT_${basename}_LIBRARY_RELEASE AND NOT QT_${basename}_LIBRARY_DEBUG)",30],["SET(QT_${basename}_FOUND 1)",29],["ENDIF (QT_${basename}_LIBRARY_RELEASE AND NOT QT_${basename}_LIBRARY_DEBUG)",28],["ENDIF (QT_${basename}_LIBRARY_RELEASE AND NOT QT_${basename}_LIBRARY_DEBUG)",28],["export_lib(QT_${_suffix})",28],["IF (QT_${basename}_LIBRARY_DEBUG AND NOT QT_${basename}_LIBRARY_RELEASE)",25]],"useCount":2175},{"word":"QUIET","context":[["find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)",106],["find_package(PkgConfig QUIET)",348],["# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.",66],["find_package(X11 QUIET)",63],["find_package(ZLIB QUIET)",95],["QUIET                  = NO",89],["find_package(Freetype QUIET)",72],["find_package(OpenGL QUIET)",72],["find_package(Git QUIET)",179],["# The QUIET tag can be used to turn on/off the messages that are generated",63]],"useCount":3498},{"word":"Qt","context":[["# made to remove references to Qt and make this file more generally applicable",109],["hunter_add_package(Qt COMPONENTS ${_x})",132],["\"Python required for building Qt component (qtdeclarative):\\n\"",132],["PACKAGE_NAME Qt",163],["\"/usr/include/qt4/Qt\"",175],["message(FATAL_ERROR \"Qt 5 requires at least CMake version 2.8.3\")",215],["Qt",86],["#       Macros for building Qt files",72],["# interpret the first line (until the first dot) of a Qt-style",56],["# Qt Help Project output. For more information please see",100]],"useCount":4551},{"word":"QtCore","context":[["IF (EXISTS ${QT_LIBRARY_DIR}/QtCore.framework)",30],["set_property(TARGET Qt4::QtCore APPEND PROPERTY",37],["${QT_LIBRARY_DIR}/QtCore.framework/Headers",40],["\"/opt/local/include/QtCore\"",113],["\"/usr/include/qt4/QtCore\"",1025],["ELSE (EXISTS ${QT_LIBRARY_DIR}/QtCore.framework)",30],["ENDIF (EXISTS ${QT_LIBRARY_DIR}/QtCore.framework)",30],["${FREECAD_LIBPACK_DIR}/include/QT/QtCore",30],["find_package(Qt4 4.8 COMPONENTS QtCore QtGui)",33],["#  QT_QTCORE_INCLUDE_DIR       Path to \"include/QtCore\"",36]],"useCount":2216},{"word":"READ","context":[["file(READ \"${EIGEN3_INCLUDE_DIR}/Eigen/src/Core/util/Macros.h\" _eigen3_version_header)",100],["FILE(READ \"${SFML_CONFIG_HPP_INPUT}\" SFML_CONFIG_HPP_CONTENTS)",85],["FILE(READ \"${infile}\" _RC_FILE_CONTENTS)",77],["file(READ",61],["file(READ ${OGRE_CONFIG_HEADER} OGRE_TEMP_CONFIG_CONTENT)",59],["file(READ ${OGRE_INCLUDE_DIR}/OgrePrerequisites.h OGRE_TEMP_VERSION_CONTENT)",59],["FILE(READ ${_abs_FILE} _contents)",56],["file(READ \"${source}\" contents)",55],["file(READ \"${out}\" output)",48],["file(READ ${SKETCH_SOURCE_PATH} SKETCH_SOURCE)",46]],"useCount":2065},{"word":"REGEX","context":[["string(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",2385],["string( REGEX MATCH \"3[.][0-9]$\" ANDROID_CLANG_VERSION \"${ANDROID_TOOLCHAIN_NAME}\")",110],["string( REGEX MATCH \"[0-9]+[.][0-9]+\" ANDROID_CLANG_VERSION \"${ANDROID_CLANG_VERSION}\")",111],["string( REGEX REPLACE \"${__ndkApiLevelRegex}\" \"\\\\1\" ${_var} \"${__apiFileContent}\" )",136],["STRING (REGEX REPLACE",365],["STRING(REGEX REPLACE",437],["string(REGEX REPLACE",631],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385],["STRING(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",5696],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696]],"useCount":33938},{"word":"RELEASE","context":[["file( STRINGS \"${ANDROID_NDK}/RELEASE.TXT\" ANDROID_NDK_RELEASE_FULL LIMIT_COUNT 1 REGEX \"r[0-9]+[a-z]?\" )",68],["# Find RELEASE libraries",70],["SET(BUILD_TYPE RELEASE)",103],["if( EXISTS \"${ANDROID_NDK}/RELEASE.TXT\" )",103],["set( ANDROID_NDK_LAYOUT \"RELEASE\" )",102],["#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)",102],["else() # ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"",103],["foreach(c DEBUG RELEASE)",62],["IMPORTED_CONFIGURATIONS RELEASE)",86],["if( EXISTS \"${ANDROID_NDK}/RELEASE.TXT\")",101]],"useCount":2739},{"word":"REMOVE_DUPLICATES","context":[["list(REMOVE_DUPLICATES _Boost_COMPONENTS_SEARCHED)",45],["list (REMOVE_DUPLICATES _includeDirs)",48],["list(REMOVE_DUPLICATES X11_INCLUDE_DIR)",54],["list(REMOVE_DUPLICATES OGRE_INCLUDE_DIR)",59],["list(REMOVE_DUPLICATES CUDA_configuration_types)",64],["# REMOVE_DUPLICATES.",64],["LIST( REMOVE_DUPLICATES OPENCL_INCLUDE_DIRS )",65],["list(REMOVE_DUPLICATES CUDA_ADDITIONAL_CLEAN_FILES)",66],["LIST(REMOVE_DUPLICATES CMAKE_REQUIRED_LIBRARIES)",92],["list( REMOVE_DUPLICATES __uniqToolchainArchNames )",136]],"useCount":2095},{"word":"REMOVE_ITEM","context":[["list (REMOVE_ITEM _unityTargetSources ${_sourceFiles} ${_cotiredSources})",38],["list (REMOVE_ITEM _includeDirs ${CMAKE_${_language}_IMPLICIT_INCLUDE_DIRECTORIES})",38],["list(REMOVE_ITEM OpenCV_FIND_COMPONENTS opencv_ts)",41],["list(REMOVE_ITEM DCMTK_SOURCES",42],["list(REMOVE_ITEM ${lst} \"${item}\")",47],["list(REMOVE_ITEM SWIFTLIB_SWIFT_MODULE_DEPENDS",76],["list(REMOVE_ITEM Boost_FIND_COMPONENTS system)",80],["list(REMOVE_ITEM ${listname} ${ARGN})",587],["list(REMOVE_ITEM depends_CUDA_NVCC_FLAGS \"-G\")",191],["list( REMOVE_ITEM ${listvar} \"${__val}\" )",136]],"useCount":2281},{"word":"REMOVE_RECURSE","context":[["file(REMOVE_RECURSE \"${cmakelists}\")",22],["file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/Testing)",35],["file(REMOVE_RECURSE ${BoostExtractFolder})",30],["file(REMOVE_RECURSE \\${directory})",27],["file(REMOVE_RECURSE ${CMAKE_${lang}_COMPILER_ID_DIR})",24],["file(REMOVE_RECURSE ${file})",23],["file(REMOVE_RECURSE \"${RunCMake_TEST_BINARY_DIR}\")",49],["file(REMOVE_RECURSE \\\"\\${ut_dir}\\\")",62],["file(REMOVE_RECURSE",3235],["FILE(REMOVE_RECURSE",9633]],"useCount":13242},{"word":"REPLACE","context":[["STRING (REGEX REPLACE",365],["STRING(REGEX REPLACE",437],["string(REPLACE \";\" \"\\n\" CMAKE_INSTALL_MANIFEST_CONTENT",466],["string(REPLACE \" \" \";\" depend_list ${depend})",609],["string(REGEX REPLACE",631],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385],["string(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",2385],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696],["STRING(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",5696],["string(REPLACE \"\\\"\" \"\\\\\\\"\" arg ${arg})",199]],"useCount":39646},{"word":"REQUIRED","context":[["find_package(PythonInterp REQUIRED)",173],["find_package(ZLIB REQUIRED)",132],["find_package(Threads REQUIRED)",310],["find_package(PkgConfig REQUIRED)",174],["# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if",126],["find_package(X11 REQUIRED)",113],["# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if",106],["find_package(Git REQUIRED)",102],["find_package(OpenGL REQUIRED)",101],["SET( _pkgconfig_REQUIRED \"REQUIRED\" )",98]],"useCount":8038},{"word":"RESULT_VARIABLE","context":[["RESULT_VARIABLE",295],["RESULT_VARIABLE  MPI_COMPILER_RETURN)",210],["execute_process(COMMAND ${ARGN} RESULT_VARIABLE CUDA_result )",198],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["RESULT_VARIABLE RET",153],["RESULT_VARIABLE res",131],["RESULT_VARIABLE rv)",117],["RESULT_VARIABLE RESULT",105],["RESULT_VARIABLE result",325],["RESULT_VARIABLE error_code",631]],"useCount":5181},{"word":"ROOT_BUILD_OPTION","context":[["ROOT_BUILD_OPTION(shared ON \"Use shared 3rd party libraries if possible\")",30],["#---ROOT_BUILD_OPTION( name defvalue [description] )",30],["ROOT_BUILD_OPTION(asimage ON \"Image processing support, requires libAfterImage\")",30],["ROOT_BUILD_OPTION(pch ON)",30],["ROOT_BUILD_OPTION(ruby OFF \"Ruby ROOT bindings, requires ruby >= 1.8\")",30],["ROOT_BUILD_OPTION(gsl_shared OFF \"Enable linking against shared libraries for GSL (default no)\")",30],["ROOT_BUILD_OPTION(opengl ON \"OpenGL support, requires libGL and libGLU\")",30],["ROOT_BUILD_OPTION(afs OFF \"AFS support, requires AFS libs and objects\")",30],["ROOT_BUILD_OPTION(astiff ON \"Include tiff support in image processing\")",30],["ROOT_BUILD_OPTION(globus OFF \"Globus authentication support, requires Globus toolkit\")",30]],"useCount":2204},{"word":"RPATH","context":[["RPATH \"/usr/local/lib64/games/speed-dreams-2/lib\")",100],["RPATH \"\")",1529],["RPATH \"/usr/local/lib\")",137],["# use, i.e. don't skip the full RPATH for the build tree",62],["# add the automatically determined parts of the RPATH",62],["# set install RPATH for Unix systems",62],["# which point to directories outside the build tree to the install RPATH",79],["RPATH \"/home/BCAMATH/mfernandez/reduced-flipping-GSHMC/exec/lib\")",95],["# the RPATH to be used when installing, but only if it's not a system directory",24],["# when building, don't use the install RPATH already",51]],"useCount":2441},{"word":"Redistribution","context":[["# U.S. Government. Redistribution and use in source and binary forms, with",31],["## Redistribution and use in source and binary forms, with or without",18],["#    Redistribution and use in source and binary forms, with or without",20],["#  Redistribution AND use is allowed according to the terms of the New",27],["#  Redistribution and use in source and binary forms, with or without",109],["# Redistribution and use in source and binary forms, with or without modification,",83],["#Redistribution and use in source and binary forms, with or without",44],["# Redistribution and use is allowed according to the terms of the New",33],["#  Redistribution and use is allowed according to the terms of the New",566],["# Redistribution and use in source and binary forms, with or without",2447]],"useCount":3466},{"word":"RelWithDebInfo","context":[["# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)",64],["\"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"",62],["CONFIGURATIONS Debug RelWithDebInfo",63],["set(CUDA_configuration_types ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE} Debug MinSizeRel Release RelWithDebInfo)",64],["CONFIGURATIONS Release RelWithDebInfo",66],["#                               RelWithDebInfo, but it should match one of the",198],["\"CMAKE_BUILD_TYPE=\\\"RelWithDebInfo\\\"\"",240],["CONFIGURATIONS RelWithDebInfo",256],["set(CMAKE_INSTALL_CONFIG_NAME \"RelWithDebInfo\")",295],["SET(CMAKE_INSTALL_CONFIG_NAME \"RelWithDebInfo\")",544]],"useCount":2683},{"word":"Relative","context":[["# Relative path conversion top directories.",2231],["/* Relative directory for resource files */",22],["## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)",13],["# Relative paths are interpreted with respect to the build directory",18]],"useCount":2284},{"word":"Release","context":[["# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or",198],["CMAKE_BUILD_TYPE:STRING=Release",81],["# Generated CMake target import file for configuration \"Release\".",146],["set( ANDROID_CXX_FLAGS_RELEASE \"${ANDROID_CXX_FLAGS_RELEASE}\" CACHE INTERNAL \"Android specific c/c++ Release flags\" )",109],["set( CMAKE_CXX_FLAGS_RELEASE   \"-O3 -DNDEBUG\"            CACHE STRING \"c++ Release flags\" )",103],["set( CMAKE_C_FLAGS_RELEASE     \"-O3 -DNDEBUG\"            CACHE STRING \"c Release flags\" )",103],["CONFIGURATIONS Release)",73],["set(CMAKE_INSTALL_CONFIG_NAME \"Release\")",1373],["SET(CMAKE_INSTALL_CONFIG_NAME \"Release\")",2436],["-DCMAKE_BUILD_TYPE:STRING=Release",81]],"useCount":9931},{"word":"Rr","context":[["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",78],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",76],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",66]],"useCount":4414},{"word":"SCRIPTS","context":[["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["set(SCRIPTS \"static\" CACHE STRING \"Build core with scripts\")",11],["#  For details see the COPYING-CMAKE-SCRIPTS file.",25],["# see accompanying file COPYING-CMAKE-SCRIPTS for details.",51],["\"SCRIPTS\"",72],["option(SCRIPTS          \"Build core with scripts included\"                            1)",85],["if( SCRIPTS )",112]],"useCount":2956},{"word":"SDK","context":[["message(FATAL_ERROR \"Should specify an SDK\")",134],["# Set the sysroot default to the most recent SDK",84],["# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder",80],["#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.",80],["#   If set manually, this will force the use of a specific SDK version",80],["message (STATUS \"Toolchain using default iOS SDK: ${CMAKE_IOS_SDK_ROOT}\")",78],["set (CMAKE_IOS_SDK_ROOT ${CMAKE_IOS_SDK_ROOT} CACHE PATH \"Location of the selected iOS SDK\")",77],["# The AMD SDK currently does not place its headers",76],["SDK ${sdk}",72],["#   Treat the library as a part of the Swift SDK overlay.",60]],"useCount":3597},{"word":"SDL","context":[["# This needed to change because \"proper\" SDL convention",145],["FIND_PATH(SDL2_INCLUDE_DIR SDL.h",159],["# Also corrected the header search path to follow \"proper\" SDL guidelines.",143],["# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This",99],["# SDL2_INCLUDE_DIR, where to find SDL.h",162],["# used in building SDL.",174],["# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability",198],["# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability",198],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202]],"useCount":3810},{"word":"SDL2","context":[["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["NAMES SDL2",202],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171],["# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability",198],["# reasons because not all systems place things in SDL2/ (see FreeBSD).",199],["$ENV{SDL2}",227],["# used in building SDL2.",212],["PATH_SUFFIXES include/SDL2 include",210],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202]],"useCount":4740},{"word":"SDL2_LIBRARY_TEMP","context":[["SET(SDL2_LIBRARY_TEMP ${SDL2MAIN_LIBRARY} ${SDL2_LIBRARY_TEMP})",148],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["SET(SDL2_LIBRARY_TEMP \"${SDL2_LIBRARY_TEMP}\" CACHE INTERNAL \"\")",146],["IF(SDL2_LIBRARY_TEMP)",146],["SET(SDL2_LIBRARY_TEMP ${SDL2_LIBRARY_TEMP} ${CMAKE_THREAD_LIBS_INIT})",146],["SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING \"Where the SDL2 Library can be found\")",146],["SET(SDL2_LIBRARY_TEMP ${MINGW32_LIBRARY} ${SDL2_LIBRARY_TEMP})",148],["SET(SDL2_LIBRARY_TEMP ${MINGW32_LIBRARY} ${SDL2_LIBRARY_TEMP})",148],["SET(SDL2_LIBRARY_TEMP ${SDL2MAIN_LIBRARY} ${SDL2_LIBRARY_TEMP})",148],["# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.",160]],"useCount":2858},{"word":"SET","context":[["SET(CMAKE_INSTALL_COMPONENT)",5696],["SET(CMAKE_CXX_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977],["SET(CMAKE_C_TARGET_INCLUDE_PATH",4977],["SET(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977],["SET(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",4977],["SET(CMAKE_TARGET_DEFINITIONS",5143],["SET(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")",5696],["SET(CMAKE_DEPENDS_CHECK_CXX",5746],["SET(CMAKE_TARGET_LINKED_INFO_FILES",7921],["SET(CMAKE_DEPENDS_LANGUAGES",7929]],"useCount":216868},{"word":"SFML","context":[["# extract the major and minor version numbers from SFML/Config.hpp",104],["# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which",94],["# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).",103],["# SFML version is < 2.0",103],["# find the SFML include directory",104],["# to tell CMake where SFML is.",104],["# By default, the dynamic libraries of SFML will be found. To find the static ones instead,",103],["find_path(SFML_INCLUDE_DIR SFML/Config.hpp",102],["# SFML version not ok",102],["set(FIND_SFML_ERROR \"Could NOT find SFML (missing: ${FIND_SFML_MISSING})\")",101]],"useCount":2477},{"word":"SFML_","context":[["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG",101],["set(SFML_LIBRARIES ${SFML_LIBRARIES} \"${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY}\")",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND TRUE)",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND FALSE)",101],["optimized ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["set(FIND_SFML_MISSING \"${FIND_SFML_MISSING} SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY\")",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",101]],"useCount":3957},{"word":"SHARED","context":[["if(\"${libkind}\" STREQUAL \"SHARED\")",84],["# SHARED, MODULE",61],["# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.",60],["FOREACH(type EXE SHARED MODULE)",60],["list(FIND cmake_args SHARED _cuda_found_SHARED)",60],["set(_cuda_build_shared_libs SHARED)",60],["list(FIND _cuda_wrap_cmake_options SHARED _cuda_found_SHARED)",61],["#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)",66],["# 模块类型变量; app(APPLICATION); lib(STATIC, SHARED);",81],["SHARED",124]],"useCount":2874},{"word":"SOURCE","context":[["\"${SOURCE}\\n\")",85],["list(APPEND SOURCE",78],["set_property (SOURCE ${_sourceFiles} APPEND PROPERTY OBJECT_DEPENDS \"${_pchFile}\")",76],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106],["\"Source file was:\\n${SOURCE}\\n\")",208],["\"Performing C++ SOURCE FILE Test ${VAR} failed with the following output:\\n\"",40],["SET(SOURCE",39],["SOURCE PROPERTY \"COTIRE_TARGET\"",38],["set_property (SOURCE \"${_pchFile}\" PROPERTY GENERATED TRUE)",38],["set_property (SOURCE \"${_prefixFile}\" PROPERTY GENERATED TRUE)",38]],"useCount":2551},{"word":"SOURCES","context":[["FOREACH(FILE ${SOURCES})",48],["LIST(REMOVE_AT SOURCES 0)",65],["set (SOURCES",109],["${SOURCES}",155],["get_target_property(_targetSourceFiles ${_target} SOURCES)",163],["set(SOURCES",422],["SOURCES",167],["set(SOURCES ${SOURCES}",51],["set(SOURCES ${SOURCES}",51],["ADD_LIBRARY(${target} MODULE ${SOURCES})",42]],"useCount":2601},{"word":"STATIC","context":[["SET(DIOS_MODULE_${MODULE}_IOS_TYPE STATIC) # can only build static library on ios",51],["# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.",60],["# type can be either STATIC or SHARED to denote a static or shared library.",53],["# STATIC",87],["# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then",60],["list(FIND cmake_args STATIC _cuda_found_STATIC)",60],["set(_cuda_build_shared_libs STATIC)",60],["list(FIND _cuda_wrap_cmake_options STATIC _cuda_found_STATIC)",61],["#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)",66],["# 模块类型变量; app(APPLICATION); lib(STATIC, SHARED);",81]],"useCount":2660},{"word":"STATUS","context":[["message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",2385],["message(STATUS \"[FindGTK2.cmake:${CMAKE_CURRENT_LIST_LINE}]     \"",189],["message (STATUS)",198],["MESSAGE(STATUS",205],["message(STATUS",548],["message(STATUS \"\")",580],["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] \"",2154],["MESSAGE(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",5696],["MESSAGE(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",5696],["message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",2385]],"useCount":46859},{"word":"STREQUAL","context":[["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_devel\")",504],["if(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",1823],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["if(NOT \"\" STREQUAL \"\")",708],["if(NOT \"${ARGN}\" STREQUAL \"\")",613],["if(NOT \"\" STREQUAL \"TRUE\")",605],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_swig\")",519],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_devel\")",504],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"core_swig\")",519]],"useCount":81586},{"word":"STRING","context":[["CACHE STRING \"Result from TRY_RUN\" FORCE)",567],["SET(MINGW32_LIBRARY mingw32 CACHE STRING \"mwindows for MinGW\")",199],["\"-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}\")",201],["# I think it has something to do with the CACHE STRING.",237],["CMAKE_FLAGS -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_FUNCTION_DEFINITIONS}",258],["-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}",283],["STRING (REGEX REPLACE",365],["STRING(REGEX REPLACE",437],["STRING(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",5696],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696]],"useCount":35296},{"word":"STRINGS","context":[["file( STRINGS \"${ANDROID_NDK}/RELEASE.TXT\" ANDROID_NDK_RELEASE_FULL LIMIT_COUNT 1 REGEX \"r[0-9]+[a-z]?\" )",68],["set_property( CACHE ANDROID_NATIVE_API_LEVEL PROPERTY STRINGS ${ANDROID_SUPPORTED_NATIVE_API_LEVELS} )",128],["set_property( CACHE ANDROID_ABI PROPERTY STRINGS ${ANDROID_SUPPORTED_ABIS_${ANDROID_ARCH_FULLNAME}} )",62],["file( STRINGS ${_path} __apiFileContent REGEX \"${__ndkApiLevelRegex}\" )",61],["file(STRINGS \"${OPENSSL_INCLUDE_DIR}/openssl/opensslv.h\" openssl_version_str",52],["set_property( CACHE ANDROID_ABI PROPERTY STRINGS ${ANDROID_SUPPORTED_ABIS_${ANDROID_ARCH_NAME}} )",66],["FILE( STRINGS ${_path} __apiFileContent REGEX \"${__ndkApiLevelRegex}\" )",75],["set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")",47],["FILE (STRINGS ${CMAKE_SOURCE_DIR}/VERSION str REGEX \"^[ ]*${keyword}=\")",40],["file(STRINGS ${filename} fstrings REGEX \"^[^#//]\")",40]],"useCount":2031},{"word":"See","context":[["# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",80],["#      files. See additional details below.",73],["#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",136],["See https://android.googlesource.com/platform/development.git f907f4f9d4e56ccc8093df6fee54454b8bcab6c2",111],["#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",113],["#  See home page: https://github.com/taka-no-me/android-cmake",108],["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["# See",95],["# See http://visp.inria.fr for more information.",91],["# supported when trying to run an application.  See",79]],"useCount":3759},{"word":"Set","context":[["# Set the component getting installed.",8081],["# Set the install configuration name.",8081],["# Set the include dir variables and the libraries and let libfind_process do the rest.",345],["# Set the final string here so the GUI reflects the final state.",274],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["# Set dependency list",246],["# Set CMake OSX variable to pass down the external project",209],["# Set these up as variables to make reading the generated file easier",199],["# Set build-directive (used in core to tell which buildtype we used)",188],["# Set the install prefix",8083]],"useCount":36962},{"word":"SimplexLP","context":[["\"/home/cmeon/SimplexLP/eigen\"",969],["\"/home/cmeon/SimplexLP/eigen/unsupported/doc/examples\"",13],["\"/home/cmeon/SimplexLP/lib/blas/CMakeFiles/eigen_blas.dir/DependInfo.cmake\"",13],["\"/home/cmeon/SimplexLP/eigen/doc/examples\"",59],["\"/home/cmeon/SimplexLP/eigen/unsupported/test\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../unsupported\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../test\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../Eigen\"",82],["\"/home/cmeon/SimplexLP/eigen/doc/snippets\"",238],["\"/home/cmeon/SimplexLP/eigen/test\"",552]],"useCount":2210},{"word":"Ss","context":[["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",716],["ELSEIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",714],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",76],["if(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee]|[Nn][Oo][Nn][Ee]|)$\")",59],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee]|[Nn][Oo][Nn][Ee]|)$\")",59],["endif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",59],["IF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",59],["ENDIF(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",59]],"useCount":2985},{"word":"Studio","context":[["# On Visual Studio and Borland compilers Boost headers request automatic",45],["# create vcproj.user file for Visual Studio to set debug working directory",42],["# since CMake  to creates a Visual Studio project for each tiny test.",39],["if (CMAKE_GENERATOR MATCHES \"Visual Studio\")",69],["IF(CMAKE_GENERATOR MATCHES \"Visual Studio\")",59],["if(CMAKE_GENERATOR MATCHES \"Visual Studio\")",269],["# Visual Studio compiler output",38],["# supported since Visual Studio C++ 6.0",38],["# disable warnings in Visual Studio 8 and above if not wanted",37],["if(${CMAKE_GENERATOR} MATCHES \"Visual Studio\")",36]],"useCount":2708},{"word":"System","context":[["${CMAKE_IOS_SDK_ROOT}/System/Library/Frameworks",87],["\"System/sourceInc\"",71],["\"System/endfInc\"",71],["/System/Library/Frameworks",79],["# On versions < 1.35, remove the System library from the considered list",80],["#            TriBITS: Tribal Build, Integrate, and Test System",231],["\"/System/Library/Frameworks/GLUT.framework/Headers\"",109],["\"/System/Library/Frameworks/OpenGL.framework\"",106],["# System type affects version_compile_os variable",92],["${CMAKE_IOS_SDK_ROOT}/System/Library/PrivateFrameworks",87]],"useCount":3776},{"word":"TARGET","context":[["cotire_copy_set_properites(\"${_configurations}\" TARGET ${_target} ${_unityTargetName}",256],["if(TARGET ${_expectedTarget})",198],["if(NOT TARGET ${_expectedTarget})",198],["ADD_CUSTOM_COMMAND(TARGET ${_targetname} POST_BUILD",189],["set_property(TARGET ${target_name} APPEND_STRING PROPERTY",145],["if(NOT TARGET ${t})",609],["elseif(TARGET ${library})",586],["TARGET",224],["set_property(TARGET Qt5::${Plugin} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${Configuration})",214],["TARGET ${target}",138]],"useCount":18632},{"word":"TARGET_NAME","context":[["#      TARGET_NAME - name of target to burn",52],["SET(TARGET_LABEL \"${TARGET_DEFAULT_LABEL_PREFIX} ${TARGET_NAME}\")",57],["add_custom_command (TARGET ${TARGET_NAME} POST_BUILD",52],["if (TARGET ${TARGET_NAME})",52],["# All variables need to be prefixed with the target name (${TARGET_NAME}_${OPTION}).",80],["SET(TARGET_TARGETNAME \"${TARGET_DEFAULT_PREFIX}${TARGET_NAME}\")",58],["#        TARGET_NAME - Target name",58],["DEPENDS ${TARGET_NAME})",79],["#      TARGET_NAME - target name",79],["add_custom_command(TARGET ${TARGET_NAME} POST_BUILD",96]],"useCount":3219},{"word":"THE","context":[["# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE",636],["# RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY",397],["# NEITHER THE UNITED STATES GOVERNMENT, NOR THE UNITED STATES DEPARTMENT",397],["# NEITHER THE UNITED STATES GOVERNMENT, NOR THE UNITED STATES DEPARTMENT",397],["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",128],["# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR",91],["# ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE",68],["# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE",58],["# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY",36],["# DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY",28]],"useCount":2284},{"word":"TODO","context":[["# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.",47],["## TODO ... ? or does it work out of the box",46],["# TODO at least Boost_DEBUG here?",52],["set(EXPLICITLINK \"no\") #TODO",57],["# TODO: handle /MT and static lib",65],["# TODO:",70],["# TODO sanitize",90],["# TODO: check if .so file exists before the renaming",91],["# TODO",181],["# TODO: look for right fix",109]],"useCount":2576},{"word":"TOUPPER","context":[["STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)",98],["STRING(TOUPPER \"CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}\" _flags_var_name)",79],["string(TOUPPER ${config} config_upper)",355],["string(TOUPPER ${COMPONENT} UPPERCOMPONENT)",205],["string(TOUPPER \"${build_configuration}\" build_configuration)",198],["string (TOUPPER \"${_config}\" _upperConfig)",190],["string(TOUPPER ${COMPONENT} COMPONENT)",120],["string(TOUPPER ${FIND_SFML_COMPONENT} FIND_SFML_COMPONENT_UPPER)",103],["string(TOUPPER \"${var}\" VAR)",93],["STRING(TOUPPER ${COMPONENT} COMPONENT)",84]],"useCount":4308},{"word":"TRUE","context":[["set(CTEST_DROP_SITE_CDASH TRUE)",473],["# all listed variables are TRUE",2436],["# if all listed variables are TRUE",786],["if(NOT \"\" STREQUAL \"TRUE\")",605],["set(CMAKE_CXX_ABI_COMPILED TRUE)",309],["set(CMAKE_C_ABI_COMPILED TRUE)",321],["set(CMAKE_C_COMPILER_WORKS TRUE)",345],["set(CMAKE_CXX_COMPILER_WORKS TRUE)",341],["SET(CPACK_COMPONENT_UNSPECIFIED_HIDDEN \"TRUE\")",371],["SET(CPACK_COMPONENT_UNSPECIFIED_REQUIRED \"TRUE\")",371]],"useCount":31307},{"word":"TYPE","context":[["set_property(CACHE ${v} PROPERTY TYPE STRING)",45],["get_property(_type CACHE ${v} PROPERTY TYPE)",45],["get_target_property(DOC_TARGET doc TYPE)",51],["file(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/OGRE/Samples\" TYPE SHARED_LIBRARY FILES",172],["FILE(INSTALL DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib\" TYPE SHARED_LIBRARY FILES",172],["get_target_property(_targetType ${_target} TYPE)",166],["set_property(CACHE ${v} PROPERTY TYPE PATH)",45],["GET_TARGET_PROPERTY(target_type ${target} TYPE)",129],["GET_TARGET_PROPERTY(_targetType ${_PCH_current_target} TYPE)",94],["get_property(type TARGET ${TARGET_LIBRARY} PROPERTY TYPE)",56]],"useCount":2304},{"word":"Targets","context":[["# IMPORTED Targets",73],["EXPORT ${PROJECT_NAME}Targets",12],["#       * Targets:",16],["# Imported Targets",18],["#    [DEPENDS projects...]       # Targets on which the project depends",21],["# Targets:",33],["#   Targets that this library depends on.",60],["# Targets to which this target links.",10677]],"useCount":10910},{"word":"Test","context":[["message(STATUS \"Performing Test ${VAR}\")",48],["set(${VAR} 1 CACHE INTERNAL \"Test ${VAR}\")",49],["set(${VAR} \"\" CACHE INTERNAL \"Test ${VAR}\")",51],["#            TriBITS: Tribal Build, Integrate, and Test System",231],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Test\")",59],["# Test for endianess",93],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Test\")",59],["# AClass::ANamespace, ANamespace::*Test",75],["# Test this combination of libraries.",90],["# Test program returns 0 (down) or 1 (up).",92]],"useCount":2642},{"word":"Testfile","context":[["# CMake generated Testfile for",2420]],"useCount":2420},{"word":"The","context":[["# The corresponding makefile is:",1373],["# The C and CXX include file search paths:",935],["# The set of languages for which implicit dependencies are needed:",10677],["# The set of files for implicit dependencies of each language:",10677],["# The include file search paths:",7746],["# The C and CXX include file regular expressions for this directory.",2244],["# The default value is: NO.",1874],["# The generator used is:",1373],["# The default value is: YES.",1098],["# The top level Makefile was generated from the following files:",1373]],"useCount":76248},{"word":"This","context":[["#   This file is part of FreeFOAM.",392],["# This file is part of the CMake build system for OGRE",449],["# This tag requires that the tag HAVE_DOT is set to YES.",557],["#   This file is part of ccFOAM.",794],["# This module defines the following variables:",388],["# This file includes the relevent testing commands required for",1153],["# This file includes the relevant testing commands required for",1214],["# This module defines",3013],["## This file is part of the deal.II library.",474],["# This tag requires that the tag GENERATE_HTML is set to YES.",546]],"useCount":37797},{"word":"To","context":[["# (To distribute this file outside of CMake, substitute the full",3976],["# omitted =1 is assumed. To prevent a macro definition from being",59],["# To create a documentation set, doxygen will generate a Makefile in the",54],["# To support mixing linking in static and dynamic libraries, link each",49],["# output files in an output format independent way. To create the layout file",43],["# Note: To get rid of all source code in the generated output, make sure also",59],["# To disable the ambiguous behavior, the user need only",66],["# before the specified paths. To search non-standard paths first,",70],["# By default, the dynamic libraries of SFML will be found. To find the static ones instead,",103],["# (To distributed this file outside of CMake, substitute the full",586]],"useCount":6795},{"word":"True","context":[["#  GETTEXT_FOUND: True if gettext has been found.",46],["set(PACKAGE_VERSION_EXACT True)",60],["set (IOS True)",80],["set (APPLE True)",82],["set( BUILD_WITH_ANDROID_NDK True )",139],["set (UNIX True)",89],["set(PACKAGE_VERSION_COMPATIBLE True)",120],["set( ANDROID True )",139],["set( BUILD_ANDROID True )",138],["set( BUILD_WITH_STANDALONE_TOOLCHAIN True )",136]],"useCount":2884},{"word":"Try","context":[["# Try to get some hints from pkg-config, if available",66],["message(FATAL_ERROR \"Cannot find libuuid. Try installing uuid-dev or the appropriate packages for your platform\")",65],["# - Try to find OGRE",60],["# - Try to find Eigen3 lib",120],["# Try to find GLEW library and include path.",109],["# - Try to find the OpenSSL encryption library",67],["set( ANDROID_NDK_HOST_X64 1 CACHE BOOL \"Try to use 64-bit compiler toolchain\" )",107],["# Try to find Boost by stepping backwards through the Boost versions",90],["# - Try to find OpenCL",81],["# - Try to find Iconv",58]],"useCount":3351},{"word":"UNIX","context":[["elseif (UNIX)",501],["endif (UNIX)",377],["if (UNIX)",824],["elseif(UNIX)",402],["IF(UNIX)",1314],["if(UNIX)",1315],["set(UNIX 1)",782],["ENDIF(UNIX)",748],["if( UNIX )",409],["SET( UNIX )",596]],"useCount":12631},{"word":"URL","context":[["URL ${CMAKE_SOURCE_DIR}/core/lzma/src/xz-${lzma_version}.tar.gz",44],["URL ${CMAKE_SOURCE_DIR}/core/lzma/src/xz-${lzma_version}-win32.tar.gz",44],["set(repository \"external project URL\")",31],["URL ${CMAKE_SOURCE_DIR}/core/pcre/src/pcre-${pcre_version}.tar.gz",36],["/* Bug report URL. */",36],["URL ${CMAKE_SOURCE_DIR}/graf2d/freetype/src/freetype-${freetype_version}.tar.gz",36],["\"Additional URL templates for the ExternalData CMake script to look for testing data. E.g.",33],["URL",1744],["set(location_args URL ${${proj}_URL})",65],["#   URL: home page",27]],"useCount":2687},{"word":"UTIL","context":[["\"/home/einstein/openairinterface5g/openair2/UTIL/OCG\"",240],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair2/UTIL/LOG\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OMV\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/FIFO\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OSA\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/LISTS\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/MEM\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OMG\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OPT\"",240]],"useCount":4195},{"word":"Unix","context":[["SET(CPACK_CMAKE_GENERATOR \"Unix Makefiles\")",293],["set(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")",405],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227],["# additional Unix paths (FreeBSD, etc).",436],["SET(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")",940],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.3",212],["# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms",168],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2",152],["# include the math library for Unix",132]],"useCount":7720},{"word":"Unspecified","context":[["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" MATCHES \"^(Unspecified)$\")",55],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["ENDIF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",12352],["if(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",1823],["if(\"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\" OR NOT CMAKE_INSTALL_COMPONENT)",189],["\"\tcd $(BUILDDIR); cmake -DCOMPONENT=Unspecified -DCMAKE_INSTALL_PREFIX=../debian/tmp/usr -P cmake_install.cmake\\n\"",11],["# CMake always generates a component named \"Unspecified\", which is",22],["#   -everything except the development files: cmake -DCOMPONENT=Unspecified -P cmake_install.cmake",16],["IF(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" MATCHES \"^(Unspecified)$\")",55]],"useCount":26875},{"word":"Usage","context":[["# Usage of this module as follows:",224],["# Usage:",1586],["# Example Usage:",143],["# Usage",178],["#  Usage Windows:",146],["#  Usage Linux:",147],["# Usage::",134],["#\tUsage:",88],["#  Usage Linux (using standalone toolchain):",76],["#  Usage from an external project:",73]],"useCount":3232},{"word":"Use","context":[["message(\"* Use coreside debug     : Yes\")",115],["message(\"* Use coreside debug     : No  (default)\")",115],["system         -> Use the default minimal system C++ runtime library.",113],["#        system         -> Use the default minimal system C++ runtime library.",111],["# Use pkg-config to get hints about paths",321],["gabi++_shared  -> Use the GAbi++ runtime as a shared library.",111],["stlport_shared -> Use the STLport runtime as a shared library.",111],["#        system_re      -> Use the default minimal system C++ runtime library.",111],["stlport_static -> Use the STLport runtime as a static library.",111],["gabi++_static  -> Use the GAbi++ runtime as a static library.",111]],"useCount":6301},{"word":"VAR","context":[["string(TOUPPER \"${var}\" VAR)",93],["set(${VAR} \"\")",1217],["set(ENV_${VAR} $ENV{${VAR}})",83],["list(APPEND ${VAR} \"${lib}\")",1182],["list(APPEND ${VAR} \"${lib}${CATKIN_BUILD_CONFIGURATION_KEYWORD_SEPARATOR}${library}\")",588],["macro(_pack_libraries_with_build_configuration VAR)",586],["\"-D${VAR} ${CMAKE_REQUIRED_FLAGS}\")",101],["macro(_unpack_libraries_with_build_configuration VAR)",586],["macro(getenv_path VAR)",83],["set(ENV_${VAR} $ENV{${VAR}})",83]],"useCount":8954},{"word":"VARIABLE","context":[["IF(${VARIABLE})",96],["if(${VARIABLE})",106],["try_compile(${VARIABLE}",85],["ELSE(${VARIABLE})",86],["#  VARIABLE - variable to store the result",86],["TRY_COMPILE(${VARIABLE}",80],["ENDIF(${VARIABLE})",101],["ENDIF(\"${VARIABLE}\" MATCHES \"^${VARIABLE}$\")",63],["IF(\"${VARIABLE}\" MATCHES \"^${VARIABLE}$\")",65],["IF(\"${VARIABLE}\" MATCHES \"^${VARIABLE}$\")",65]],"useCount":2503},{"word":"VERBATIM","context":[["add_custom_target(\"${_targetName}\" WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\" VERBATIM)",46],["DEPENDS ${_infile} VERBATIM)",34],["VERBATIM",1149],["VERBATIM)",1014],["VERBATIM )",157],["COMMENT \"Generating API documentation with Doxygen\" VERBATIM",32],["DEPENDS ${_infile} VERBATIM",30],["WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\" VERBATIM)",29],["VERBATIM # recommended: p260",25],["SET(verbatim \"VERBATIM\")",24]],"useCount":2902},{"word":"VERSION","context":[["VERSION",1764],["cmake_minimum_required(VERSION 2.8)",255],["cmake_minimum_required(VERSION \"2.8\")",113],["#define VERSION \"@VERSION@\"",99],["STRING(REGEX REPLACE \"^.*-ndb-\" \"\" NDBVERSION \"${VERSION}\")",109],["elseif (${arg} STREQUAL \"VERSION\")",243],["CMAKE_MINIMUM_REQUIRED(VERSION 2.8)",222],["cmake_policy(VERSION \"2.8\")",113],["cmake_policy(VERSION 2.6)",205],["cmake_minimum_required( VERSION 2.6.3 )",139]],"useCount":10262},{"word":"VERSION_LESS","context":[["if (CMAKE_VERSION VERSION_LESS 2.8.3)",225],["if(CUDA_VERSION VERSION_LESS \"3.0\")",250],["if (NOT \"${_compilerVersion}\" VERSION_LESS \"13.1.0\")",272],["if(${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION} VERSION_LESS 1.34)",156],["if( CMAKE_VERSION VERSION_LESS 2.8.5 )",142],["if(CMAKE_VERSION VERSION_LESS 2.8.12)",110],["if( NOT ANDROID_COMPILER_VERSION VERSION_LESS \"4.6\" )",107],["if(${EIGEN3_VERSION} VERSION_LESS ${Eigen3_FIND_VERSION})",100],["else(${EIGEN3_VERSION} VERSION_LESS ${Eigen3_FIND_VERSION})",95],["endif(${EIGEN3_VERSION} VERSION_LESS ${Eigen3_FIND_VERSION})",95]],"useCount":4010},{"word":"Version","context":[["# Version",67],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.6",83],["X-KDevelop-Version=@KDEV_PLUGIN_VERSION@",98],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.5",122],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.4",128],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2",152],["/* Version number of package */",183],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.3",212]],"useCount":5732},{"word":"Visual","context":[["if(CMAKE_GENERATOR MATCHES Visual*)",64],["# CMake 2.8 changes Visual Age's compiler ID to \"XL\".",52],["if(CMAKE_GENERATOR MATCHES \"Visual Studio\")",269],["# create vcproj.user file for Visual Studio to set debug working directory",42],["# On Visual Studio and Borland compilers Boost headers request automatic",45],["# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:",74],["if (CMAKE_GENERATOR MATCHES \"Visual Studio\")",69],["endif(CMAKE_GENERATOR MATCHES Visual*)",63],["IF(CMAKE_GENERATOR MATCHES \"Visual Studio\")",59],["# Until version 9.0, Visual Age doesn't define a macro to indicate",52]],"useCount":3256},{"word":"WARNING","context":[["message(WARNING \"${__cvcomponent} is required but was not found\")",41],["message(WARNING \"Unable to find MPI library ${LIB}\")",42],["FAIL_REGEX \"WARNING: unknown flag:\"                    # Open64",48],["message(\" *** WITHOUT_GIT - WARNING!\")",53],["message(\" *** NOJEM - WARNING!\")",53],["message(WARNING \"--host-compilation flag is deprecated in CUDA version >= 3.0.  Removing --host-compilation C flag\" )",59],["message(WARNING \"Path to your Android NDK (or toolchain) has non-alphanumeric symbols.\\nThe build might be broken.\\n\")",103],["message( WARNING \"Could not determine machine name for compiler from ${_root}\" )",112],["message(WARNING",143],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652]],"useCount":3905},{"word":"WIN32","context":[["endif (WIN32)",872],["if(NOT WIN32)",729],["ELSE(WIN32)",886],["ENDIF (WIN32)",889],["if(WIN32)",5089],["IF (WIN32)",1233],["endif(WIN32)",1323],["if (WIN32)",3149],["IF(WIN32)",2568],["ENDIF(WIN32)",1919]],"useCount":30606},{"word":"WORKING_DIRECTORY","context":[["WORKING_DIRECTORY ${CMAKE_BINARY_DIR}",629],["WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}",622],["WORKING_DIRECTORY \\\"${work_dir}/${src_name}\\\"",171],["WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"",453],["WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}",357],["WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}",292],["WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"",270],["WORKING_DIRECTORY",383],["WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}",209],["WORKING_DIRECTORY \\\"${work_dir}\\\"",237]],"useCount":8345},{"word":"WRITE","context":[["file(WRITE \"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/.catkin\" \"\")",114],["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/android.toolchain.config.cmake\" \"${__toolchain_config}\" )",125],["file(WRITE ${script_filename}",131],["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/cvt83.cmd\" \"@echo %~s1\" )",102],["file(WRITE ${test_file}",100],["file (WRITE \"${_file}\" \"${_contents}\")",76],["file(WRITE \"${CMAKE_BINARY_DIR}/arch.c\" \"${archdetect_c_code}\")",51],["file(WRITE ${check_src} \"int main() {",50],["FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/pch_dummy.cpp ${_dummy_str})",45],["file(WRITE ${dependency_file} \"#FindCUDA.cmake generated file.  Do not edit.\\n\")",132]],"useCount":3125},{"word":"We","context":[["# We won't actually use these variables for now, but we need to set this, in",198],["# Now we need to build up our command string.  We are accounting for quotes",198],["# defined in the generating passes of nvcc invokation.  We will go ahead and manually",192],["# We should call this function again since hunter_add_package is include-like",132],["# location did.  We will find a new one based on the new inputs.",92],["# We were unable to find some libraries, so generate a sensible",94],["# Avoid finding the .dll in the PATH.  We want the .lib.",105],["# We must run the following at \"include\" time, not at function call time,",115],["# We need to be careful here and this extra loop because including files will effect THIS_SRC_DIR!!!!",116],["# We need to set the linker language based on what the expected generated file",130]],"useCount":5461},{"word":"When","context":[["# When a file name is specified after GENERATE_TAGFILE, doxygen will create",63],["# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that",54],["# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the",54],["# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum",56],["# This flag is only useful for Objective-C code. When set to YES local",59],["# When the SERVER_BASED_SEARCH tag is enabled the search engine will be",60],["# When Google Test is built as a shared library, it should also use",45],["# with name TypeT. When disabled the typedef will appear as a member of a file,",76],["# locations. When an earlier FIND_* succeeds, subsequent FIND_*s",70],["# hard-to-find crashes. When it is built as a static library, it is",50]],"useCount":2534},{"word":"Windows","context":[["SET(CMAKE_SYSTEM_NAME Windows)",287],["if(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")",138],["#  Usage Windows:",146],["set(CMAKE_SYSTEM_NAME Windows)",148],["# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms",168],["# For Windows and Mac, don't need to explicitly include the math library",131],["# Windows Intel options used",102],["/* Windows stuff, mostly functions, that have Posix analogs but named differently */",88],["# in case and if your file system supports case sensitive file names. Windows",84],["# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:",74]],"useCount":7040},{"word":"Wl","context":[["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--fix-cortex-a8\" )",111],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined -Wl,-rpath-link,${ANDROID_SYSROOT}/usr/lib\" )",103],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined -Wl,-rpath-link,${ANDROID_SYSROOT}/usr/lib\" )",103],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,noexecstack\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-allow-shlib-undefined\" )",134],["set( CMAKE_EXE_LINKER_FLAGS    \"-Wl,-z,nocopyreloc\"      CACHE STRING \"executable linker flags\" )",110],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--gc-sections\" )",110]],"useCount":4000},{"word":"X","context":[["# Linux / Mac OS X Intel options used",102],["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111],["# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms",168],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["# module, but with modifications to recognize OS X frameworks and",189],["# this module will try to find on your behalf.) Also for OS X, this",226],["# Non-OS X framework versions expect you to also dynamically link to",233],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# Added new modifications to recognize OS X frameworks and",246]],"useCount":4900},{"word":"X11","context":[["/usr/X11/include",95],["# On Unix OpenGL most certainly always requires X11.",54],["find_package(X11 QUIET)",63],["find_sfml_dependency(X11_LIBRARY \"X11\" X11)",69],["find_sfml_dependency(X11_LIBRARY \"X11\" X11)",69],["/usr/local/X11",84],["find_package(X11 REQUIRED)",113],["find_package(X11)",114],["/usr/include/X11",130],["\"/usr/include/X11\"",179]],"useCount":2682},{"word":"YES","context":[["# The default value is: YES.",1098],["# This tag requires that the tag HAVE_DOT is set to YES.",557],["# This tag requires that the tag GENERATE_HTML is set to YES.",546],["# This tag requires that the tag GENERATE_LATEX is set to YES.",316],["#     Mandatory : YES",172],["#  * Mandatory : YES",166],["# This tag requires that the tag GENERATE_QHP is set to YES.",147],["# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.",147],["ENABLE_PREPROCESSING   = YES",126],["# This tag requires that the tag GENERATE_HTMLHELP is set to YES.",126]],"useCount":25047},{"word":"You","context":[["# dynamic Boost library, the default is to do a static link.  You",89],["# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard",84],["#     You need native port of make to build your project.",136],["You should either set an environment variable:",138],["# Each component is separate and you must opt in to each module. You must",159],["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["You need to either upgrade to newer NDK or manually copy",113],["You are strongly recommended to switch to another NDK release.",109],["# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.",93]],"useCount":3382},{"word":"Za","context":[["REGEX \"^#  (  \\\\[[A-Z0-9_]+ [^]]*\\\\] +#.*$|[A-Za-z0-9_]+\\\\()\")",20],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385],["STRING(REGEX MATCH \"^/|([A-Za-z]:/)\" _ABS_PATH_INDICATOR \"${_RC_FILE}\")",65],["string (REGEX MATCHALL \"COTIRE_[A-Za-z0-9_]+\" _matchVars \"${_vars}\")",38],["string(REGEX MATCHALL \"TEST_?F?\\\\(([A-Za-z_0-9 ,]+)\\\\)\" found_tests ${contents})",18],["if(\"${line}\" MATCHES \"^#  [A-Za-z0-9_]+\\\\(\")",19],["if(${LLVM_VERSION_STRING} MATCHES \"^3\\\\.[0-4][\\\\.0-9A-Za-z]*\")",26],["string(REGEX REPLACE \".*\\\\( *([A-Za-z_0-9]+), *([A-Za-z_0-9]+) *\\\\).*\" \"\\\\1.\\\\2\" test_name ${hit})",25],["string(REGEX REPLACE \".*\\\\( *([A-Za-z_0-9]+), *([A-Za-z_0-9]+) *\\\\).*\" \"\\\\1.\\\\2\" test_name ${hit})",25]],"useCount":8536},{"word":"_","context":[["#              |_|  |_|  \\___|\\___|  |_|   \\____/_/    \\_\\_|  |_|",392],["#              |_|  |_|  \\___|\\___|  |_|   \\____/_/    \\_\\_|  |_|",392],["#              |  __| '__/ _ \\/ _ ( (| |) ) |  | |/ /\\ \\ | |\\/| |",392],["#              | |  | | |  __/  __/\\_   _/| |__| / ____ \\| |  | |",392],["#              | |  | | |  __/  __/\\_   _/| |__| / ____ \\| |  | |",392],["#               ______                _     ____          __  __",392],["#              | |__ _ __ ___  ___ /     \\| |  | | /  \\  | \\  / |",392],["#              |_|  |_|  \\___|\\___|  |_|   \\____/_/    \\_\\_|  |_|",392],["#              |_|  |_|  \\___|\\___|  |_|   \\____/_/    \\_\\_|  |_|",392],["#              |_|  |_|  \\___|\\___|  |_|   \\____/_/    \\_\\_|  |_|",392]],"useCount":14170},{"word":"_DIR","context":[["if(DEFINED ${extProjName}_DIR AND NOT EXISTS ${${extProjName}_DIR})",106],["if(DEFINED ${extProjName}_DIR AND NOT EXISTS ${${extProjName}_DIR})",106],["BINARY_DIR ${${proj}_DIR}",52],["set( ${proj}_DIR ${CMAKE_BINARY_DIR}/${proj}-build )",35],["# The project is provided using ${extProjName}_DIR, nevertheless since other",148],["list(APPEND ${CMAKE_PROJECT_NAME}_SUPERBUILD_EP_VARS ${extProjName}_DIR:PATH)",131],["#  unset(${extProjName}_DIR CACHE)",131],["get_filename_component(_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",142],["message(\"USING the system ${extProjName}, set ${extProjName}_DIR=${${extProjName}_DIR}\")",128],["message(\"USING the system ${extProjName}, set ${extProjName}_DIR=${${extProjName}_DIR}\")",128]],"useCount":2309},{"word":"_FOUND","context":[["if (${PREFIX}_FOUND)",70],["SET(${_NAME_UPPER}_FOUND FALSE)",72],["SET(${PACKAGE_NAME}_FOUND \"TRUE\")",76],["set(${PREFIX}_FOUND TRUE)",84],["set (${PREFIX}_FOUND FALSE)",88],["if(NOT Boost_${COMPONENT}_FOUND)",100],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND TRUE)",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND FALSE)",101],["if (NOT ${PREFIX}_FOUND)",119],["if (NOT Qt5${_module_dep}_FOUND)",430]],"useCount":4951},{"word":"_IMPORT_CHECK_TARGETS","context":[["foreach(target ${_IMPORT_CHECK_TARGETS} )",142],["unset(_IMPORT_CHECK_TARGETS)",142],["list(APPEND _IMPORT_CHECK_TARGETS opencv_highgui )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_calib3d )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_flann )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_imgproc )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_features2d )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_stitching )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_photo )",81],["list(APPEND _IMPORT_CHECK_TARGETS opencv_videostab )",81]],"useCount":2231},{"word":"_LIBRARIES","context":[["#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT}",60],["SET(${PACKAGE_NAME}_LIBRARIES  \"\" )",85],["set(MPI_LIBRARIES_WORK \"MPI_${lang}_LIBRARIES-NOTFOUND\")",82],["message(STATUS \"Found ${PREFIX}: ${${PREFIX}_LIBRARIES}\")",68],["set(${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARY})",68],["set(Boost_${basename}_LIBRARIES       ${Boost_${basename}_LIBRARY_DEBUG})",64],["set(Boost_${basename}_LIBRARIES     ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARIES ${Boost_${basename}_LIBRARY_RELEASE} )",62],["# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.",61],["set(OGRE_${PLUGIN}_LIBRARIES ${OGRE_${PLUGIN}_LIBRARY})",61]],"useCount":3413},{"word":"_LIBRARY","context":[["find_library(${_prefix}_${_library}_LIBRARY",180],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY \"\")",101],["set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})",82],["mark_as_advanced(${_prefix}_${_library}_LIBRARY)",82],["set(FIND_SFML_MISSING \"${FIND_SFML_MISSING} SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY\")",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY       ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",91],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY debug     ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG}",91],["set(SFML_LIBRARIES ${SFML_LIBRARIES} \"${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY}\")",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY         ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",92],["MARK_AS_ADVANCED(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY",100]],"useCount":4569},{"word":"_LIBRARY_DEBUG","context":[["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",101],["Boost_${basename}_LIBRARY_DEBUG",97],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY debug     ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG}",91],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY         ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",92],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG OR SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG)",100],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG",101]],"useCount":3702},{"word":"_LIBRARY_RELEASE","context":[["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG)",100],["optimized ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["Boost_${basename}_LIBRARY_RELEASE",97],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG OR SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)",100],["SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})",101],["set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101]],"useCount":3827},{"word":"_NAME","context":[["set(VERSION_MSG \"Found unsuitable version \\\"${VERSION}\\\", but required is exact version \\\"${${_NAME}_FIND_VERSION}\\\"\")",49],["ENDIF (NOT ${_NAME}_FIND_QUIETLY)",46],["ADD_LIBRARY(${_NAME} ${PY_MODULE_TYPE} ${ARGN})",46],["IF(PYTHON_MODULE_${_NAME}_BUILD_SHARED)",73],["\"Add module ${_NAME} shared\" ${_TARGET_SUPPORTS_SHARED_LIBS})",63],["set_target_properties(${${prefix}_NAME}",63],["PYTHON_MODULE_${_NAME}_BUILD_SHARED)",59],["ENDIF(PYTHON_MODULE_${_NAME}_BUILD_SHARED)",57],["if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)",52],["IF (NOT ${_NAME}_FIND_QUIETLY)",48]],"useCount":3764},{"word":"__","context":[["#               ______                _     ____          __  __",392],["#              | |__ _ __ ___  ___ /     \\| |  | | /  \\  | \\  / |",392],["#              | |  | | |  __/  __/\\_   _/| |__| / ____ \\| |  | |",392],["#              |  __| '__/ _ \\/ _ ( (| |) ) |  | |/ /\\ \\ | |\\/| |",392],["#              |  ____|             _| |_  / __ \\   /\\   |  \\/  |",392],["#              | |  | | |  __/  __/\\_   _/| |__| / ____ \\| |  | |",392],["#              |  __| '__/ _ \\/ _ ( (| |) ) |  | |/ /\\ \\ | |\\/| |",392],["#              | |__ _ __ ___  ___ /     \\| |  | | /  \\  | \\  / |",392],["#               ______                _     ____          __  __",392],["#              | |  | | |  __/  __/\\_   _/| |__| / ____ \\| |  | |",392]],"useCount":4178},{"word":"__availableToolchains","context":[["list( LENGTH __availableToolchains __availableToolchainsCount )",136],["set( __availableToolchains \"standalone\" )",136],["if( NOT __availableToolchains )",247],["unset( __availableToolchains )",136],["__GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst \"${ANDROID_NDK_TOOLCHAINS_SUBPATH}\" )",210],["if( __availableToolchains )",282],["if( NOT __availableToolchains AND NOT ANDROID_NDK_TOOLCHAINS_SUBPATH STREQUAL ANDROID_NDK_TOOLCHAINS_SUBPATH2 )",208],["__GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst \"${ANDROID_NDK_TOOLCHAINS_SUBPATH2}\" )",208],["list( GET __availableToolchains ${__toolchainIdx} ANDROID_TOOLCHAIN_NAME )",136],["list( FIND __availableToolchains \"${ANDROID_TOOLCHAIN_NAME}\" __toolchainIdx )",136]],"useCount":2385},{"word":"__cmd","context":[["set( __cmd \"${CMAKE_CXX_CREATE_SHARED_LIBRARY}\" )",104],["string( REPLACE \"<CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS>\" \"-shared\" __cmd \"${__cmd}\" )",104],["execute_process( COMMAND ${__cmd} RESULT_VARIABLE __cmd_result OUTPUT_QUIET ERROR_QUIET )",104],["string( REPLACE \"<LINK_FLAGS>\" \"${CMAKE_SHARED_LINKER_FLAGS}\" __cmd \"${__cmd}\" )",104],["string( REPLACE \"${__tmp}\" \"${${__var}}\" __cmd \"${__cmd}\")",104],["string( REPLACE \"<LINK_FLAGS>\" \"${CMAKE_SHARED_LINKER_FLAGS}\" __cmd \"${__cmd}\" )",104],["string( REPLACE \"${__tmp}\" \"${${__var}}\" __cmd \"${__cmd}\")",104],["string( REPLACE \"<CMAKE_SHARED_LIBRARY_CXX_FLAGS>\" \"${CMAKE_CXX_FLAGS}\" __cmd \"${__cmd}\" )",104],["string( REPLACE \"<CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS>\" \"-shared\" __cmd \"${__cmd}\" )",104],["string( REPLACE \"<TARGET_SONAME>\" \"\" __cmd \"${__cmd}\" )",104]],"useCount":3222},{"word":"__libstl","context":[["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib/${CMAKE_SYSTEM_PROCESSOR}\" )",112],["if( __libstl )",112],["set( __libsupcxx \"${__libstl}/libsupc++.a\" )",112],["set( __libstl    \"${__libstl}/libstdc++.a\" )",112],["set( __libstl    \"${__libstl}/libstdc++.a\" )",112],["set( __libstl                \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libstdc++.a\" )",112],["if( EXISTS \"${__libstl}\" OR EXISTS \"${__libsupcxx}\" )",112],["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib/thumb/libgnustl_shared.so\" )",112],["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib/thumb\" )",112],["set( __libstl \"${ANDROID_STANDALONE_TOOLCHAIN}/${ANDROID_TOOLCHAIN_MACHINE_NAME}/lib\" )",112]],"useCount":3196},{"word":"__var","context":[["elseif( DEFINED ${__var} )",136],["foreach( __var ${ARGN} )",272],["if( DEFINED ${__var} )",138],["set( __value \"${${__var}}\" )",136],["set( __value \"${__var}\" )",136],["string( REPLACE \"ENV_\" \"\" __var \"${__var}\" )",136],["set( __value \"$ENV{${__var}}\" )",136],["if( __var MATCHES \"^ENV_.*$\" )",136],["string( REPLACE \"ENV_\" \"\" __var \"${__var}\" )",136],["if( __var STREQUAL \"VALUES\" )",136]],"useCount":3161},{"word":"_argn","context":[["set(_argn ${ARGN})",610],["list(LENGTH _argn _count)",589],["list(GET _argn ${_index} library)",589],["list(GET _argn ${_index} lib)",588]],"useCount":2376},{"word":"_boost_COMPILER","context":[["set(_boost_COMPILER \"-mgw${_boost_COMPILER_VERSION}\")",64],["set (_boost_COMPILER \"-iw\")",80],["set (_boost_COMPILER \"-il\")",80],["set(_boost_COMPILER \"-vc6\") # yes, this is correct",64],["set(_boost_COMPILER \"-sw\")",74],["set(_boost_COMPILER ${Boost_COMPILER})",80],["\"using user-specified Boost_COMPILER = ${_boost_COMPILER}\")",80],["\"guessed _boost_COMPILER = ${_boost_COMPILER}\")",80],["set(_boost_COMPILER \"\")",181],["\"guessed _boost_COMPILER = ${_boost_COMPILER}\")",80]],"useCount":2413},{"word":"_file","context":[["get_filename_component(_fileName \"${_file}\" NAME)",68],["foreach ( _file ${_ARG_DEFAULT_ARGS} )",72],["if (EXISTS \"${_file}\")",57],["ENDFOREACH(_file)",52],["FILE(REMOVE ${_file})",123],["ENDIF (EXISTS ${_file})",120],["foreach (_file ${_files})",81],["file (WRITE \"${_file}\" \"${_contents}\")",76],["IF (EXISTS ${_file})",128],["if ( IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/${_file}\" )",72]],"useCount":2371},{"word":"_flags","context":[["if (_flags)",608],["set (_flags \"\")",166],["set (${_flagsVar} ${_flags} PARENT_SCOPE)",114],["set (_flags ${${_flagsVar}})",114],["\"${_prefixFile}\" \"${_pchFile}\" _flags)",113],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106],["# flags given by _flags.  If the combination of libraries is found and passes",103],["list (APPEND _flags /nologo \"${_sourceFileType${_language}}\"",72],["set (_flags \"${_flags} /Wpch-messages\")",68],["list (APPEND _flags \"-Wpch-messages\")",68]],"useCount":3820},{"word":"_index","context":[["if (_index GREATER -1)",172],["list(GET _argn ${_index} lib)",588],["list(GET _argn ${_index} library)",589],["while(${_index} LESS ${_count})",592],["if(${_index} EQUAL ${_count})",598],["set(_index 0)",602],["list(FIND ${listname} ${_item} _index)",607],["if(_index EQUAL -1)",648],["math(EXPR _index \"${_index} + 1\")",1190],["math(EXPR _index \"${_index} + 1\")",1190]],"useCount":8639},{"word":"_item","context":[["foreach(_item ${ARGN})",617],["list(APPEND ${listname} ${_item})",607],["endforeach(_item)",60],["macro(cpack_optional_append _list _cond _item)",22],["endforeach (_item)",20],["foreach(_item ${_list})",50],["set(${_string} \"${${_string}} ${_item}\")",26],["set(${_output} ${${_output}} ${_item})",19],["list(FIND ${listname} ${_item} _index)",607],["set(${_list} ${${_list}} ${_item})",22]],"useCount":2112},{"word":"_language","context":[["set (_unityFileBaseName \"${_target}_${_language}${COTIRE_UNITY_SOURCE_FILENAME_SUFFIX}\")",102],["if (\"${_language}\" STREQUAL \"CXX\")",102],["if (NOT DEFINED _unityFileExt_${_language})",102],["get_property(_prefixFile TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER)",94],["\"${_language}\" \"${CMAKE_${_language}_COMPILER_ID}\" \"${COTIRE_${_language}_COMPILER_VERSION}\"",94],["foreach (_language ${_languages})",164],["cotire_determine_compiler_version(\"${_language}\" COTIRE_${_language}_COMPILER)",142],["cotire_determine_compiler_version(\"${_language}\" COTIRE_${_language}_COMPILER)",142],["if (WIN32 AND CMAKE_${_language}_COMPILER_ID MATCHES \"MSVC|Intel\")",136],["\"${_language}\" \"${CMAKE_${_language}_COMPILER_ID}\" \"${COTIRE_${_language}_COMPILER_VERSION}\"",94]],"useCount":8217},{"word":"_library","context":[["set(_combined_name ${_combined_name}_${_library})",86],["unset(${_library} CACHE)",66],["set(${_library} ${_boost_filepathreal} CACHE FILEPATH \"${_docstring}\")",66],["set(_libraries_work ${${_prefix}_${_library}_LIBRARY})",66],["function(_Boost_SWAP_WITH_REALPATH _library _docstring)",66],["set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})",82],["NAMES ${_library}",248],["mark_as_advanced(${_prefix}_${_library}_LIBRARY)",82],["foreach(_library ${_list})",85],["find_library(${_prefix}_${_library}_LIBRARY",180]],"useCount":2714},{"word":"_msg","context":[["set(_msg ON)",28],["macro(_FPHSA_FAILURE_MESSAGE _msg)",31],["set(_msg \"${_msg} ()\")",605],["message(FATAL_ERROR \"${_msg}\")",33],["if (NOT _msg)",38],["message(\"${_msg}\")",605],["cotire_check_precompiled_header_support(\"${_language}\" \"${_targetSourceDir}\" \"${_target}\" _msg)",19],["cotire_check_precompiled_header_support(\"${_language}\" \"${_target}\" _msg)",19],["set(_msg \"${_msg} ()\")",605],["message(STATUS \"${_msg}\")",45]],"useCount":2147},{"word":"_name","context":[["target_link_libraries(${_name} ${Boost_LIBRARIES})",91],["set(_full_name \"${_name}.${_extension}\")",65],["RELEASE_OUTPUT_NAME ${_name}${CMAKE_RELEASE_POSTFIX})",69],["set_target_properties(${_name} PROPERTIES",78],["set_target_properties(${_name} PROPERTIES LINK_FLAGS -Wl)",79],["set_target_properties(${_name} PROPERTIES LINK_FLAGS -Wl,--as-needed)",85],["GET_FILENAME_COMPONENT(_name ${_input} NAME)",175],["install(TARGETS ${_name}",106],["# combination using the name of a routine given by _name using the linker",103],["# _name Subsystem name.",90]],"useCount":7446},{"word":"_prefix","context":[["set(_libraries_work ${${_prefix}${_combined_name}_WORKS})",68],["set(_libraries_work ${${_prefix}_${_library}_LIBRARY})",66],["set (COTIRE_PREFIX_HEADER_FILENAME_SUFFIX \"_prefix\")",63],["check_function_exists(\"${_name}_\" ${_prefix}${_combined_name}_WORKS)",54],["find_library(${_prefix}_${_library}_LIBRARY",180],["# N.B. _prefix is the prefix applied to the names of all cached variables that",103],["set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})",82],["mark_as_advanced(${_prefix}_${_library}_LIBRARY)",82],["_pkgconfig_set(__pkg_config_checked_${_prefix} ${PKG_CONFIG_VERSION})",68],["mark_as_advanced(${_prefix}${_combined_name}_WORKS)",68]],"useCount":3158},{"word":"_prefixFile","context":[["function (cotire_precompile_prefix_header _prefixFile _pchFile _hostFile)",38],["if (_prefixFile)",135],["file (TO_NATIVE_PATH \"${_prefixFile}\" _prefixFileNative)",167],["set_property(TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER \"${_prefixFile}\")",38],["set_property (SOURCE \"${_prefixFile}\" PROPERTY GENERATED TRUE)",38],["set (_prefixSourceFile \"${_prefixFile}\")",48],["\"${_prefixFile}\" \"${_pchFile}\" _flags)",113],["cotire_prefix_header_to_source_file_path(${_language} \"${_prefixFile}\" _prefixSourceFile)",48],["get_property(_prefixFile TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER)",94],["set (_unparsedLinesFile \"${_prefixFile}.log\")",62]],"useCount":2206},{"word":"_sourceFiles","context":[["list (LENGTH _sourceFiles _numberOfSources)",150],["set (_sourceFiles ${ARGN})",322],["set (_sourceFiles \"\")",152],["set (_sourceFiles ${_option_UNPARSED_ARGUMENTS})",114],["set_property (SOURCE ${_sourceFiles} APPEND PROPERTY OBJECT_DEPENDS \"${_pchFile}\")",76],["foreach (_sourceFile ${_sourceFiles})",114],["if (_option_LANGUAGE AND _sourceFiles)",76],["if (_sourceFiles)",92],["set_source_files_properties(${_sourceFiles} PROPERTIES COTIRE_TARGET \"${_target}\")",106],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106]],"useCount":2251},{"word":"_state","context":[["set(_state \"installpath\")",221],["set(_state \"packages\")",243],["set(_state \"author\")",243],["set(_state \"version\")",243],["set(_state \"files\")",221],["set(_state \"use\")",243],["set(_state \"sourcepath\")",221],["set(_state \"classpath\")",199],["set(_state \"doctitle\")",221],["set(_state \"windowtitle\")",221]],"useCount":3140},{"word":"_target","context":[["get_target_property(_targetUsePCH ${_target} COTIRE_ENABLE_PRECOMPILED_HEADER)",159],["cotire_copy_set_properites(\"${_configurations}\" TARGET ${_target} ${_unityTargetName}",256],["get_target_property(_targetAddSCU ${_target} COTIRE_ADD_UNITY_BUILD)",114],["set_source_files_properties(${_sourceFiles} PROPERTIES COTIRE_TARGET \"${_target}\")",106],["set (_unityFileBaseName \"${_target}_${_language}${COTIRE_UNITY_SOURCE_FILENAME_SUFFIX}\")",102],["get_property(_prefixFile TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER)",94],["if (_target)",184],["get_target_property(_targetType ${_target} TYPE)",166],["get_target_property(_targetSourceFiles ${_target} SOURCES)",163],["cotire_get_target_export_symbol(\"${_target}\" _defineSymbol)",76]],"useCount":9022},{"word":"_targetName","context":[["ENDMACRO(GET_PRECOMPILED_HEADER_OUTPUT _targetName _input)",51],["SET(_PCH_current_target ${_targetName})",53],["# to do: test whether compiler flags match between target  _targetName",53],["MACRO(ADD_PRECOMPILED_HEADER_TO_TARGET _targetName _input _pch_output_to_use )",50],["MACRO(ADD_PRECOMPILED_HEADER _targetName _input)",49],["GET_TARGET_PROPERTY(oldProps ${_targetName} COMPILE_FLAGS)",92],["if (NOT TARGET \"${_targetName}\")",114],["cotire_init_target(\"${_targetName}\")",114],["SET_TARGET_PROPERTIES(${_targetName} PROPERTIES COMPILE_FLAGS \"${newProperties}\")",49],["MACRO(GET_PRECOMPILED_HEADER_OUTPUT _targetName _input _output)",51]],"useCount":2640},{"word":"_var","context":[["mark_as_advanced(${_var})",93],["set(${_var} FALSE)",109],["string( REGEX REPLACE \"${__ndkApiLevelRegex}\" \"\\\\1\" ${_var} \"${__apiFileContent}\" )",136],["macro( __DETECT_NATIVE_API_LEVEL _var _path )",136],["if(${_var})",98],["string( REPLACE \"-gcc\" \"\" ${_var} \"${__gccExeName}\" )",136],["macro( __DETECT_TOOLCHAIN_MACHINE_NAME _var _root )",136],["find_library(${_var}",155],["set(${_var} \"${out}\" PARENT_SCOPE)",198],["set( ${_var} \"\" )",248]],"useCount":5052},{"word":"a","context":[["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# append elements to a list if they are not already in the list",605],["# as a fall back for non-catkin libraries try to search globally",605],["# append elements to a list and remove existing duplicates from the list",586],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# warn when using a deprecated package",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# return as a flag string",599],["# pack a list of libraries with optional build configuration keywords",586]],"useCount":82534},{"word":"about","context":[["# Show infomation about the options selected during configuration",130],["# Use pkg-config to get hints about paths",321],["# Prints out extra information about the cuda file during compilation",65],["#Ignore warnings about POSIX deprecation",68],["# Ignore warnings about older, less secure functions",80],["# we know about.",90],["# output information about installation-directories and locations",123],["# get all the details about NDK",129],["# get all the details about standalone toolchain",129],["# output generic information about the core and buildtype chosen",121]],"useCount":3124},{"word":"absolute","context":[["#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk",132],["# be used to specify the location (absolute path including file name) of",62],["# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)",63],["# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.",65],["#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain",73],["# ROOT configured for use from the build tree - absolute paths are used.",73],["# The PERL_PATH should be the absolute path and name of the perl script",84],["#  all files are absolute paths or relative to the location of the qrc file",88],["#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk",132],["# keep build configuration keywords, target names and absolute libraries as-is",586]],"useCount":2499},{"word":"accompanying","context":[["# For custom build/install of openssl, see the accompanying README and",34],["# For details see the accompanying COPYING* file.",37],["# For details see the accompanying COPYING file.",35],["# see accompanying file COPYING-CMAKE-SCRIPTS for details.",51],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["# accompanying ADD_COMPILER_EXPORT_FLAGS() function.",18],["#        accompanying header file foo.h.",28]],"useCount":2803},{"word":"add","context":[["#   - add your source files to YOUR_SRCS",122],["# module will automatically add the -framework Cocoa on your behalf.",226],["# add dependencies to all check dependencies targets",173],["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["# use this to add preprocessor definitions",111],["# add to the global list of libraries",109],["# If using memchecker add tests without using scripts",106],["# exist at a later run. at that time we need to skip them, so that we don't add two",83],["# we need to add generated .cpp files to the sources (to compile them),",83],["#    In your CMakeLists.txt, add these lines:",73]],"useCount":8237},{"word":"add_custom_command","context":[["add_custom_command (TARGET ${_target} POST_BUILD",60],["add_custom_command(TARGET ${ANDROID_NAME}",65],["add_custom_command(APPEND",72],["add_custom_command(OUTPUT ${outfile}",75],["add_custom_command(TARGET ${TARGET_NAME} POST_BUILD",96],["add_custom_command(TARGET ${target}",97],["add_custom_command(TARGET ${target} POST_BUILD",105],["add_custom_command(TARGET tf_python_build_pip_package POST_BUILD",120],["add_custom_command (",339],["add_custom_command(",3733]],"useCount":6461},{"word":"add_custom_target","context":[["add_custom_target(${cuda_clean_target_name}",63],["add_custom_target(_bebop_msgs_generate_messages_check_deps_${_filename}",60],["add_custom_target(doc)",65],["add_custom_target(${target}",78],["add_custom_target(uninstall",111],["add_custom_target(${t})",605],["add_custom_target(install-${name}",57],["add_custom_target(buildtests)",51],["add_custom_target(${dictname} DEPENDS ${dictionary}.cxx)",47],["add_custom_target(",609]],"useCount":3550},{"word":"add_definitions","context":[["add_definitions( -DANDROID )",136],["add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)",79],["add_definitions(-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)",80],["add_definitions(\"-D_WIN64\")",84],["add_definitions(-DSCRIPTS)",112],["add_definitions(/arch:SSE2)",84],["add_definitions(-D_CRT_SECURE_NO_WARNINGS)",196],["add_definitions(",572],["add_definitions(-DSFML_STATIC)",100],["add_definitions(-DTRINITY_DEBUG)",100]],"useCount":5912},{"word":"add_dependencies","context":[["add_dependencies(bebop_msgs_generate_messages_py _bebop_msgs_generate_messages_check_deps_${_filename})",60],["add_dependencies(mavros_generate_messages_py _mavros_generate_messages_check_deps_${_filename})",39],["add_dependencies(mavros_generate_messages_cpp _mavros_generate_messages_check_deps_${_filename})",39],["add_dependencies( ${name} ${LLVM_COMMON_DEPENDS} )",41],["add_dependencies(",47],["add_dependencies(doc doxygen)",56],["add_dependencies(bebop_msgs_generate_messages_lisp _bebop_msgs_generate_messages_check_deps_${_filename})",60],["add_dependencies(bebop_msgs_generate_messages_cpp _bebop_msgs_generate_messages_check_deps_${_filename})",60],["add_dependencies(bebop_msgs_generate_messages_java _bebop_msgs_generate_messages_check_deps_${_filename})",60],["add_dependencies(${library} move_headers)",66]],"useCount":2473},{"word":"add_library","context":[["add_library(${name} ${type} ${ARGN})",57],["#    add_library(somelib someclass.cpp)",44],["add_library(${TARGET} OBJECT ${ARGN})",32],["add_library( ${library} SHARED ${lib_srcs})",35],["add_library(${dictionary}Dict MODULE ${gensrcdict})",36],["add_library(${_unityTargetName} ${_unityTargetSubType} EXCLUDE_FROM_ALL ${_unityTargetSources})",38],["add_library(${cuda_target} ${_cmake_options}",61],["#   add_library(somelib someclass.cpp)",72],["add_library(",172],["add_library(foo empty.cpp)",43]],"useCount":2440},{"word":"added","context":[["#     [+] added toolchain option to disable SWIG search",66],["#     [~] toolchain install directory is added to linker paths",65],["#     [+] added possibility to build with NDK (without standalone toolchain)",66],["#     [+] added platform \"armeabi-v7a with VFPV3\"",66],["#     [+] added compiler option to force \"char\" type to be signed",66],["#     [+] added toolchain option to compile to 32-bit ARM instructions",66],["# since it wasn't added until 1.35.",80],["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178]],"useCount":3987},{"word":"additional","context":[["# distributed with this work for additional information",186],["#      files. See additional details below.",73],["#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])",78],["# - Some additional usage instructions.",88],["#  git_describe(<var> [<additional arguments to git describe> ...])",71],["#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])",70],["option(WITH_COREDEBUG   \"Include additional debug-code in core\"                       0)",105],["# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed",69],["# MinGW needs an additional library, mwindows",230],["# additional Unix paths (FreeBSD, etc).",436]],"useCount":3420},{"word":"after","context":[["# Call this after you add all your CUDA targets, and you will get a convience",64],["# Search default search paths, after we search our own set of paths.",196],["# and other return variables are present after executing the process.",198],["# undo build configuration keyword merging after deduplication",586],["# The following are set after configuration is done:",163],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["list(SORT __availableToolchainsLst) # we need clang to go after gcc",108],["# it is a bad hack after all",95],["# documentation will contain sections that can be hidden and shown after the",77],["elseif( ANDROID_NDK_RELEASE_NUM GREATER 8002 ) # after r8b",69]],"useCount":4405},{"word":"again","context":[["# if they have then clear the cache variables, so that will be detected again.",63],["# order to force this file to be run again if it changes.",198],["# We should call this function again since hunter_add_package is include-like",132],["# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.",160],["# make the file regenerate again.",71],["# Always include this file to force CMake to run again next",71],["# if these are set then do not try to find them again,",68],["# and then again with no specified paths to search the default",70],["# build system to generate all the code again.",64],["# dependencies with components must be find_package()-ed again",605]],"useCount":2428},{"word":"against","context":[["#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)",66],["# SDL2_LIBRARY, the name of the library to link against",162],["# fight against cygwin",129],["# must link explicitly against boost.",92],["# Check the version of Boost against the requested version.",90],["# If you want to observe which libraries are being linked against",89],["# Check_Fortran_Function_Exists macro) whether can link against that library",78],["# test against internal check variable",68],["#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)",66],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178]],"useCount":3804},{"word":"all","context":[["but not all the files it references.",399],["# reasons because not all systems place things in SDL2/ (see FreeBSD).",199],["# Note that this will remove all occurances of -G.",191],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278],["# all listed variables are TRUE",2436],["# Dependency information for all targets:",1371],["# Loop over all imported files and verify that they actually exist",181],["# add dependencies to all check dependencies targets",173],["# get all the details about standalone toolchain",129],["# if all listed variables are TRUE",786]],"useCount":24356},{"word":"already","context":[["#     Android NDK r7 (and newer) already has make.exe on board.",70],["# in cache already",1278],["# append elements to a list if they are not already in the list",605],["# This is the list of host compilation flags.  It C or CXX should already have",198],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# Library is already found or was predefined",92],["# need to know the include dir already",90],["# skip if already processed during this run",76],["# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.",65],["#     Android NDK r7 (or newer) already has make.exe on board.",61]],"useCount":5128},{"word":"also","context":[["# if only the debug version was found, set the release variable also to the debug version",165],["# if only the release version was found, set the debug variable also to the release version",165],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["#    Also be aware that toolchain also sets configuration-specific compiler",111],["# include files and libraries are. It also determines what the name of",112],["# also opt into OpenGL and OpenThreads (and Producer if needed) as these",153],["# use also ssl and ssleay32 in debug as fallback for openssl < 0.9.8b",82],["# Non-OS X framework versions expect you to also dynamically link to",233],["# also defined, but not for general use are",608],["# For backward compatiblity the following variables are also set:",95]],"useCount":7647},{"word":"always","context":[["# need always fallback to older platform",129],["set(always 1)",119],["# no suffix for sfml-main, it is always a static library",103],["# OSX  executable are always PIC",92],["#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.",80],["# Since Boost is not always a required dependency we'll leave this",75],["#   BUILD_ANDROID : always TRUE",73],["#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code",72],["#   ANDROID : always TRUE",135],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136]],"useCount":3232},{"word":"an","context":[["You should either set an environment variable:",138],["# granted to it by virtue of its status as an intergovernmental organisation nor",163],["# $OSGDIR is an environment variable that would",153],["# $SDL2DIR is an environment variable that would",157],["# default FindOpenGL.cmake module doesn't work with your system as an",159],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["# $SDLDIR is an environment variable that would",175],["# Otherwise, it is assumed you are building an application and this",187],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["# MinGW needs an additional library, mwindows",230]],"useCount":13805},{"word":"and","context":[["# Redistribution and use in source and binary forms, with or without",2447],["# Redistribution and use in source and binary forms, with or without",2447],["# testing this directory and lists subdirectories to be tested as well.",2367],["# The C and CXX include file regular expressions for this directory.",2244],["# in the FIND_PATH() and FIND_LIBRARY() calls",577],["# use pkg-config to get the directories and then use these values",582],["# append elements to a list and remove existing duplicates from the list",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# documentation and/or other materials provided with the distribution.",770],["# The C and CXX include file search paths:",935]],"useCount":99033},{"word":"android","context":[["#    android-cmake toolchain searches for NDK/toolchain in the following order:",135],["export ANDROID_NDK=~/my-android-ndk",140],["#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"",135],["export ANDROID_STANDALONE_TOOLCHAIN=~/my-android-toolchain",134],["#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.",133],["#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake",133],["sudo ln -s ~/my-android-toolchain ${ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH}\" )",133],["string( REPLACE \"android-\" \"\" ANDROID_SUPPORTED_NATIVE_API_LEVELS \"${ANDROID_SUPPORTED_NATIVE_API_LEVELS}\" )",136],["#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..",206],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136]],"useCount":6221},{"word":"ans","context":[["ans(package_handle)",47],["ans(keys)",48],["ans(val)",45],["ans(uri)",45],["ans(project)",45],["ans(ast)",49],["ans(res)",1838],["ans(result)",79],["ans(path)",57],["ans(value)",54]],"useCount":3638},{"word":"any","context":[["#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version",74],["# member in the group (if any) for the other members of the group. By default",84],["# NOTE: this is not perfect yet, if you experience any issues",85],["# policies, either expressed or implied, of any organization.",93],["message( FATAL_ERROR \"Could not find any working toolchain in the NDK. Probably your Android NDK is broken.\" )",110],["# Remove any output file left over from previous test run",131],["#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>",135],["# does it submit to any jurisdiction.",163],["# Include dependent projects if any",227],["# by avoiding any try_compiles for the flags",68]],"useCount":5936},{"word":"app","context":[["# 模块类型变量; app(APPLICATION); lib(STATIC, SHARED);",81],["set(CMAKE_LINKER \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\")",84],["set(CMAKE_AR \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar\")",87],["set(CMAKE_RANLIB \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib\")",87],["set(CUDA_parse_cubin \"/Applications/CMake.app/Contents/share/cmake-3.2/Modules/FindCUDA/parse_cubin.cmake\") # path",31],["set(${executable_var} \"${app}\" PARENT_SCOPE)",42],["/Applications/Doxygen.app/Contents/MacOS",48],["/Applications/Doxygen.app/Contents/Resources",48],["set (XCODE_POST_43_ROOT \"/Applications/Xcode.app/Contents/Developer/Platforms/${IOS_PLATFORM_LOCATION}/Developer\")",55],["get_bundle_and_executable(\"${app}\" bundle executable valid)",66]],"useCount":2337},{"word":"append","context":[["# will append .docset to the name.",54],["# Now I need to append each element to NUBOT_SRCS",122],["# append elements to a list and remove existing duplicates from the list",586],["# only append a TWEAK version if it exists:",41],["# append vendor-specific compilers to the list if we either don't know the compiler id,",41],["* Open the file in append mode and try to read some text.",36],["# append to list",599],["# append elements to a list if they are not already in the list",605],["# append custom deprecation text if available",605],["sys.path.append('${GR_RUNTIME_PYTHONPATH}')",30]],"useCount":3437},{"word":"apps","context":[["\"core/apps/dfi/CMakeFiles/dfi.dir/DependInfo.cmake\"",21],["\"core/apps/sak/CMakeFiles/CMakeDirectoryInformation.cmake\"",21],["\"extras/apps/sgip/CMakeFiles/sgip.dir/DependInfo.cmake\"",21],["\"extras/apps/variant_comp/CMakeFiles/CMakeDirectoryInformation.cmake\"",21],["\"core/apps/pair_align/CMakeFiles/CMakeDirectoryInformation.cmake\"",21],["CACHE PATH \"The XDG apps dir\"",26],["# Macros for use in wxWidgets apps.",27],["\"C:/apps/Microsoft DirectX SDK*\"",38],["SUBDIRS(apps)",29],["# apps",31]],"useCount":2553},{"word":"arch","context":[["\"${CMAKE_BINARY_DIR}/arch.c\"",54],["ARCHITECTURE ${arch}",60],["#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.",77],["#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.",80],["add_definitions(/arch:SSE2)",84],["set(VARIANT_SUFFIX \"-${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch}\")",90],["foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})",90],["+++ b/ndk/platforms/android-9/arch-x86/include/machine/_types.h",111],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136],["--- a/ndk/platforms/android-9/arch-x86/include/machine/_types.h",111]],"useCount":2151},{"word":"architecture","context":[["# Parse the architecture name from the compiler output",60],["# set the architecture for iOS",69],["# Get rid of the value marker leaving just the architecture name",60],["#     [+] added mips architecture support",61],["# target architecture. The program will always fail to compile (both because",56],["# way, we can detect the correct target architecture even when cross-compiling,",56],["# Detect the architecture in a rather creative way...",56],["# This is only a hack to find out architecture",55],["set (CMAKE_OSX_ARCHITECTURES ${IOS_ARCH} CACHE string  \"Build architecture for iOS\")",64],["message(FATAL_ERROR \"Should specify an architecture\")",134]],"useCount":2548},{"word":"are","context":[["# The contents of this file are placed in the public domain. Feel",495],["# and some are specific to a generator",278],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278],["# Header files are presumed to be included like",241],["# are met:",854],["# if all listed variables are TRUE",786],["# also defined, but not for general use are",608],["# all listed variables are TRUE",2436],["# The set of languages for which implicit dependencies are needed:",10677],["# append elements to a list if they are not already in the list",605]],"useCount":50796},{"word":"arg","context":[["elseif (${arg} STREQUAL \"AUTHOR\")",243],["if(arg MATCHES \" \")",199],["if (${arg} STREQUAL \"PACKAGES\")",221],["elseif (${arg} STREQUAL \"SOURCEPATH\")",221],["elseif (${arg} STREQUAL \"DOCTITLE\")",221],["elseif (${arg} STREQUAL \"VERSION\")",243],["foreach(arg ${ARGN})",866],["elseif (${arg} STREQUAL \"INSTALLPATH\")",221],["elseif (${arg} STREQUAL \"WINDOWTITLE\")",221],["elseif (${arg} STREQUAL \"USE\")",243]],"useCount":11843},{"word":"args","context":[["set(args install)",62],["foreach(arg IN LISTS args)",55],["list_pop_front(args)",57],["# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no",62],["set(args test)",62],["message(\"Could not generate default avrdude programmer args, aborting!\")",52],["# Attempts to extract compiler and linker args from an MPI compiler. The arguments set",41],["set(args ${ARGN})",202],["set(args)",66],["set(args \"\")",65]],"useCount":2390},{"word":"argument","context":[["message(FATAL_ERROR \"Data file referenced by argument\\n\"",67],["# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time",65],["#   command - COMMAND argument from the usual execute_process argument structure",198],["# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.",66],["# generated_file:STRING=<> File to generate.  This argument must be passed in.",198],["# Args with spaces need quotes around them to get them to be parsed as a single argument.",198],["# generated_cubin_file:STRING=<> File to generate.  This argument must be passed",198],["#   command - COMMAND argument from the usual execute_process argument structure",198],["message(AUTHOR_WARNING \"Unknown argument [${arg}]\")",101],["# gcc). The argument of the tag is a list of macros of the form: name",69]],"useCount":4047},{"word":"arguments","context":[["# Optional fourth parameter is passed as arguments to _testrunner",179],["#   ARGN    - Remaining arguments are the command with arguments",198],["#   ARGN    - Remaining arguments are the command with arguments",198],["# Run arguments :",140],["# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if",126],["# Check arguments.",120],["#    check what the source file would have printed when called with the given arguments.",119],["# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if",106],["# Parse the arguments we were given.",97],["# Parse arguments",86]],"useCount":7087},{"word":"arm","context":[["set( ANDROID_ARCH_FULLNAME \"arm\" )",308],["set( ANDROID_ARCH_NAME \"arm\" )",681],["#   ARMEABI_V6 : TRUE for arm v6",135],["#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"",135],["#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"",135],["#   ARMEABI : TRUE for arm v6 and older devices",135],["set( __availableToolchainArchs \"arm\" )",136],["if( ANDROID_ARCH_NAME STREQUAL \"arm\" AND NOT ARMEABI_V6 )",136],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136],["elseif( __availableToolchainMachines MATCHES arm )",136]],"useCount":4455},{"word":"armeabi","context":[["elseif( ANDROID_ABI STREQUAL \"armeabi\" )",136],["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132],["#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but",132],["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a\")",133],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a with NEON\" )",133],["elseif( ANDROID_ABI STREQUAL \"armeabi-v6 with VFP\" )",135],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a with VFPV3\" )",135],["set( ANDROID_NDK_ABI_NAME \"armeabi-v7a\" )",402],["set( ANDROID_NDK_ABI_NAME \"armeabi\" )",272]],"useCount":3180},{"word":"as","context":[["# testing this directory and lists subdirectories to be tested as well.",2367],["# as a fall back for non-catkin libraries try to search globally",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# return as a flag string",599],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# modifications, as long as this notice is preserved.",442],["# modifications, as long as this notice is preserved.",442],["# For threads, as mentioned Apple doesn't need this.",239],["# Usage of this module as follows:",224],["#      Can be set as environment variable. Can be set only at first cmake run.",205]],"useCount":31404},{"word":"at","context":[["message(FATAL_ERROR \"Qt 5 requires at least CMake version 2.8.3\")",215],["# INRIA at visp@inria.fr",95],["\"but at least version ${Eigen3_FIND_VERSION} is required\")",102],["# We must run the following at \"include\" time, not at function call time,",115],["# We must run the following at \"include\" time, not at function call time,",115],["# Can be set only at the first run:",136],["#      Can be set as environment variable. Can be set only at first cmake run.",205],["set( ANDROID_NDK_HOST_SYSTEM_NAME ${ANDROID_NDK_HOST_SYSTEM_NAME2} ) # only 32-bit at the moment",203],["## Store global variables before overwriting (then restore at end of this file.)",143],["# see documentation at top",221]],"useCount":7796},{"word":"automatically","context":[["# module will automatically add the -framework Cocoa on your behalf.",226],["#             ** File generated automatically, do not modify **",66],["# we opt not to automatically output Boost_ERROR_REASON here as",75],["# try to automatically detect the layout",102],["# If left blank, the following values are used (\"$name\" is automatically",59],["# add the automatically determined parts of the RPATH",62],["# This file generated automatically by:",60],["#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6",63],["# automatically be disabled.",63],["# automatically put into the considered list of version numbers and thus doesn't need",47]],"useCount":2363},{"word":"available","context":[["# Check if struct sockaddr_in::sin_len is available.",92],["# append custom deprecation text if available",605],["# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which",94],["# Check if struct sockaddr_in6::sin6_len is available.",92],["#                            Only available for CUDA version 3.2+.",96],["# are available for both release and debug modes.",98],["# build list of available ABIs",129],["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["# included. The list of available CPACK_xxx variables and their associated",278],["#                          Is not available for standalone toolchain.",659]],"useCount":7382},{"word":"base","context":[["# 'virtual_function' : no override available for virtual member function from base 'class'; function is hidden",49],["# TBB_INSTALL_DIR, the base TBB install directory",44],["# This gives us a fairly reliable base directory to search for /bin /lib and /include from.",48],["# 'function' : member function does not override any base class virtual member function",49],["# 'anonymous_namespace{file}', where file will be replaced with the base",54],["# operators of the base classes will not be shown.",80],["void qsort(void *base, size_t nel, size_t width,",80],["# base path where the generated documentation will be put.",63],["# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base",59],["# that these files will be copied to the base HTML output directory. Use the",52]],"useCount":2108},{"word":"based","context":[["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# can cause incorrect dependencies when #including files based on this macro which is",192],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["# based on the name of this included file.",139],["# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.",130],["# We need to set the linker language based on what the expected generated file",130],["#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on",111],["# location did.  We will find a new one based on the new inputs.",92],["# Add in a path suffix, based on the required version, ideally",90],["# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake",83]],"useCount":3874},{"word":"basename","context":[["Boost_${basename}_LIBRARY_DEBUG",97],["set(Boost_${basename}_LIBRARIES       ${Boost_${basename}_LIBRARY_DEBUG})",64],["macro(_Boost_ADJUST_LIB_VARS basename)",64],["set(generated_file_basename \"${cuda_target}_generated_${basename}${generated_extension}\")",65],["Boost_${basename}_LIBRARY_RELEASE",97],["set(Boost_${basename}_LIBRARY       ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARY       ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARIES     ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARIES     ${Boost_${basename}_LIBRARY_RELEASE})",64],["set(Boost_${basename}_LIBRARIES       ${Boost_${basename}_LIBRARY_DEBUG})",64]],"useCount":6178},{"word":"be","context":[["# should be set in the CMake list file of the project before CPack module is",370],["# testing this directory and lists subdirectories to be tested as well.",2367],["# Already in cache, be silent",1409],["# dependencies with components must be find_package()-ed again",605],["# In fact, there seems to be a problem if I used the Threads package",238],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# This file will be configured to contain variables for CPack. These variables",370],["# simple dependencies must only be find_package()-ed once",605],["# Header files are presumed to be included like",241],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321]],"useCount":60500},{"word":"because","context":[["# This needed to change because \"proper\" SDL convention",145],["# Force set compilers because standard identification works badly for us",138],["# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)",120],["# We need to be careful here and this extra loop because including files will effect THIS_SRC_DIR!!!!",116],["Usually it happens because of bug in make-standalone-toolchain.sh script from NDK r7, r7b and r7c.",113],["# This needed to change because \"proper\" SDL2 convention",100],["# If this is defined, then no SDL2main will be linked in because",86],["# We have to actually try running the test program, because of a bug",79],["# reasons because not all systems place things in SDL2/ (see FreeBSD).",199],["# or change the Find behavior for a particular module (perhaps because the",159]],"useCount":4404},{"word":"been","context":[["# been chosen by FindCUDA.cmake.",198],["# have been removed.",64],["# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS",65],["# Add a link phase for the separable compilation if it has been enabled.  If",65],["# variable will have been defined.",65],["# It has been altered for iOS development",84],["# have been found.  Otherwise, LIBRARIES is set to FALSE.",82],["#    indicates whether the executable would have been able to run on its",150],["# been exported from the same project but in a separate export set.",184],["# Make sure the targets which have been exported in some other",198]],"useCount":3947},{"word":"before","context":[["## Store global variables before overwriting (then restore at end of this file.)",143],["if( ANDROID_NDK_RELEASE_NUM LESS 7000 ) # before r7",207],["#                          Implies -fno-rtti -fno-exceptions for NDK before r7.",218],["# should be set in the CMake list file of the project before CPack module is",370],["# to be set before calling find_package:",126],["if( NOT EXISTS \"${__libsupcxx}\" ) # before r7",105],["# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).",103],["# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex",102],["# TODO: check if .so file exists before the renaming",91],["# before the specified paths. To search non-standard paths first,",70]],"useCount":5217},{"word":"being","context":[["# If the debug & release library ends up being the same, omit the keywords",62],["# Set arg to nothing to keep it from being processed further",65],["# Check for Window system symbols (note: only one should end up being set)",45],["# omitted =1 is assumed. To prevent a macro definition from being",59],["# If you want to observe which libraries are being linked against",89],["# mark sources as cotired to prevent them from being used in another cotired target",106],["# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being",65],["# As a consequence of ALARMs no longer being used, thread",53],["message(STATUS \"               For the time being switching OFF 'mathmore' option\")",44],["# on CRT DLLs being available. CMake always defaults to using shared",50]],"useCount":2084},{"word":"bin","context":[["set(CMAKE_RANLIB \"/usr/bin/ranlib\")",350],["/usr/bin",533],["/usr/local/bin",459],["PATH_SUFFIXES bin",296],["RUNTIME DESTINATION bin",216],["EXECUTE_PROCESS(COMMAND \"/usr/bin/strip\" \"${file}\")",215],["/bin",214],["set(CMAKE_LINKER \"/usr/bin/ld\")",352],["set(CMAKE_AR \"/usr/bin/ar\")",350],["/usr/bin/",227]],"useCount":18907},{"word":"binary","context":[["# A module's location is usually a directory, but for binary modules",54],["# Redistribution and use in source and binary forms, with or without",2447],["find_program( NDK_CCACHE \"${_ndk_ccache}\" DOC \"The path to ccache binary\")",112],["#  Redistribution and use in source and binary forms, with or without",109],["# Redistribution and use in source and binary forms, with or without modification,",83],["# /Fp specifies precompiled header binary file name",76],["#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary",71],["# controls whether a binary table of contents is generated (YES) or a",62],["# * Redistributions in binary form must reproduce the above",52],["#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)",51]],"useCount":5506},{"word":"bindings","context":[["# parse addon-bindings.mk to get the list of header files to copy",21],["FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC \"Include for OpenCL CPP bindings on OSX\")",67],["# process for the language bindings (both the C and C++ bindings depend on",32],["# process for the language bindings (both the C and C++ bindings depend on",32],["ROOT_BUILD_OPTION(ruby OFF \"Ruby ROOT bindings, requires ruby >= 1.8\")",30],["ROOT_BUILD_OPTION(python ON \"Python ROOT bindings, requires python >= 2.2\")",29],["# attempt to find only the C bindings.",26],["# set the definitions for the language bindings.",24],["foreach(binding ${bindings})",21],["message(STATUS \"Go bindings disabled.\")",20]],"useCount":2151},{"word":"bit","context":[["#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions",111],["# Allow the user to specify if the device code is supposed to be 32 or 64 bit.",65],["#     [+] added toolchain option to compile to 32-bit ARM instructions",66],["set( ANDROID_NDK_HOST_SYSTEM_NAME ${ANDROID_NDK_HOST_SYSTEM_NAME2} ) # only 32-bit at the moment",203],["set( ANDROID_NDK_HOST_X64 1 CACHE BOOL \"Try to use 64-bit compiler toolchain\" )",107],["# Lookup the 64 bit libs on x64",92],["# mark 32 bit executables large address aware so they can use > 2GB address space",81],["message(STATUS \"MSVC: 64-bit platform, enforced -D_WIN64 parameter\")",80],["#      64-bit ABIs for NDK r10 and newer:",70],["mix 32 and 64 bit architectures.",72]],"useCount":3245},{"word":"blank","context":[["# put in front of it. If left blank `html' will be used as the default path.",70],["# blank all files are included.",64],["#                               blank or unspecified Debug is assumed as this is",198],["# each generated HTML page. If it is left blank doxygen will generate a",126],["# replace won't work if var is blank",83],["# found. If left blank, it is assumed the dot tool can be found in the path.",80],["set(${extProjName}_REQUIRED_VERSION \"\")  #If a required version is necessary, then set this, else leave blank",72],["# here.  If they aren't there we need to just blank this variable and",71],["# put in front of it. If left blank `man' will be used as the default path.",63],["# If left blank NO is used.",64]],"useCount":2606},{"word":"boost","context":[["C:/boost",161],["C:/boost/include",111],["# Look for the boost library path.",103],["NAMES         boost/config.hpp",99],["C:/boost/lib",99],["#  End finding boost libraries",97],["#  Begin finding boost libraries",97],["# Look for a standard boost header file.",95],["# must link explicitly against boost.",92],["\"version.hpp reveals boost \"",81]],"useCount":4783},{"word":"both","context":[["# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and",57],["# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir",59],["# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES",63],["# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the",63],["# FIXME: This probably should be set for both cases",83],["# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then",84],["# if both are found, set SFML_XXX_LIBRARY to contain both",102],["# if both are found, set SFML_XXX_LIBRARY to contain both",102],["/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */",86],["# are available for both release and debug modes.",98]],"useCount":2957},{"word":"break","context":[["break ()",165],["# quotes can break try_compile and compiler identification",103],["# Newlines inside flags variables break CMake's NMake generator.",49],["break",46],["# This macro will break silently if any of x,y,z are greater than 100.",36],["break;",448],["break()",3025],["# We maintain this behavior since changing it could break people's builds.",66],["# If these ever change, things will break.",34],["# quotes will break try_compile and compiler identification",32]],"useCount":4280},{"word":"build","context":[["# Pairs of files generated by the same build rule.",683],["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# pack a list of libraries with optional build configuration keywords",586],["# merge build configuration keywords with library names to correctly deduplicate",586],["# undo build configuration keyword merging after deduplication",586],["# This file is part of the CMake build system for OGRE",449],["#   $ mkdir build && cd build",350],["#   $ mkdir build && cd build",350],["BINARY_DIR ${proj}-build",267]],"useCount":30616},{"word":"building","context":[["# Added code to assist with automated building by using environmental variables",244],["# used in building SDL2.",212],["#       Macros for building Qt files",72],["#      Note: building for \"android-L\" requires explicit configuration.",70],["# Otherwise, it is assumed you are building an application and this",187],["# used in building osg.",177],["# used in building SDL.",174],["\"Python required for building Qt component (qtdeclarative):\\n\"",132],["# building a shared library, shared module, or executable that links",100],["# ARGN[0] Reason for not building.",81]],"useCount":3998},{"word":"builds","context":[["CACHE STRING \"Flags used by the C++ compiler during coverage builds.\"",72],["CACHE STRING \"Flags used for linking binaries during coverage builds.\"",71],["\"Flags used by the compiler during debug builds.\")",48],["CACHE STRING \"Flags used by the shared libraries linker during coverage builds.\"",71],["CACHE STRING \"Flags used by the C compiler during coverage builds.\"",70],["# MinGW builds does not seem to handle spaces in the path to the",52],["# This module can be included in CMake builds in find_package:",55],["# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want",57],["# We maintain this behavior since changing it could break people's builds.",66],["# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.",47]],"useCount":2850},{"word":"built","context":[["# i.e.: the API documentation is built with:",52],["# also the default input encoding. Doxygen uses libiconv (or the iconv built",54],["# Jiri: Self-built TBB stores the debug libraries in a separate directory.",69],["configuration. By default gcc built-in sync functions are used,",69],["# Guesses Boost's compiler prefix used in built library names",53],["# built from the given source files.  Unlike cxx_test_with_flags,",52],["# is built from the given source files with the given compiler flags.",50],["# hard-to-find crashes. When it is built as a static library, it is",50],["# creates a named target that depends on the given libs and is built",48],["# iconv built into libc) for the transcoding. See",54]],"useCount":2827},{"word":"but","context":[["but not all the files it references.",399],["#                               RelWithDebInfo, but it should match one of the",198],["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132],["# We won't actually use these variables for now, but we need to set this, in",198],["# been exported from the same project but in a separate export set.",184],["# module, but with modifications to recognize OS X frameworks and",189],["but this file does not exist.  Possible reasons include:",399],["# also defined, but not for general use are",608],["#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but",132],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174]],"useCount":11263},{"word":"by","context":[["# Added a search for threads which is needed by some platforms.",247],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["# Pairs of files generated by the same build rule.",683],["# work by or on behalf of the U.S. Government.  Export of this program",397],["# Generated by \"Unix Makefiles\" Generator, CMake Version 2.8",2544],["# Created by Eric Wing.",301],["# Variables defined by this module:",296],["# Modified by Eric Wing.",246],["# Added code to assist with automated building by using environmental variables",244],["# Generated by \"Unix Makefiles\" Generator, CMake Version 3.0",227]],"useCount":33625},{"word":"c","context":[["\"/usr/share/cmake-2.8/Modules/CMakeCCompilerABI.c\"",294],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")",275],["set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)",214],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)",179],["set(CMAKE_C_SOURCE_FILE_EXTENSIONS c)",177],["set(format_flag \"-c\") # string",168],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",166],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")",147],["set(CMAKE_CXX_COMPILER \"/usr/bin/c++\")",144],["set( CMAKE_ASM_COMPILER_ARG1 \"-c\" )",142]],"useCount":16722},{"word":"cache","context":[["# cache flags",130],["# People will have to manually change the cache values of",300],["# in cache already",1278],["# Already in cache, be silent",1409],["# Non-cache variables you might use in your CMakeLists.txt:",112],["# put flags to cache (for debug purpose only)",109],["# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache",102],["# Already in cache",69],["# cache entries because they are meant to specify the location of a single",71],["#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android",73]],"useCount":7210},{"word":"call","context":[["# the time of a run. So in most cases it will be better to enable call graphs",54],["# doxygen will generate a call dependency graph for every global function",54],["# Do the same find_package call but look specifically for the CMake version.",62],["#---call rootcint------------------------------------------",69],["# This is still a normal call for milliseconds.",77],["# Once anyone knows how OpenSSL would call the patch versions beyond 'z'",51],["# We must run the following at \"include\" time, not at function call time,",115],["# We should call this function again since hunter_add_package is include-like",132],["# If Boost_DIR is set, this behaves as any find_package call would. If not,",62],["# need to delegate them to this find_package call.",62]],"useCount":2373},{"word":"caller","context":[["# doxygen will generate a caller dependency graph for every global function",54],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["# Provide the include directories to the caller",52],["# the time of a run. So in most cases it will be better to enable caller",54],["# Propagate values to caller's scope:",26],["# So in most cases it will be better to enable caller graphs for selected",25],["# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller",21],["# Provide the libs directories to the caller",40],["#always FATAL_ERROR because we can't say to the caller that OpenCV is not found",39],["# propagate the result variables to the caller:",29]],"useCount":2077},{"word":"can","context":[["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# So I use a temporary variable until the end so I can set the",237],["# can cause incorrect dependencies when #including files based on this macro which is",192],["# If the value of the INPUT tag contains directories, you can use the",170],["# Set the flag to indicate that the machine can accurately convert",164],["SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING \"Where the SDL2 Library can be found\")",146],["## External_${extProjName}.cmake files can be recurisvely included,",143],["# This module supports requiring a minimum version, e.g. you can do",143],["#  Options (can be set as cmake parameters: -D<option_name>=<value>):",135],["# Variables used by this module, they can change the default behaviour and need",124]],"useCount":23073},{"word":"case","context":[["# case of shared STL linkage",112],["# system piece by piece in case you need to opt out of certain components",159],["# Set the options specific to this build case",174],["# in case and if your file system supports case sensitive file names. Windows",84],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["# in case and if your file system supports case sensitive file names. Windows",84],["#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.",80],["# file and regenerate it later.  This covers the case where a header",71],["Rerun cmake with -DANDROID_GOLD_LINKER=ON option in case of problems.",110],["/* This should mean case insensitive file system */",88]],"useCount":6476},{"word":"catkin","context":[["# generated from catkin/cmake/template/pkgConfig.cmake.in",605],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# as a fall back for non-catkin libraries try to search globally",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# copied from catkin/cmake/list_append_unique.cmake to keep pkgConfig",605],["# copied from catkin/cmake/list_append_deduplicate.cmake to keep pkgConfig",586],["list(APPEND CATKIN_ORDERED_PACKAGES_BUILD_TYPE \"catkin\")",240],["\"catkin/catkin_generated/version/package.cmake\"",162],["if (NOT EXISTS \"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/.catkin\")",114]],"useCount":13263},{"word":"cc","context":[["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)",179],["#      add_executable(foo foo.cc)",77],["#    add_executable(foo foo.cc)",85],["#     add_executable(foo foo.cc)",89],["set(CUDA_HOST_COMPILER \"/usr/bin/cc\") # bool",93],["\"CMakeFiles/gtest_main.dir/src/gtest_main.cc.o\"",94],["\"CMakeFiles/gtest.dir/src/gtest-all.cc.o\"",95],["set( CMAKE_CXX_SOURCE_FILE_EXTENSIONS cc cp cxx cpp CPP c++ C )",109],["set(CMAKE_C_COMPILER \"/usr/bin/cc\")",142],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",166]],"useCount":3456},{"word":"change","context":[["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["# People will have to manually change the cache values of",300],["# This needed to change because \"proper\" SDL convention",145],["# set these global flags for cmake client scripts to change behavior",130],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["# try to detect change of NDK",104],["# This needed to change because \"proper\" SDL2 convention",100],["# try to detect change",153],["# Variables used by this module, they can change the default behaviour and need",124],["# or change the Find behavior for a particular module (perhaps because the",159]],"useCount":3246},{"word":"char","context":[["set( ANDROID_CXX_FLAGS \"${ANDROID_CXX_FLAGS} -fsigned-char\" ) # good/necessary when porting desktop libraries",110],["int main(int argc, char** argv) {",98],["char *foo= 0; int bar= 0;",92],["extern char *__bss_start;",91],["0, 0, (struct hostent *) 0, (char *) NULL,  0, (int *)0);",86],["int main(int ac, char **av) {}",160],["int main(int argc, char *argv[]){return 0;}\"",164],["int main(int argc, char **argv) {",190],["int main(int ac, char **av)",340],["int main(int argc, char **argv)",542]],"useCount":4972},{"word":"check","context":[["#    Otherwise check if the output is evaluated by the calling CMake code. If so,",119],["message( FATAL_ERROR \"Could not find install_name_tool, please check your installation.\" )",136],["# add dependencies to all check dependencies targets",173],["#    check what the source file would have printed when called with the given arguments.",119],["# Only check existence of private includes if the Private component is",211],["# which can be used by a validating XML parser to check the",117],["# check the version number",114],["# Last minute check - ensure that we have a proper revision",94],["# TODO: check if .so file exists before the renaming",91],["# modify the way the check is run:",223]],"useCount":6148},{"word":"check_function_exists","context":[["check_function_exists(",357],["check_function_exists(poll HAVE_POLL)",66],["check_function_exists(localtime_r HAVE_LOCALTIME_R)",62],["check_function_exists(\"${_name}_\" ${_prefix}${_combined_name}_WORKS)",54],["check_function_exists(statvfs HAVE_STATVFS)",46],["check_function_exists(gmtime_r HAVE_GMTIME_R)",45],["check_function_exists(utimes HAVE_UTIMES)",44],["check_function_exists(kqueue HAVE_KQUEUE)",43],["check_function_exists(timegm HAVE_TIMEGM)",40],["check_function_exists(sysconf HAVE_SYSCONF)",39]],"useCount":3139},{"word":"check_include_file","context":[["check_include_file(stdint.h HAVE_STDINT_H)",63],["check_include_file(malloc.h HAVE_MALLOC_H)",39],["check_include_file(unistd.h HAVE_UNISTD_H)",61],["check_include_file(termios.h HAVE_TERMIOS_H)",52],["check_include_file(sys/types.h HAVE_SYS_TYPES_H)",52],["check_include_file(inttypes.h HAVE_INTTYPES_H)",46],["check_include_file(execinfo.h HAVE_EXECINFO_H)",39],["check_include_file(sys/time.h HAVE_SYS_TIME_H)",42],["check_include_file(sys/param.h HAVE_SYS_PARAM_H)",43],["check_include_file(sys/stat.h HAVE_SYS_STAT_H)",45]],"useCount":2432},{"word":"checks","context":[["# avoid running system checks by using pre-cached check results",36],["# Skip the platform compiler checks for cross compiling",91],["# This macro checks for the existence of the combination of fortran libraries",94],["# given by _list.  If the combination is found, this macro checks (using the",96],["# file checks the output of each command and if the command fails it deletes the",198],["# Avoid system checks on Windows by pre-caching  results. Most of the system checks",46],["# Avoid system checks on Windows by pre-caching  results. Most of the system checks",46],["# Works identically to pkg_check_modules, except that no checks are needed prior to use.",44],["# library checks",39],["# Sanity checks",548]],"useCount":2150},{"word":"clang","context":[["#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools",111],["#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used",111],["#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used",111],["list( APPEND __availableToolchains \"standalone-clang\" )",111],["#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used",111],["string( REPLACE \".\" \"\" _clang_name \"clang${ANDROID_CLANG_VERSION}\" )",111],["#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used",111],["set( _clang_name \"clang\" )",111],["\"/Users/vector/tmp/Cobalt/ext/emsdk_portable/clang/tag-e1.34.1/src/include\"",134],["# clang",122]],"useCount":2816},{"word":"class","context":[["# will show members with their full class and namespace scopes in the",63],["# configuration options related to the alphabetical class index",109],["# undocumented classes that are normally visible in the class hierarchy.",63],["# will sort the (detailed) documentation of file and class members",63],["# or class method. Note that enabling this option will significantly increase",108],["# Private class members and static file members will be hidden unless",63],["# will generate a graph for each documented class showing the direct and",126],["# members were ordinary class members. Constructors, destructors and assignment",80],["# inherited members of a class in the documentation of that class as if those",80],["# inherited members of a class in the documentation of that class as if those",80]],"useCount":4709},{"word":"classes","context":[["# diagrams that involve STL classes more complete and accurate.",79],["# allowed. This is useful if you have classes or files whose names only differ",84],["# operators of the base classes will not be shown.",80],["# (namespaces, classes, functions, etc.) that should be excluded from the",75],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["# of functions and classes directly in the documentation.",63],["# classes will be put under the same header in the alphabetical index.",63],["# undocumented classes that are normally visible in the class hierarchy.",63],["# In case all classes in a project start with a common prefix, all",63],["# If the ALLEXTERNALS tag is set to YES all external classes will be listed",63]],"useCount":2232},{"word":"clean","context":[["# Per-language clean rules from dependency scanning.",11977],["# target.  You should also make clean after running this target to get the",64],["# Add the other files that we want cmake to clean on a cleanup ##########",66],["%clean",42],["# This is often the same, so clean up",73],["# for other generators, we add the \"clean all\" target to clean up the precompiled header",35],["\"CMakeFiles/clean-test-results.dir/DependInfo.cmake\"",36],["\"The clean target name will be set to this target's name with the suffix _clean_cotire appended.\"",38],["# want clean framework path, not unix compatibility path",58],["unset(_MPI_${id}_${lang}_COMPILER_NAMES)    # clean up the namespace here",41]],"useCount":13085},{"word":"cmake","context":[["\"/usr/share/cmake-2.8/Modules/CMakeGenericSystem.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/CMakeGenericSystem.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/CMakeSystemSpecificInformation.cmake\"",742],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)",821],["\"CMakeFiles/2.8.12.2/CMakeCCompiler.cmake\"",813],["\"/usr/share/cmake-2.8/Modules/CMakeSystemSpecificInformation.cmake\"",742],["\"CMakeFiles/CMakeDirectoryInformation.cmake\"",1373],["\"CMakeFiles/cmake.check_cache\"",1373]],"useCount":156350},{"word":"cmake_policy","context":[["cmake_policy(SET CMP0053 NEW)",58],["cmake_policy(VERSION 2.6)",205],["cmake_policy(SET CMP0007 NEW)",240],["cmake_policy(PUSH)",625],["cmake_policy(POP)",837],["cmake_policy(VERSION \"2.8\")",113],["cmake_policy(SET CMP0054 NEW)",98],["cmake_policy(SET CMP0011 NEW)",54],["cmake_policy(SET CMP0026 OLD)",46],["cmake_policy(SET CMP0054 OLD)",35]],"useCount":3048},{"word":"cmakedefine","context":[["#cmakedefine HAVE_SYS_STAT_H 1",203],["#cmakedefine HAVE_DLFCN_H 1",182],["#cmakedefine HAVE_STDLIB_H 1",216],["#cmakedefine HAVE_MEMORY_H 1",195],["#cmakedefine HAVE_STRINGS_H 1",224],["#cmakedefine HAVE_INTTYPES_H 1",227],["#cmakedefine HAVE_STRING_H 1",228],["#cmakedefine HAVE_STDINT_H 1",263],["#cmakedefine HAVE_UNISTD_H 1",263],["#cmakedefine HAVE_SYS_TYPES_H 1",268]],"useCount":61209},{"word":"cmd","context":[["git git.cmd",57],["if(NOT cmd)",66],["set(cmd \"${CMAKE_COMMAND}\")",62],["set(PAL_PTRACE \"ptrace((cmd), (pid), (caddr_t)(addr), (data))\")",82],["set(cmd \"${cmake_command}\")",62],["COMMAND ${cmd}",274],["set(cmd \"\")",53],["set(cmd \"$(MAKE)\")",56],["set(PAL_PTRACE \"ptrace((cmd), (pid), (void*)(addr), (data))\")",49],["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/cvt83.cmd\" \"@echo %~s1\" )",102]],"useCount":3018},{"word":"cmeon","context":[["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../unsupported\"",82],["\"/home/cmeon/SimplexLP/eigen/test\"",552],["\"/home/cmeon/SimplexLP/eigen\"",969],["\"/home/cmeon/SimplexLP/eigen/doc/snippets\"",238],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../test\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../Eigen\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test\"",82],["\"/home/cmeon/SimplexLP/eigen/doc/examples\"",59],["\"/home/cmeon/SimplexLP/lib/blas/CMakeFiles/eigen_blas.dir/DependInfo.cmake\"",13],["\"/home/cmeon/SimplexLP/eigen/unsupported/doc/examples/../../../unsupported/test\"",13]],"useCount":2210},{"word":"cn","context":[["\"/home/einstein/openairinterface5g/openair-cn/S1AP\"",240],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair-cn/UTILS\"",241],["\"/home/einstein/openairinterface5g/openair-cn/SECU\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251]],"useCount":6393},{"word":"code","context":[["#    the exit code (in many cases 0 for success), otherwise enter \"FAILED_TO_RUN\".",150],["# This code sets the following variables:",169],["# Generate the code",198],["# .. code-block:: cmake",231],["# Added code to assist with automated building by using environmental variables",244],["# install generated code",260],["# create dummy targets for exported code generation targets to make life of users easier",605],["#                               configuration used when compiling the code.  If",198],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["#    Otherwise check if the output is evaluated by the calling CMake code. If so,",119]],"useCount":9839},{"word":"com","context":[["#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)",250],["#   https://github.com/ruslo/sugar/wiki/Collecting-sources",60],["#  serghei (DOT) amelian (AT) gmail.com",74],["# http://www.slproweb.com/products/Win32OpenSSL.html",75],["set(MACOSX_BUNDLE_GUI_IDENTIFIER com.example)",78],["# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",80],["# here: http://tinyurl.com/2cb428.  Syntax highlighting is important for proper",82],["#  See home page: https://github.com/taka-no-me/android-cmake",108],["See https://android.googlesource.com/platform/development.git f907f4f9d4e56ccc8093df6fee54454b8bcab6c2",111],["# http://academic.cleardefinition.com",438]],"useCount":4419},{"word":"command","context":[["# copy and paste a runnable command line.",198],["# file checks the output of each command and if the command fails it deletes the",198],["# file checks the output of each command and if the command fails it deletes the",198],["#   command - COMMAND argument from the usual execute_process argument structure",198],["# Echo the command",199],["# Run the command",200],["set(_command ${command})",199],["#  CMAKE_REQUIRED_FLAGS = string of compile command line flags",209],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["# cuda_execute_process - Executes a command with optional command echo and status message.",198]],"useCount":13748},{"word":"commands","context":[["# Cubin resource report commands.",198],["# This file includes the relevent testing commands required for",1153],["# adjust the default behaviour of the FIND_XXX() commands:",340],["# Create custom commands and targets for each file.",247],["#   CPACK_NSIS_EXTRA_INSTALL_COMMANDS   - Extra commands used during install",92],["# force cmake to produce / instead of \\ in build commands for Ninja generator",95],["# commands in the documentation.",188],["# This file includes the relevant testing commands required for",1214],["# This file runs the nvcc commands to produce the desired output file along with",198],["#   CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS - Extra commands used during uninstall",92]],"useCount":6633},{"word":"common","context":[["\"../common/include\"",117],["\"/home/sshah/src/imaplaccumulo/be/src/common/CMakeFiles/GlobalFlags.dir/DependInfo.cmake\"",83],["\"/home/sshah/src/imaplaccumulo/be/src/common/CMakeFiles/Common.dir/DependInfo.cmake\"",83],["\"/home/einstein/openairinterface5g/common/utils/msc\"",249],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278],["# Large files, common flag",92],["\"/home/chen/pcl-pcl-1.7.2/build/common/CMakeFiles/pcl_common.dir/DependInfo.cmake\"",108],["\"/home/einstein/openairinterface5g/common/utils/collection/hashtable\"",240],["\"/home/einstein/openairinterface5g/common/utils\"",241],["\"/home/einstein/openairinterface5g/common/utils/itti\"",241]],"useCount":4138},{"word":"compatibility","context":[["# target for backward compatibility",248],["# seem to provide SDLmain for compatibility even though they don't",53],["# For backward compatibility with CMake < 2.8.12",216],["# seem to provide SDL2main for compatibility even though they don't",170],["# Compatibility Code for backwards compatibility with CMake",89],["# set some obsolete variables for backward compatibility",75],["#The following deprecated settings are for backwards compatibility with CMake1.4",57],["# Backwards compatibility for CMake1.4 and 1.2",57],["#      backward compatibility.",74],["# want clean framework path, not unix compatibility path",58]],"useCount":2565},{"word":"compilation","context":[["# This is the list of host compilation flags.  It C or CXX should already have",198],["# compilation.",63],["# compilation will be performed. Macro expansion can be done in a controlled",63],["# Prints out extra information about the cuda file during compilation",65],["#     [+] support cross-compilation on Windows (native, no cygwin support)",63],["# Don't use any of the host compilation flags for PTX targets.",60],["# Add a link phase for the separable compilation if it has been enabled.  If",65],["set(nvcc_flags ${nvcc_flags} --host-compilation C)",65],["# the script.  We need to defer the decision until compilation time, because",65],["message( FATAL_ERROR \"Cross-compilation on your platform is not supported by this cmake toolchain\" )",143]],"useCount":2715},{"word":"compile","context":[["#  CMAKE_REQUIRED_FLAGS = string of compile command line flags",209],["# Added needed compile switches for MinGW.",247],["#   CMAKE_REQUIRED_FLAGS = string of compile command line flags",81],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136],["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["# we need to add generated .cpp files to the sources (to compile them),",83],["# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: \"cmake -Wdev\" -*-",131],["#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.",129],["option(WITH_WARNINGS    \"Show all warnings during compile\"                            0)",107],["message(\"* Show compile-warnings  : No  (default)\")",117]],"useCount":5905},{"word":"compiled","context":[["#   the compiled library. The provided name will be used for this and a",41],["# Android API level from which OpenCV has been compiled is remembered",40],["# Version Compute Capability from which OpenCV has been compiled is remembered",39],["#   Let the compiler generate a header file for the compiled code. There will",41],["# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)",54],["EXTERNAL_OBJECT true # This is an object file not to be compiled, but only be linked.",66],["#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)",66],["#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)",66],["# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68],["# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68]],"useCount":2094},{"word":"compiler","context":[["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["list( FIND CUDA_NVCC_FLAGS \"--compiler-bindir\" ccbin_found1 )",180],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198],["# force ASM compiler (required for CMake < 2.8.5)",130],["# setup the cross-compiler",113],["#   ANDROID_SYSROOT : path to the compiler sysroot",135],["#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform",134],["# Save compiler ABI information.",942],["# specify the cross compiler",248],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198]],"useCount":18149},{"word":"component","context":[["#   CPACK_INSTALL_CMAKE_PROJECTS        - For each project (path, name, component)",92],["# look for Paging component",59],["#   The Swift installation component that this library belongs to.",60],["#    [COMPONENTS <component...>]",85],["\"Python required for building Qt component (qtdeclarative):\\n\"",132],["# Each component is separate and you must opt in to each module. You must",159],["# Only check existence of private includes if the Private component is",211],["message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",2385],["MESSAGE(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",5696],["# Set the component getting installed.",8081]],"useCount":21696},{"word":"components","context":[["tar --strip-components 1 -xvf",48],["#   LLVM components this library depends on.",60],["# Find all components",50],["message(\"Found Boost components:\")",62],["# Check for required components",77],["# dependencies with components must be find_package()-ed again",605],["#   CPACK_INSTALL_COMMANDS              - Extra commands to install components",92],["# This is part of the Findosg* suite used to find OpenSceneGraph components.",153],["# For each of these components, the following variables are defined:",61],["# system piece by piece in case you need to opt out of certain components",159]],"useCount":4081},{"word":"config","context":[["include( \"${CMAKE_CURRENT_SOURCE_DIR}/../android.toolchain.config.cmake\" OPTIONAL )",129],["# use pkg-config to get the directories and then use these values",582],["string(TOUPPER ${config} config_upper)",355],["# Use pkg-config to get hints about paths",321],["foreach(config ${CUDA_configuration_types})",291],["file( WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/android.toolchain.config.cmake\" \"${__toolchain_config}\" )",125],["NAMES         boost/config.hpp",99],["# defines that must be present in config.h for our headers",86],["# config.h.cmake includes a special #ifdef for Darwin",77],["foreach(config ${CMAKE_CONFIGURATION_TYPES})",84]],"useCount":10422},{"word":"configuration","context":[["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["# if the generator supports configuration types then set",204],["# merge build configuration keywords with library names to correctly deduplicate",586],["# undo build configuration keyword merging after deduplication",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# pack a list of libraries with optional build configuration keywords",586],["message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",2385],["MESSAGE(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",5696],["# Set the install configuration name.",8081]],"useCount":28445},{"word":"configure","context":[["#        none           -> Do not configure the runtime.",111],["# configure rtti",112],["# configure exceptios",112],["DEPENDERS configure",137],["LOG_CONFIGURE 0  # Wrap configure in script to ignore log output from dashboards",140],["# correspond to the ./configure --prefix=$OSGDIR",153],["# correspond to the ./configure --prefix=$SDL2DIR",157],["# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.",160],["# correspond to the ./configure --prefix=$SDLDIR",175],["none           -> Do not configure the runtime.",226]],"useCount":4456},{"word":"configure_file","context":[["configure_file(\"${_gitdescmoddir}/GetGitRevisionDescription.cmake.in\"",76],["configure_file(${CMAKE_ROOT}/Modules/CMakeConfigurableFile.in",63],["configure_file(${_VTKModuleMacros_DIR}/vtkModuleInfo.cmake.in",38],["configure_file(${SOURCE_DIR}/${file}",43],["configure_file(${TEMPLATE_FILE} ${path} @ONLY)",54],["configure_file(${CMAKE_SOURCE_DIR}/cmake/scripts/ROOTConfig.cmake.in",58],["configure_file(\"${CUDA_run_nvcc}\" \"${custom_target_script}\" @ONLY)",62],["configure_file(",1431],["configure_file (",197],["configure_file(\"${GIT_DIR}/HEAD\" \"${HEAD_FILE}\" COPYONLY)",91]],"useCount":4078},{"word":"contain","context":[["# This file will be configured to contain variables for CPack. These variables",370],["# if both are found, set SFML_XXX_LIBRARY to contain both",102],["# documentation will contain sections that can be hidden and shown after the",77],["# directories that contain example code fragments that are included (see",64],["# The INPUT tag can be used to specify the files and/or directories that contain",64],["# directories that contain image that are included in the documentation (see",63],["# will contain hyperlink fields. The RTF file will",63],["# contain links (just like the HTML output) instead of page references",63],["# contain links (just like the HTML output) instead of page references.",63],["# contain include files that are not input files but should be processed by",63]],"useCount":2936},{"word":"contained","context":[["# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.",62],["# self contained",2363],["* The installation package was faulty and contained",399],["#                   to fit your current build type.  Those are not contained",28],["# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful",21],["# Also the version of BISON will be checked by using the version contained",21],["# For each element E in this list, the edges for E are contained in",20],["# Temporary additional general language support is contained within this",16],["# for the :STRING syntax if I have multiple values contained in a",15],["#     in Matlab prints the documentation contained in this file.",15]],"useCount":2971},{"word":"contains","context":[["# If the value of the EXAMPLE_PATH tag contains directories, you can use the",84],["#    contains the text the executable would have printed on stdout and stderr.",119],["# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being",65],["# contains a lot of classes, structs, unions or interfaces.",63],["# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"",59],["# be part of the file/class/namespace that contains it.",59],["# particular #error preprocessor directive whose message string contains the",56],["# name of the file that contains the anonymous namespace. By default",54],["contains \\",53],["# If the value of the INPUT tag contains directories, you can use the",170]],"useCount":2193},{"word":"conversion","context":[["# is prepared for conversion to pdf (using ps2pdf). The pdf file will",63],["# Check various conversion capabilities",27],["# Relative path conversion top directories.",2231],["lib/conversion",63],["# Set flag to indicate that the machine can handle conversion from",44],["# ImageMagick has broken eps to pdf conversion",34],["-wd4267 # Suppress ''var' : conversion from 'size_t' to 'type', possible loss of data'",29],["-wd4244 # Suppress ''argument' : conversion from 'type1' to 'type2', possible loss of data'",29],["# Macro to make some of the conversion tests easier to write/read",27],["MESSAGE(SEND_ERROR \"Using postscript files with pdflatex requires ps2pdf for conversion.\")",27]],"useCount":2897},{"word":"copied","context":[["# copied from catkin/cmake/list_append_unique.cmake to keep pkgConfig",605],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# copied from catkin/cmake/list_append_deduplicate.cmake to keep pkgConfig",586],["# other source files which should be copied to the HTML output directory. Note",52],["# that these files will be copied to the base HTML output directory. Use the",52],["# files needs to be copied into the plugins directory of eclipse. The name of",42],["\"Most of the relevant target properties will be copied from this target to the new unity build target.\"",38],["#       directories or listed by IMAGES are also copied to the output",37],["#       so all input files are copied from the source directory to the",37],["# == Win32 is default behaviour use the LibPack copied in Source tree ============",33]],"useCount":3108},{"word":"copy","context":[["# copy and paste a runnable command line.",198],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",518],["COMMAND ${CMAKE_COMMAND} -E copy",175],["You need to either upgrade to newer NDK or manually copy",113],["# copy shaed stl library to build directory",82],["COMMAND \"${CMAKE_COMMAND}\" -E copy",76],["#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",70],["# will generate a verbatim copy of the header file for each class for",63],["# copy the values from the LIBRARY variables",50],["# Optionally copy Doxyfile.in in the directory of CMakeLists.txt and edit it.",47]],"useCount":3990},{"word":"core","context":[["set(BOARD_CORE ${${BOARD_ID}.build.core})",55],["#  OGRE_LIBRARIES - link these to use the OGRE core",58],["# Set build-directive (used in core to tell which buildtype we used)",188],["# output generic information about the core and buildtype chosen",121],["message(\"* Install core to        : ${CMAKE_INSTALL_PREFIX}\")",118],["option(SCRIPTS          \"Build core with scripts included\"                            1)",85],["message(\"* Build core w/PCH       : No\")",114],["message(\"* Build core w/PCH       : Yes (default)\")",114],["option(WITH_COREDEBUG   \"Include additional debug-code in core\"                       0)",105],["\"/boilermake/opencv-src/opencv/modules/core/include\"",101]],"useCount":15122},{"word":"corresponding","context":[["# The corresponding makefile is:",1373],["# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules",64],["# corresponding subdirectories.",43],["\"cotire will add corresponding #undef directives to the generated unit source file after this file is included.\"",38],["\"cotire will add corresponding #undef directives to the generated unit source file after each target source file.\"",38],["\"cotire will add corresponding #undef directives to the generated unit source file before this file is included.\"",38],["\"cotire will add corresponding #undef directives to the generated unit source file before each target source file.\"",38],["# classes, or namespaces to their corresponding documentation. Such a link can",35],["BRIEF_DOCS \"The name of the generated unity build target corresponding to this target.\"",34],["# linking to corresponding libraries.  This requires matching libraries",33]],"useCount":2458},{"word":"coverage","context":[["set(CMAKE_C_FLAGS_PROFILE          \"-g3 -fno-inline -ftest-coverage -fprofile-arcs\")",94],["#    which runs your test executable and produces a lcov code coverage report:",82],["\"-g -O0 --coverage -fprofile-arcs -ftest-coverage\"",126],["COMMENT \"Resetting code coverage counters to zero.\\nProcessing code coverage counters and generating report.\"",94],["COMMENT \"Resetting code coverage counters to zero.\\nProcessing code coverage counters and generating report.\"",94],["COMMENT \"Cobertura code coverage report saved in ${_outputname}.xml.\"",91],["\"-g -O0 --coverage -fprofile-arcs -ftest-coverage\"",126],["COMMENT \"Open ./${_outputname}/index.html in your browser to view the coverage report.\"",91],["COMMENT \"Running gcovr to produce Cobertura code coverage report.\"",90],["# 3. Set compiler flags to turn off optimization and enable coverage:",84]],"useCount":2564},{"word":"cpp","context":[["\"/usr/share/cmake-2.8/Modules/CMakeCXXCompilerABI.cpp\"",279],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",166],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)",179],["# \t额外计算默认目录的md5，其中包括src,inc,proto,src.android/cpp,src.ios/cpp,src.win/cpp，src.unix/cpp",81],["# \t额外计算默认目录的md5，其中包括src,inc,proto,src.android/cpp,src.ios/cpp,src.win/cpp，src.unix/cpp",81],["# \t额外计算默认目录的md5，其中包括src,inc,proto,src.android/cpp,src.ios/cpp,src.win/cpp，src.unix/cpp",81],["# but we cannot let automoc handle them, as the .cpp files don't exist yet when",83],["# cmake is run for the very first time on them -> however the .cpp files might",83],["# we need to add generated .cpp files to the sources (to compile them),",83],["set( CMAKE_CXX_SOURCE_FILE_EXTENSIONS cc cp cxx cpp CPP c++ C )",109]],"useCount":10918},{"word":"create","context":[["#   CPACK_GENERATOR                     - Generator used to create package",92],["# create dummy targets for exported code generation targets to make life of users easier",605],["# create plugins.cfg",58],["# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create",58],["# When a file name is specified after GENERATE_TAGFILE, doxygen will create",63],["# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target",98],["# create uninstaller target (allows for using \"make uninstall\")",65],["# it doesn't exist then we need to create an empty one, so we can",71],["# Iterate over the macro arguments and create custom",68],["# macro used to create the names of output files preserving relative dirs",67]],"useCount":4756},{"word":"csw","context":[["/opt/csw/include # Blastwave",286],["/opt/csw",1308],["/opt/csw # Blastwave",760],["/opt/csw/lib",486],["/opt/csw/ # Blastwave",26],["/opt/csw     # Blastwave",41],["/opt/csw/    # Blastwave",47],["/opt/csw/include/SDL # Blastwave",86],["/opt/csw/include",187],["PATHS /usr/local /usr /sw /opt/local /opt/csw /opt",23]],"useCount":3337},{"word":"cuda_execute_process","context":[["macro(cuda_execute_process status command)",198],["# cuda_execute_process - Executes a command with optional command echo and status message.",198],["cuda_execute_process(",1783]],"useCount":2179},{"word":"current","context":[["# get the directory of the current file, used later on in the file",43],["# in the modules index. If set to NO, only the current project's groups will",62],["# where doxygen was started. If left blank the current directory will be used.",63],["# processed.  Using this variable, we can pull out the current path, and",65],["# doxygen should invoke to get the current version for each file (typically from",75],["# prefix of the current package, then the prefix of the new package etc, which are",42],["# detect current host platform",129],["# used for the current package. For this to work, the first parameter must be the",42],["ans(current)",40],["# Returns the refspec and sha hash of the current head revision",90]],"useCount":2594},{"word":"custom","context":[["# append custom deprecation text if available",605],["# Create custom commands and targets for each file.",247],["# Param _targetname     The name of new the custom make target",184],["# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target",98],["#\t\t\t\tmy_coverage_target  # Name for custom target.",71],["# Iterate over the macro arguments and create custom",68],["# This helper macro populates the following variables and setups up custom",67],["# Add a custom target to generate a c or ptx file. ######################",66],["# executing custom command, no need to re-check for dependencies",57],["# Add dependencies on the (not-yet-created) custom lipo target.",60]],"useCount":4576},{"word":"cxx","context":[["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/gabi++/include\" )",110],["SET(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",77],["# Hidden visibilty is required for cxx on iOS",83],["\"CMakeFiles/feature_tests.cxx\"",89],["set( CMAKE_CXX_SOURCE_FILE_EXTENSIONS cc cp cxx cpp CPP c++ C )",109],["set( __libstl                 \"${ANDROID_NDK}/sources/cxx-stl/gabi++/libs/${ANDROID_NDK_ABI_NAME}/libgabi++_static.a\" )",110],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/stlport/stlport\" )",110],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",166],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)",179],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/system/include\" )",224]],"useCount":3990},{"word":"d","context":[["set(includedirs ${includedirs} -I${d})",101],["NAMES ${FIND_SFML_COMPONENT_NAME}-d",157],["foreach( d ${incdirs})",136],["set(definitions ${definitions} -D${d})",105],["foreach( d ${defs})",103],["foreach(d ${ARGN})",102],["endforeach(d)",108],["# we could read this from version.hpp, but for that to work we'd",90],["ENDFOREACH(d)",98],["WIN32_DEBUG_POSTFIX d",99]],"useCount":6346},{"word":"data","context":[["# search data is written to a file for indexing by an external tool. With the",35],["ans(data)",41],["set(PAL_PTRACE \"ptrace((cmd), (pid), (void*)(addr), (data))\")",49],["# copies of runtime library data in different modules, resulting in",49],["${VTK_CMAKE_DIR}/vtkWrapperInit.data.in",54],["#    <target>   # Name of data management target",54],["# finish the data file for the init file",56],["${CMAKE_CURRENT_BINARY_DIR}/${TARGET}Init.data",65],["set(GIT_DATA \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/git-data\")",93],["set(PAL_PTRACE \"ptrace((cmd), (pid), (caddr_t)(addr), (data))\")",82]],"useCount":3319},{"word":"debug","context":[["if(\"${library}\" MATCHES \"^(debug|optimized|general)$\")",414],["if(\"${lib}\" MATCHES \"^(debug|optimized|general)$\")",415],["# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value",204],["if(\"${lib}\" MATCHES \"^debug|optimized|general$\")",173],["if(\"${library}\" MATCHES \"^debug|optimized|general$\")",172],["# debug and not release",118],["# debug library",124],["# if only the release version was found, set the debug variable also to the release version",165],["# if only the debug version was found, set the release variable also to the debug version",165],["# if only the debug version was found, set the release variable also to the debug version",165]],"useCount":12732},{"word":"def","context":[["set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",391],["set_source_files_properties(${library}.def PROPERTIES GENERATED 1)",35],["set_target_properties(${library} PROPERTIES ${ROOT_LIBRARY_PROPERTIES} LINK_FLAGS -DEF:${library}.def)",35],["#---create a shared library with the .def file------------------------",35],["SET(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",101],["set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",345],["#---set the .def file as generated------------------------------------",35],["ENDFOREACH (def)",41],["endforeach (def)",48],["SET(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",77]],"useCount":2049},{"word":"default","context":[["<default>true</default>",175],["<default>false</default>",261],["# verbose:BOOL=<>          OFF: Be as quiet as possible (default)",200],["# Search default search paths, after we search our own set of paths.",196],["\"/usr/share/qt4/mkspecs/default\"",186],["<default>true</default>",175],["<default>false</default>",261],["# adjust the default behaviour of the FIND_XXX() commands:",340],["# The default value is: YES.",1098],["# The default value is: NO.",1874]],"useCount":23151},{"word":"define","context":[["# Once run this will define:",197],["# define this for now until a future version fixes this bug.",192],["# Once done this will define",4139],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# Once done this will define:",222],["#define CONFIG_H",147],["#define _PTRDIFF_T",111],["#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)",209],["# Once done, this will define",984],["# This module will define the following variables:",241]],"useCount":20237},{"word":"defined","context":[["# also defined, but not for general use are",608],["# Variables defined by this module:",296],["# defined in the generating passes of nvcc invokation.  We will go ahead and manually",192],["\"STACK_DIRECTION is not defined.  Please specify -DSTACK_DIRECTION=1 \"",92],["#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)",92],["#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)",92],["#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)",92],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["#elif defined(MAXPATHLEN)",99],["# Also defined, but not for general use are:",104]],"useCount":10490},{"word":"defines","context":[["# This module defines",3013],["# This script defines the following variables:",127],["# It defines the following variables",111],["# The module defines the following variables:",221],["# It defines the following variables:",93],["# defines that must be present in config.h for our headers",86],["#  This module defines the following variables:",84],["/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */",73],["# This module defines:",350],["# This module defines the following variables:",388]],"useCount":6811},{"word":"definitions","context":[["set(definitions ${definitions} -D${d})",105],["set(definitions ${definitions} -D${d})",105],["# replacements, missing definitions are set to their default value.",63],["# Get the list of definitions from the directory property",65],["# definitions of macro and function",63],["# use this to add preprocessor definitions",111],["# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.",58],["# parse definitions from cflags; drop -D* from CFLAGS",45],["# flags and definitions",128],["# Preprocessor definitions for this target.",6763]],"useCount":9260},{"word":"demos","context":[["\"core/demos/CMakeFiles/demo_tutorial_annotation_store_assignment_1_hint.dir/DependInfo.cmake\"",20],["\"core/demos/CMakeFiles/demo_tutorial_index_indices_assignment_1.dir/DependInfo.cmake\"",20],["\"core/demos/CMakeFiles/demo_tutorial_read_mapping_minimapper.dir/DependInfo.cmake\"",20],["\"extras/demos/CMakeFiles/CMakeDirectoryInformation.cmake\"",21],["\"core/demos/CMakeFiles/CMakeDirectoryInformation.cmake\"",21],["\"extras/demos/CMakeFiles/demo_tutorial_first_steps_solution_1.dir/DependInfo.cmake\"",20],["\"core/demos/CMakeFiles/demo_file_speed.dir/DependInfo.cmake\"",20],["\"core/demos/CMakeFiles/demo_tutorial_alignments_alignment_local_waterman_eggert.dir/DependInfo.cmake\"",20],["set_target_properties(${_name} PROPERTIES FOLDER \"Tools and demos\")",54],["\"core/demos/CMakeFiles/demo_index_mummy.dir/DependInfo.cmake\"",20]],"useCount":6137},{"word":"dep","context":[["find_package(${dep})",40],["string(TOUPPER ${dep} depup)",60],["foreach(dep ${${PCL_SUBSYS_DEPENDIES}})",36],["add_dependencies(${vtk-module} ${${dep}_LIBRARIES})",35],["foreach(dep IN LISTS ${vtk-module}_LINK_DEPENDS)",57],["find_package(${dep} REQUIRED)",49],["foreach(dep ${dependencies})",48],["#   dep name of find rule for dependency, used uppercased for variable prefix",80],["endforeach(dep)",107],["${CMAKE_BINARY_DIR}/VERSION.dep",45]],"useCount":2362},{"word":"depend","context":[["string(REPLACE \" \" \";\" depend_list ${depend})",609],["# depend on target's generated source files",38],["foreach(depend ${depends})",605],["# This file does not depend on other imported targets which have",184],["# output depend on the dependency file itself, which should cause the",71],["# These output files depend on the source_file and the contents of cmake_dependency_file",67],["# depend on target source files marked with custom COTIRE_DEPENDENCY property",38],["# make source files depend on precompiled header",44],["set(NVCC_generated_dependency_file \"${cuda_compile_intermediate_directory}/${generated_file_basename}.NVCC-depend\")",48],["set(cmake_dependency_file \"${cuda_compile_intermediate_directory}/${generated_file_basename}.depend\")",48]],"useCount":2643},{"word":"dependencies","context":[["# dependencies",173],["# The set of files for implicit dependencies of each language:",10677],["# add dependencies to all check dependencies targets",173],["# add dependencies to all check dependencies targets",173],["# can cause incorrect dependencies when #including files based on this macro which is",192],["# the dependency file needed by CMake to compute dependencies.  In addition the",198],["# simple dependencies must only be find_package()-ed once",605],["# dependencies with components must be find_package()-ed again",605],["# Force unix paths in dependencies.",2233],["# The set of languages for which implicit dependencies are needed:",10677]],"useCount":31326},{"word":"dependency","context":[["# Generate the cmake readable dependency file to a temp file.  Don't put the",198],["\"Generating dependency file: ${NVCC_generated_dependency_file}\"",197],["# for dependency generation and hope for the best.",192],["#   dep name of find rule for dependency, used uppercased for variable prefix",80],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# Per-language clean rules from dependency scanning.",11977],["# the dependency file needed by CMake to compute dependencies.  In addition the",198],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# Generate the dependency file",198],["# Set dependency list",246]],"useCount":16915},{"word":"depends","context":[["#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)",72],["# NOTE: Singular variables for this library, plural for libraries this this lib depends on.",311],["#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)",135],["#      toolchain to be used. The list of possible values depends on the NDK",108],["# depends on exist.  If they don't then we should clear the dependency",71],["# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking",69],["DEPENDS ${depends}",65],["#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking",64],["set(depends \"\")",312],["foreach(depend ${depends})",605]],"useCount":4289},{"word":"deprecated","context":[["# warn when using a deprecated package",605],["#  n        using the STLport deprecated \"native iostreams\" feature",66],["# disable (NO) the deprecated list. This list is created by putting",62],["# \\deprecated commands in the documentation.",62],["message(WARNING \"--host-compilation flag is deprecated in CUDA version >= 3.0.  Removing --host-compilation C flag\" )",59],["#The following deprecated settings are for backwards compatibility with CMake1.4",57],["# This deprecated setting is for backward compatibility with CMake1.4",50],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations\")",47],["# to avoid those deprecated warnings. Here's a helper that does just that.",45],["#  PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)",43]],"useCount":2106},{"word":"description","context":[["# in this list, if found as the leading text of the brief description, will be",59],["option(${variable} \"${description}\" OFF)",60],["# description. Set this tag to YES if you prefer the old behaviour instead.",62],["# the brief description of a member or function before the detailed description.",63],["# the brief description of a member or function before the detailed description.",63],["# description below).",69],["# description.",84],["# comment as the brief description. If set to NO, the JavaDoc",62],["# comments) as a brief description. This used to be the default behaviour.",62],["option(${variable} \"${description}\" ON)",60]],"useCount":2075},{"word":"details","context":[["# get all the details about standalone toolchain",129],["#----Installation details-------------------------------------------------------",105],["# get all the details about NDK",129],["# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.",98],["#   for more details.",402],["#   details.",794],["# Implementation details:",81],["#      files. See additional details below.",73],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066]],"useCount":5437},{"word":"different","context":[["# different rules for the same moc file",83],["# if you have different versions of the headers for different build types",46],["# Helper to avoid clashes of files with the same basename but different paths.",47],["# copies of runtime library data in different modules, resulting in",49],["# scopes will look different, etc.",54],["# For instance, some of the names that are used will be different. The list",62],["# This is useful so different doxyrules.make files included by the same",62],["#     [+] support different build flags for Release and Debug configurations",63],["# Copy the file if it is different",199],["\"Copy if different ${cmake_dependency_file}.tmp to ${cmake_dependency_file}\"",199]],"useCount":2812},{"word":"dir","context":[["\"gtest/CMakeFiles/gtest.dir/DependInfo.cmake\"",167],["# Include dir",373],["\"/home/bharat/gtsam/gtsam-3.2.0/build/gtsam/CMakeFiles/gtsam.dir/DependInfo.cmake\"",172],["\"CMakeFiles/tests.dir/DependInfo.cmake\"",201],["ENDFOREACH(dir)",210],["endforeach(dir)",282],["# Set the include dir variables and the libraries and let libfind_process do the rest.",345],["\"CMakeFiles/clean_test_results.dir/DependInfo.cmake\"",162],["\"CMakeFiles/doxygen.dir/DependInfo.cmake\"",163],["\"gtest/CMakeFiles/gtest_main.dir/DependInfo.cmake\"",167]],"useCount":34798},{"word":"directories","context":[["# for libraries and headers in the target directories",216],["# and *.h) to filter out the source-files in the directories. If left",127],["# setup output directories",129],["# If the value of the INPUT tag contains directories, you can use the",170],["# search for programs in the build host directories",214],["# Update the list of include directories for the project",124],["# output information about installation-directories and locations",123],["# Relative path conversion top directories.",2231],["# use pkg-config to get the directories and then use these values",582],["#  CMAKE_REQUIRED_INCLUDES = list of include directories",190]],"useCount":12243},{"word":"directory","context":[["# testing this directory and lists subdirectories to be tested as well.",2367],["set( EXECUTABLE_OUTPUT_PATH \"${LIBRARY_OUTPUT_PATH_ROOT}/bin\" CACHE PATH \"Output directory for applications\" )",134],["# I need to prefix each file and directory with the correct path",122],["# directory containing the executable.",118],["# The C and CXX include file regular expressions for this directory.",2244],["# Fortran module output directory.",622],["\"Inherited from directory.\"",332],["## Then modify the CMakeLists.txt file in the root directory of your",231],["## This file should be placed in the root directory of your project.",230],["DOC \"The directory where GL/glew.h resides\")",170]],"useCount":24176},{"word":"dirs","context":[["# split off the link dirs (for rpath)",53],["# get include dirs",70],["# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain",60],["# - Try to find Boost include dirs and libraries",53],["# extract link dirs for rpath",53],["## split off the link dirs (for rpath)",50],["# default search dirs",48],["## extract link dirs for rpath",48],["# look for plugin dirs",61],["# macro used to create the names of output files preserving relative dirs",67]],"useCount":3113},{"word":"disable","context":[["# disable (NO) the bug list. This list is created by putting \\bug",62],["# Set the SHOW_USED_FILES tag to NO to disable the list of files generated",62],["# disable (NO) the deprecated list. This list is created by putting",62],["--disable-shared",89],["# which an include is specified. Set to NO to disable this.",63],["# disable (NO) the todo list. This list is created by putting \\todo",63],["# Set to NO to disable this.",63],["# disable (NO) the test list. This list is created by putting \\test",63],["# To disable the ambiguous behavior, the user need only",66],["#     [+] added toolchain option to disable SWIG search",66]],"useCount":2450},{"word":"distribute","context":[["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",518],["# (To distribute this file outside of CMake, substitute the full",3976],["# format and will distribute the generated files over these directories.",58],["# distribute copies to the public, perform publicly and display",397],["#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",70],["# (To distribute this file outside of this repository, substitute the full",30],["# We re-distribute libstlport.so which is a symlink to libstlport.so.1",28],["# copy, modify, merge, publish, distribute, sublicense, and/or sell",45],["# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",45],["# (To distribute this file outside of extra-cmake-modules, substitute the full",27]],"useCount":5340},{"word":"distribution","context":[["#     documentation and/or other materials provided with the distribution.",153],["#    documentation and/or other materials provided with the distribution.",268],["#   documentation and/or other materials provided with the distribution.",293],["#   and/or other materials provided with the distribution.",310],["# documentation and/or other materials provided with the distribution.",770],["## the top level of the deal.II distribution.",474],["#    and/or other materials provided with the distribution.",340],["#     and/or other materials provided with the distribution.",120],["# distribution.",111],["#       documentation and/or other materials provided with the distribution.",374]],"useCount":4159},{"word":"dll","context":[["find_path(OGRE_PLUGIN_DIR_DBG NAMES \"${PLUGIN}_d.dll\" HINTS ${OGRE_PLUGIN_SEARCH_PATH_DBG}",59],["find_path(OGRE_PLUGIN_DIR_REL NAMES \"${PLUGIN}.dll\" HINTS ${OGRE_PLUGIN_SEARCH_PATH_REL}",59],["# set up output paths for executable binaries (.exe-files, and .dll-files on DLL-capable platforms)",85],["#    \"http://timestamp.verisign.com/scripts/timestamp.dll\")",56],["# Add version information to the exe and dll files",54],["find_file(OGRE_${PLUGIN}_DBG NAMES \"${PLUGIN}_d.dll\" HINTS ${OGRE_PLUGIN_DIR_DBG})",52],["find_file(OGRE_${PLUGIN}_REL NAMES \"${PLUGIN}.dll\" HINTS ${OGRE_PLUGIN_DIR_REL})",52],["find_file(OGRE_BINARY_DBG NAMES \"OgreMain_d.dll\" HINTS ${OGRE_BIN_SEARCH_PATH}",50],["# Avoid finding the .dll in the PATH.  We want the .lib.",105],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171]],"useCount":4665},{"word":"do","context":[["# SDL2_FOUND, if false, do not try to link to SDL2",164],["# dynamic Boost library, the default is to do a static link.  You",89],["# furnished to do so, subject to the following conditions:",659],["# Set the include dir variables and the libraries and let libfind_process do the rest.",345],["# I think it has something to do with the CACHE STRING.",237],["# do nothing",167],["# modules won't do it for you. This is to allow you control over your own",159],["# This module supports requiring a minimum version, e.g. you can do",143],["#    Make sure to do the following in your scripts:",135],["# do not go through all toolchains if we know the name",110]],"useCount":8289},{"word":"doc","context":[["\"doc/snippets\"",476],["# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming",66],["add_custom_target(doc)",65],["/usr/share/doc/NVIDIA_GLX-1.0/include",64],["QHP_VIRTUAL_FOLDER     = doc",83],["set(_state \"doc\")",88],["\"doc/examples\"",118],["\"  http://doc.qt.io/qt-5/windows-requirements.html\"",132],["\"/home/cmeon/SimplexLP/eigen/doc/snippets\"",238],["\"../doc/snippets\"",238]],"useCount":3486},{"word":"documentation","context":[["# documentation and/or other materials provided with the distribution.",770],["#    documentation and/or other materials provided with the distribution.",268],["# see documentation at top",221],["# commands in the documentation.",188],["#       documentation and/or other materials provided with the distribution.",374],["#   documentation and/or other materials provided with the distribution.",293],["# documentation.",183],["#     documentation and/or other materials provided with the distribution.",153],["#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",136],["# will be included in the documentation.",126]],"useCount":11435},{"word":"does","context":[["# This file does not depend on other imported targets which have",184],["/* On some platforms (e.g. HP-UX) the multithreading c-runtime does not",72],["# The AMD SDK currently does not place its headers",76],["/* Define to `unsigned int' if <sys/types.h> does not define. */",77],["/* Define to empty if `const' does not conform to ANSI C. */",81],["# does it submit to any jurisdiction.",163],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["#                               what CMake does.",198],["# In applying this licence, ECMWF does not waive the privileges and immunities",213],["but this file does not exist.  Possible reasons include:",399]],"useCount":6219},{"word":"doesn","context":[["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# 1.1 toolkit on linux doesn't appear to have a separate library on",66],["# default FindOpenGL.cmake module doesn't work with your system as an",159],["# it doesn't exist then we need to create an empty one, so we can",71],["# Include the dependency file.  Create it first if it doesn't exist .  The",66],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["# CMake doesn't display the -framework Cocoa string in the UI even",239],["# Sun Pro doesn't provide macros to indicate whether exceptions and",52],["# doesn't support long names like on DOS, Mac, or CD-ROM.",62],["# For threads, as mentioned Apple doesn't need this.",239]],"useCount":3092},{"word":"don","context":[["# seem to provide SDL2main for compatibility even though they don't",170],["# For Windows and Mac, don't need to explicitly include the math library",131],["#    The flags will be prepopulated with critical flags, so don't loose them.",111],["# We don't know the Boost version, so assume it's",89],["# exist at a later run. at that time we need to skip them, so that we don't add two",83],["# but we cannot let automoc handle them, as the .cpp files don't exist yet when",83],["# depends on exist.  If they don't then we should clear the dependency",71],["# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we",64],["# use, i.e. don't skip the full RPATH for the build tree",62],["# Makefile don't overwrite each other's variables.",62]],"useCount":4068},{"word":"done","context":[["done",146],["# Once done this will define",4139],["# with the CMake distribution. This is NOT my work. All work was done by the",109],["# Adding location for the tag files is done as follows:",83],["# only done if one of the specified strings matches the left-hand part of",63],["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability",198],["# The following are set after configuration is done:",163],["# Once done this will define:",222],["# Once done, this will define",984]],"useCount":7974},{"word":"dot","context":[["# remove the intermediate dot files that are used to generate",62],["# arrows in the dot generated graphs.",62],["# The tag DOT_PATH can be used to specify the path where the dot tool can be",63],["# will interpret the first line (until the first dot) of a JavaDoc-style",63],["# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output",79],["# found. If left blank, it is assumed the dot tool can be found in the path.",80],["# makes dot run faster, but since only newer versions of dot (>1.8.10)",59],["# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is",84],["# Configuration options related to the dot tool",131],["# contain dot files that are included in the documentation (see the",62]],"useCount":2187},{"word":"doxygen","context":[["# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all",80],["# If the UML_LOOK tag is set to YES doxygen will generate inheritance and",82],["# tag is set to YES, then doxygen will reuse the documentation of the first",83],["# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in",83],["\"CMakeFiles/doxygen.dir/DependInfo.cmake\"",163],["# The INPUT_FILTER tag can be used to specify a program that doxygen should",87],["\"/opt/ros/indigo/share/catkin/cmake/tools/doxygen.cmake\"",88],["# each generated HTML page. If it is left blank doxygen will generate a",126],["# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is",84],["# documentation generated by doxygen is written. Doxygen will use this",84]],"useCount":9582},{"word":"during","context":[["option(WITH_WARNINGS    \"Show all warnings during compile\"                            0)",107],["#   CPACK_NSIS_EXTRA_INSTALL_COMMANDS   - Extra commands used during install",92],["#   CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS - Extra commands used during uninstall",92],["# skip if already processed during this run",76],["CACHE STRING \"Flags used by the C++ compiler during coverage builds.\"",72],["CACHE STRING \"Flags used for linking binaries during coverage builds.\"",71],["CACHE STRING \"Flags used by the shared libraries linker during coverage builds.\"",71],["CACHE STRING \"Flags used by the C compiler during coverage builds.\"",70],["# Prints out extra information about the cuda file during compilation",65],["# Show infomation about the options selected during configuration",130]],"useCount":2431},{"word":"e","context":[["# l.e.galup  9-20-02",176],["# instruction, i.e. will overwrite variable values (foreach's _x will survive)",132],["# files in one run (i.e. multiple -o and -T options on the command line). This",80],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)",73],["/* On some platforms (e.g. HP-UX) the multithreading c-runtime does not",72],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278],["# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables",278],["#   Pass them in list form, e.g.: \"-j;2\" for -j 2",183],["# This module supports requiring a minimum version, e.g. you can do",143]],"useCount":8100},{"word":"each","context":[["# each generated HTML page. If it is left blank doxygen will generate a",126],["#                          ON : Describe each step",198],["# will generate a graph for each documented class showing the direct and",126],["# Each component is separate and you must opt in to each module. You must",159],["# The set of files for implicit dependencies of each language:",10677],["# Load information for each installed configuration.",163],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["# file checks the output of each command and if the command fails it deletes the",198],["# Create custom commands and targets for each file.",247],["# Include the install script for each subdirectory.",1672]],"useCount":19563},{"word":"eigen","context":[["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../Eigen\"",82],["\"/home/cmeon/SimplexLP/eigen\"",969],["\"/home/cmeon/SimplexLP/eigen/test\"",552],["\"/home/cmeon/SimplexLP/eigen/doc/snippets\"",238],["PATH_SUFFIXES eigen3 eigen",105],["#  EIGEN3_INCLUDE_DIR - the eigen include directory",104],["#  EIGEN3_FOUND - system has eigen lib with correct version",101],["#  EIGEN3_VERSION - eigen version",100],["\"/home/cmeon/SimplexLP/eigen/unsupported/test\"",82],["\"/home/cmeon/SimplexLP/eigen/unsupported/test/../../unsupported\"",82]],"useCount":2923},{"word":"einstein","context":[["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/einstein/openairinterface5g/openair-cn/SECU\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair2/COMMON\"",242],["\"/home/einstein/openairinterface5g/common/utils/msc\"",249]],"useCount":16851},{"word":"else","context":[["else(APPLE)",213],["else(_found)",200],["# and spaces, anything else is left up to the user to fix if they want to",198],["else( )",289],["else (WIN32)",332],["else(WIN32)",506],["else",556],["#else",1956],["else ()",11252],["else()",89116]],"useCount":114788},{"word":"elseif","context":[["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$\")",323],["elseif(IS_ABSOLUTE ${library})",605],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$\")",348],["elseif(UNIX)",402],["elseif(\"${idir} \" STREQUAL \"include \")",414],["elseif(WIN32)",481],["elseif (UNIX)",501],["elseif(APPLE)",551],["elseif(\"${CMAKE_INSTALL_CONFIG_NAME}\" MATCHES \"^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$\")",583],["elseif(TARGET ${library})",586]],"useCount":33221},{"word":"empty","context":[["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["\"Defaults to empty.\"",140],["# if function is found in libc, result will be empty",92],["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["\"Defaults to empty string.\"",342],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["# CMake policy 0007 NEW states that empty list elements are not",191],["/* Define to empty if `const' does not conform to ANSI C. */",81],["# it doesn't exist then we need to create an empty one, so we can",71],["# the mscgen tool resides. If left empty the tool is assumed to be found in the",75]],"useCount":4031},{"word":"enable","context":[["--enable-static",67],["# 3. Set compiler flags to turn off optimization and enable coverage:",84],["# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or",62],["# -- uncomment lines below this to enable signing --",80],["# enable parsing support.",79],["# The ENABLED_SECTIONS tag can be used to enable conditional",70],["# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68],["# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)",68],["# The GENERATE_TESTLIST tag can be used to enable (YES) or",63],["# The GENERATE_TODOLIST tag can be used to enable (YES) or",63]],"useCount":3368},{"word":"enabled","context":[["# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI",98],["#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime",112],["#   ANDROID_RTTI : if rtti is enabled by the runtime",112],["# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled",66],["# Add a link phase for the separable compilation if it has been enabled.  If",65],["# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS",65],["# overviews. This option has no effect if EXTRACT_ALL is enabled.",63],["# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then",63],["#   VFPV3 : TRUE if VFP version 3 is enabled",134],["#   NEON : TRUE if NEON unit is enabled",134]],"useCount":4675},{"word":"end","context":[["\"end\\n\")",50],["##end",505],["# ------------------------- vim: set sw=2 sts=2 et: --------------- end-of-file",392],["## -- end",264],["# So I use a temporary variable until the end so I can set the",237],["end()",162],["#  Notification to end user about what was found",54],["# up to the end-user.",76],["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["## Store global variables before overwriting (then restore at end of this file.)",143]],"useCount":3017},{"word":"endforeach","context":[["endforeach(COMPONENT)",131],["endforeach (i)",133],["endforeach()",46007],["endforeach ()",3083],["endforeach(dir)",282],["endforeach(_dep)",125],["endforeach(file)",222],["endforeach(i)",208],["endforeach(file ${SRC_CPP_FILES})",173],["endforeach(file ${INTERNAL_CPP_FILES})",173]],"useCount":55985},{"word":"endfunction","context":[["endfunction(ogre_create_vcproj_userfile)",24],["endfunction(cotire_setup_unity_build_target)",34],["endfunction(find_python_module)",53],["endfunction ()",1027],["endfunction()",24120],["# endfunction()",29],["endfunction(cotire_target)",28],["endfunction(ogre_install_target)",24],["endfunction(ogre_config_sample_common)",24],["endfunction(cotire_target_link_libraries)",28]],"useCount":26637},{"word":"endif","context":[["endif()",336733],["#   endif()",440],["endif(MSVC)",407],["endif(APPLE)",592],["endif (WIN32)",872],["endif ()",39237],["#endif",8108],["endif(WIN32)",1323],["#endif()",964],["endif( )",889]],"useCount":423336},{"word":"endmacro","context":[["endmacro(clear_if_changed)",68],["endmacro(findpkg_begin)",68],["endmacro(create_search_paths)",72],["endmacro(findpkg_finish)",75],["endmacro(get_debug_names)",75],["endmacro(make_library_set)",75],["endmacro()",20798],["endmacro(getenv_path)",80],["endmacro(_eigen3_check_version)",111],["endmacro ()",1439]],"useCount":26654},{"word":"entry","context":[["# This will remove the Files entry from the Quick Index and from the",52],["</entry>",952],["entry initialized from old variable name\")",89],["# If a library is found, replace its cache entry with its REALPATH",66],["# Add entry to main list",26],["# entry \"Boost_DIR\".  If found, the package configuration file is loaded",33],["# This will remove the Namespaces entry from the Quick Index",35],["# Each entry in this list is a set of extra flags to try",51],["string(REPLACE \"|\" \";\" tuple \"${entry}\")",58],["# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the",64]],"useCount":2398},{"word":"environment","context":[["# SDL2_LIBRARY to override this selection or set the CMake environment",175],["# programs in the host environment",344],["You should either set an environment variable:",138],["# $OSGDIR is an environment variable that would",153],["# $SDL2DIR is an environment variable that would",157],["# $SDLDIR is an environment variable that would",175],["# search headers and libraries in the target environment, search",351],["#      Can be set as environment variable. Can be set only at first cmake run.",205],["# here is the target environment located",273],["# where is the target environment",315]],"useCount":6066},{"word":"error","context":[["#     [~] toolchain exits with error if ARM_TARGET is not recognized",65],["# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.",66],["#\tmessage(\"Please report the following error to the project!\")",68],["#error cmake_ARCH arm",60],["RESULT_VARIABLE nok ERROR_VARIABLE error",85],["# error but continue",114],["# fatal error",114],["# error message that lists the libraries we were unable to find.",94],["# the output so that it tests false if an error occurs.",93],["# and error messages should be written. If left blank the output is written",62]],"useCount":4795},{"word":"etc","context":[["# additional Unix paths (FreeBSD, etc).",436],["# include the index chapters (such as File Index, Compound Index, etc.)",62],["# Also handles errors in case library detection was required, etc.",62],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171],["# of all members will be omitted, etc.",62],["include(${HRYKY_CODEBASE_ROOT}/etc/common.cmake)",65],["# Locate CUDA, Set Build Type, etc.",66],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["# (namespaces, classes, functions, etc.) that should be excluded from the",75],["# set up output paths ofr static libraries etc (commented out - shown here as an example only)",78]],"useCount":3692},{"word":"example","context":[["# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.",98],["# example).",160],["# example:",493],["# directories that contain example code fragments that are included (see",64],["# Here is a short example for a target named test:",93],["#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")",65],["# for example the icon used in the menu and tabs for the",77],["set(MACOSX_BUNDLE_GUI_IDENTIFIER com.example)",78],["# set up output paths ofr static libraries etc (commented out - shown here as an example only)",78],["# For example:",90]],"useCount":3741},{"word":"exceptions","context":[["set( CMAKE_CXX_FLAGS \"-fno-exceptions ${CMAKE_CXX_FLAGS}\" )",112],["#                          Implies -fno-rtti -fno-exceptions for NDK before r7.",218],["#                          Implies -frtti -fno-exceptions for NDK r7 and newer.",218],["# find libsupc++.a - rtti & exceptions",113],["system_re      -> Same as system but with rtti and exceptions.",113],["set( CMAKE_C_FLAGS \"-fno-exceptions ${CMAKE_C_FLAGS}\" )",112],["#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on",111],["#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime",112],["# runtime choice (STL, rtti, exceptions)",112],["#                          Implies -frtti -fno-exceptions.",329]],"useCount":2399},{"word":"exe","context":[["#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..",132],["#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform",135],["# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared",100],["set( TOOL_OS_SUFFIX \".exe\" )",148],["#   $ cmake.exe --build .",111],["# set up output paths for executable binaries (.exe-files, and .dll-files on DLL-capable platforms)",85],["#     Android NDK r7 (and newer) already has make.exe on board.",70],["# cl.exe options used",114],["#   $ cmake.exe -G\"MinGW Makefiles\"",135],["NAMES nvcc nvcc.exe",130]],"useCount":3234},{"word":"executable","context":[["#    which runs your test executable and produces a lcov code coverage report:",82],["# OSX  executable are always PIC",92],["# building a shared library, shared module, or executable that links",100],["set( CMAKE_EXE_LINKER_FLAGS    \"-Wl,-z,nocopyreloc\"      CACHE STRING \"executable linker flags\" )",110],["# directory containing the executable.",118],["#    contains the text the executable would have printed on stdout and stderr.",119],["#    indicates whether the executable would have been able to run on its",150],["# set up output paths for executable binaries (.exe-files, and .dll-files on DLL-capable platforms)",85],["# This macro lets you find executable programs on the host system",68],["#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.",71]],"useCount":6578},{"word":"execute_process","context":[["#message(STATUS \"Arguments to execute_process: ${ARGN}\")",87],["execute_process( COMMAND ${__cmd} RESULT_VARIABLE __cmd_result OUTPUT_QUIET ERROR_QUIET )",104],["execute_process(COMMAND \"${PYTHON_EXECUTABLE}\" \"-c\"",112],["execute_process(COMMAND ${CMAKE_COMMAND} -E echo ${cuda_execute_process_string})",198],["#   command - COMMAND argument from the usual execute_process argument structure",198],["execute_process(COMMAND ${ARGN} RESULT_VARIABLE CUDA_result )",198],["execute_process(COMMAND \"${CMAKE_COMMAND}\" -E echo -- ${status})",199],["execute_process (",215],["execute_process(COMMAND",442],["execute_process(",6141]],"useCount":10587},{"word":"exist","context":[["# If it does exist, then we need to check to see if all the files it",71],["# depends on exist.  If they don't then we should clear the dependency",71],["but this file does not exist.  Possible reasons include:",399],["# Include the dependency file.  Create it first if it doesn't exist .  The",66],["#             ORXONOX - the hottest 3D action shooter ever to exist",65],["# export set exist.",198],["# Loop over all imported files and verify that they actually exist",181],["# exist at a later run. at that time we need to skip them, so that we don't add two",83],["# but we cannot let automoc handle them, as the .cpp files don't exist yet when",83],["# it doesn't exist then we need to create an empty one, so we can",71]],"useCount":3137},{"word":"exists","context":[["# Make sure the output directory exists.",38],["# TODO: check if .so file exists before the renaming",91],["# So we want to try and include the dependency file if it exists.  If",71],["# was not created for redistribution, and exists temporarily pending official",100],["# only append a TWEAK version if it exists:",41],["# if it exists.",59],["# Make sure the output directory exists before trying to write to it.",61],["\"Determining if the function ${FUNCTION} exists in the ${LIBRARY} \"",40],["#message(STATUS \"info: embedded item exists (${ri})\")",43],["# call get_filename_component twice to remove mpiexec and the directory it exists in (typically bin).",48]],"useCount":2031},{"word":"exit","context":[["exit(ret);",236],["exit(0);",1354],["# If the version check fails, exit out of the module here",47],["# Print message and/or exit on fatal error",48],["filename = (char *)malloc(L_tmpnam * sizeof(char)); /* ok to leak this at exit */",72],["exit (0);",72],["#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code",72],["exit(1);",1291],["exit 1",152],["#    the exit code (in many cases 0 for success), otherwise enter \"FAILED_TO_RUN\".",150]],"useCount":4104},{"word":"export","context":[["export ANDROID_STANDALONE_TOOLCHAIN=~/my-android-toolchain",134],["# export set exist.",198],["# been exported from the same project but in a separate export set.",184],["# export toolchain settings for the try_compile() command",136],["export ANDROID_NDK=~/my-android-ndk",140],["# use export symbol from original target",38],["\"-shared -Wl,--export-all-symbols -Wl,--enable-auto-import\")",42],["COMMENT \"Creating export file for ${target_name}\")",54],["#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain",73],["#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk",132]],"useCount":2287},{"word":"expressions","context":[["# CMake 3.1.0 supports generator expressions in arguments to DEPENDS",21],["# through generator expressions at configure time, we filter them out",21],["# The C and CXX include file regular expressions for this directory.",2244],["# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time",22],[":manual:`generator expressions <cmake-generator-expressions(7)>`.",36],[":manual:`generator expressions <cmake-generator-expressions(7)>`.",36],["#   \\optional[list] glob An optional list of glob expressions that are",27],["# Find files matching the given regular expressions.",24],["# include TARGET_OBJECTS expressions in a target's SOURCES property",23],["if((NOT d MATCHES \"=\") AND (NOT d MATCHES \"^[$]<.*>$\")) # avoid generator expressions",24]],"useCount":2533},{"word":"extProjName","context":[["## External_${extProjName}.cmake files can be recurisvely included,",143],["ProjectDependancyPush(CACHED_extProjName ${extProjName})",143],["## is important make the extProjName and proj variables",143],["if(${USE_SYSTEM_${extProjName}})",146],["# The project is provided using ${extProjName}_DIR, nevertheless since other",148],["#if(${USE_SYSTEM_${extProjName}})",137],["ProjectDependancyPop(CACHED_extProjName extProjName)",137],["message(\"USING the system ${extProjName}, set ${extProjName}_DIR=${${extProjName}_DIR}\")",128],["#  unset(${extProjName}_DIR CACHE)",131],["list(APPEND ${CMAKE_PROJECT_NAME}_SUPERBUILD_EP_VARS ${extProjName}_DIR:PATH)",131]],"useCount":2717},{"word":"extension","context":[["${input_dir}/${input_file} ${output_extension} ${extension}",69],["# Doxygen selects the parser to use depending on the extension of the files it",57],["# doxygen will generate files with .html extension.",62],["get_filename_component(extension ${src} EXT)",40],["# Python extension modules on Windows must have the extension \".pyd\"",41],["# what is the filename without the extension",78],["option(CUDA_HOST_COMPILATION_CPP \"Generated file extension\" ON)",64],["# The MAN_EXTENSION tag determines the extension that is added to",63],["# The HTML_FILE_EXTENSION tag can be used to specify the file extension for",62],["# Python extension modules on Windows must have the extension \".pyd\"",41]],"useCount":2354},{"word":"external","context":[["\"../external/gtest/include\"",75],["\"../external/gtest\"",75],["# Set CMake OSX variable to pass down the external project",209],["\"../external/bullet-2.81-rev2613/src\"",96],["# Configuration::additions related to external references",99],["\"../external/glew-1.9.0/include\"",101],["# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.",111],["\"../external\"",135],["#  Usage from an external project:",73],["# Compute -G arg for configuring external projects with the same CMake generator:",71]],"useCount":4791},{"word":"extra","context":[["\"extra/yassl/include\"",97],["\"extra/yassl/taocrypt/include\"",81],["# Prints out extra information about the cuda file during compilation",65],["#     [+] allowed preset search paths and extra search suffixes",61],["# The TOC_EXPAND flag can be set to YES to add extra items for group members",62],["# of extra configuration types.  Duplicate entries will be removed by",64],["foreach(extra ${pkg_cfg_extras})",605],["# We need to be careful here and this extra loop because including files will effect THIS_SRC_DIR!!!!",116],["include(${extra})",605],["if(NOT IS_ABSOLUTE ${extra})",605]],"useCount":4655},{"word":"extras","context":[["\"/opt/ros/indigo/share/genmsg/cmake/genmsg-extras.cmake\"",59],["\"/opt/ros/indigo/share/gencpp/cmake/gencpp-extras.cmake\"",59],["# extras",63],["\"/opt/ros/indigo/share/rosgraph_msgs/cmake/rosgraph_msgs-msg-extras.cmake\"",54],["\"/opt/ros/indigo/share/rosconsole/cmake/rosconsole-extras.cmake\"",54],["\"/opt/ros/indigo/share/geometry_msgs/cmake/geometry_msgs-msg-extras.cmake\"",46],["\"/opt/ros/indigo/share/genpy/cmake/genpy-extras.cmake\"",59],["\"/opt/ros/indigo/share/genlisp/cmake/genlisp-extras.cmake\"",59],["\"/opt/ros/indigo/share/roscpp/cmake/roscpp-msg-extras.cmake\"",54],["\"/opt/ros/indigo/share/std_msgs/cmake/std_msgs-msg-extras.cmake\"",58]],"useCount":4386},{"word":"f","context":[["include(${f})",179],["foreach(f ${files})",147],["foreach(f ${CONFIG_FILES})",142],["endforeach(f)",124],["set(headerfiles ${headerfiles} ${f})",121],["if(NOT f MATCHES LinkDef)",85],["if( IS_ABSOLUTE ${f})",80],["set(_linkdef ${_linkdef} ${f})",71],["if(NOT EXISTS ${f})",70],["foreach( f ${ARG_LINKDEF})",104]],"useCount":3434},{"word":"fail","context":[["# target architecture. The program will always fail to compile (both because",56],["# if it did not compile make the return value fail code of 1",70],["# version number and specify the REQUIRED attribute, this module will fail if it",47],["# user-friendly message when we fail to find some necessary piece of",95],["# If both of these tests fail, then there is probably something wrong",39],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# If Qt3 has already been found, fail.",37],["if(fail-on-missing)",1228],["# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)",120],["# Some compilers do not fail with a bad flag",80]],"useCount":2626},{"word":"false","context":[["<default>false</default>",261],["# and adjusting the output so that it tests false if there was no exact",92],["# the output so that it tests false if an error occurs.",93],["# SDL2_FOUND, if false, do not try to link to SDL2",164],["#message(\"CUDA_NVCC_DEPEND false\")",67],["return(false)",177],["set(_boost_STATIC_RUNTIME_WORKAROUND false)",66],["# dios_module_link_library(${MODULE} lua false)",64],["set(SFML_FOUND TRUE) # will be set to false if one of the required modules is not found",99],["# dios_module_link_library(${MODULE} tolua false)",66]],"useCount":5294},{"word":"file","context":[["ENDFOREACH(file)",1333],["# This file includes the relevant testing commands required for",1214],["# This file includes the relevent testing commands required for",1153],["FOREACH(file ${CMAKE_INSTALL_MANIFEST_FILES})",1134],["# The C and CXX include file regular expressions for this directory.",2244],["file(REMOVE_RECURSE",3235],["# CMAKE generated file: DO NOT EDIT!",3617],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["# The include file search paths:",7746],["# (To distribute this file outside of CMake, substitute the full",3976]],"useCount":116270},{"word":"filename","context":[["char * filename = NULL;",72],["foreach(filename ${filenames})",60],["NAMES ${filename}",57],["if (mkfifo(filename, S_IRWXU) != 0) {",144],["# what is the filename without the extension",78],["fd = open(filename, O_RDWR | O_NONBLOCK);",72],["unlink(filename);",73],["if (unlink(filename) != 0) {",72],["if (NULL == tmpnam(filename)) {",72],["filename = (char *)malloc(L_tmpnam * sizeof(char)); /* ok to leak this at exit */",72]],"useCount":3093},{"word":"files","context":[["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# The top level Makefile was generated from the following files:",1373],["# The set of files for implicit dependencies of each language:",10677],["# output files.",198],["set(_state \"files\")",221],["# Header files are presumed to be included like",241],["but not all the files it references.",399],["# Pairs of files generated by the same build rule.",683],["# can cause incorrect dependencies when #including files based on this macro which is",192]],"useCount":44355},{"word":"filter","context":[["# INPUT_FILTER) will be used to filter the input files when producing source",62],["# input file. Doxygen will then use the output that the filter program writes",66],["# by executing (via popen()) the command <filter> <input-file>, where <filter>",66],["# by executing (via popen()) the command <filter> <input-file>, where <filter>",66],["# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using",83],["# and *.h) to filter out the source-files in the directories. If left",127],["lib/mathlib/math/filter",63],["# patterns (like *.h and *.hpp) to filter out the header-files in the",84],["# invoke to filter for each input file. Doxygen will invoke the filter program",87],["# invoke to filter for each input file. Doxygen will invoke the filter program",87]],"useCount":2048},{"word":"find","context":[["# Show info where to find the report",195],["# This is part of the Findosg* suite used to find OpenSceneGraph components.",153],["# find binaries",161],["# this module will try to find on your behalf.) Also for OS X, this",226],["# Help the user find it if we cannot.",186],["# CMake will pass the quotes through and not be able to find the file.",198],["# find libraries",214],["# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library",164],["# macro to find packages on the host OS",144],["# SDL2_INCLUDE_DIR, where to find SDL.h",162]],"useCount":17612},{"word":"find_library","context":[["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE",101],["find_library(MPI_LIB",89],["find_library(${_var}",155],["find_library(${_prefix}_${_library}_LIBRARY",180],["find_library(lib ${library}",605],["find_library(lib ${library})",605],["find_library(",975],["find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG",101],["find_library( GLFW_glfw_LIBRARY",98],["find_library( MYSQL_LIBRARY",91]],"useCount":8660},{"word":"find_package","context":[["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["find_package(Threads)",361],["find_package(PkgConfig QUIET)",348],["find_package(Threads REQUIRED)",310],["find_package(Git)",307],["find_package(Doxygen)",236],["find_package(PythonInterp)",283],["find_package(PkgConfig)",1787],["# dependencies with components must be find_package()-ed again",605],["# simple dependencies must only be find_package()-ed once",605]],"useCount":18814},{"word":"find_package_handle_standard_args","context":[["find_package_handle_standard_args(PY_${module} DEFAULT_MSG PY_${module_upper})",44],["find_package_handle_standard_args(OpenGL REQUIRED_VARS OPENGL_INCLUDE_DIR OPENGL_gl_LIBRARY OPENGL_glu_LIBRARY)",37],["find_package_handle_standard_args(MPI_${lang} DEFAULT_MSG MPI_${lang}_COMPILER)",38],["find_package_handle_standard_args(MPI_${lang} DEFAULT_MSG MPI_${lang}_LIBRARIES MPI_${lang}_INCLUDE_PATH)",39],["find_package_handle_standard_args(OpenSSL DEFAULT_MSG",40],["find_package_handle_standard_args(DOXYFILE_IN DEFAULT_MSG \"DOXYFILE_IN\")",47],["find_package_handle_standard_args(",495],["find_package_handle_standard_args(Eigen3 DEFAULT_MSG EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK)",98],["find_package_handle_standard_args(Java",63],["find_package_handle_standard_args(CUDA",36]],"useCount":2138},{"word":"find_path","context":[["find_path(SFML_INCLUDE_DIR SFML/Config.hpp",102],["find_path(EIGEN3_INCLUDE_DIR NAMES signature_of_eigen3_matrix_library",96],["find_path(MPI_HEADER_PATH mpi.h",82],["find_path (",67],["find_path(CUDA_TOOLKIT_ROOT_DIR",128],["find_path(",654],["find_path(CUDA_TOOLKIT_INCLUDE device_functions.h)",63],["find_path(CUDA_TOOLKIT_INCLUDE",63],["find_path(Boost_INCLUDE_DIR",72],["find_path(TBB_INCLUDE_DIR",68]],"useCount":5147},{"word":"find_program","context":[["find_program(_python_path NAME \"python\" PATHS ENV PATH)",132],["find_program( ${ARGN} )",154],["find_program( CMAKE_INSTALL_NAME_TOOL NAMES install_name_tool )",136],["find_program(CTEST_COVERAGE_COMMAND NAMES gcov)",57],["find_program(CUDA_NVCC_EXECUTABLE",62],["find_program(CUDA_NVCC_EXECUTABLE nvcc)",62],["find_program (CMAKE_UNAME uname /bin /usr/bin /usr/local/bin)",65],["find_program(CMAKE_INSTALL_NAME_TOOL install_name_tool)",105],["find_program( NDK_CCACHE \"${_ndk_ccache}\" DOC \"The path to ccache binary\")",112],["find_program(",185]],"useCount":3743},{"word":"first","context":[["#     [~] turn off SWIG search if it is not found first time",66],["# before the specified paths. To search non-standard paths first,",70],["# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH",70],["# cmake is run for the very first time on them -> however the .cpp files might",83],["# tag is set to YES, then doxygen will reuse the documentation of the first",83],["# -include process include file as the first line of the primary source file",110],["# default to searching for frameworks first",115],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["# Can be set only at the first run:",136],["#      Can be set as environment variable. Can be set only at first cmake run.",205]],"useCount":5120},{"word":"flag","context":[["# So this flag option is required for all projects using OpenGL from native.",111],["# Set the flag to indicate that the machine can accurately convert",164],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["foreach(flag ${CMAKE_HOST_FLAGS} ${CMAKE_HOST_FLAGS_${build_configuration}})",197],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["set(nvcc_host_compiler_flags \"${nvcc_host_compiler_flags},\\\"${flag}\\\"\")",197],["# This module responds to the the flag:",232],["# return as a flag string",599],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# Large files, common flag",92]],"useCount":8236},{"word":"flags","context":[["# This is the list of host compilation flags.  It C or CXX should already have",198],["# NDK flags",145],["# Select flags.",150],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# Build specific configuration flags",168],["# module will attempt to locate and set the the proper link flags",187],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["# Add the build specific configuration flags",198],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198],["#  CMAKE_REQUIRED_FLAGS = string of compile command line flags",209]],"useCount":17042},{"word":"fno","context":[["set( ANDROID_CXX_FLAGS_DEBUG   \"-fno-omit-frame-pointer -fno-strict-aliasing\" )",181],["set( CMAKE_C_FLAGS \"-fno-exceptions ${CMAKE_C_FLAGS}\" )",112],["set( ANDROID_CXX_FLAGS_DEBUG   \"-fno-omit-frame-pointer -fno-strict-aliasing\" )",181],["set( ANDROID_CXX_FLAGS_DEBUG   \"-marm -fno-omit-frame-pointer -fno-strict-aliasing\" )",216],["set( ANDROID_CXX_FLAGS_DEBUG   \"-marm -fno-omit-frame-pointer -fno-strict-aliasing\" )",216],["#                          Implies -frtti -fno-exceptions for NDK r7 and newer.",218],["#                          Implies -fno-rtti -fno-exceptions for NDK before r7.",218],["#                          Implies -fno-rtti -fno-exceptions for NDK before r7.",218],["#                          Implies -frtti -fno-exceptions.",329],["set( CMAKE_CXX_FLAGS \"-fno-rtti ${CMAKE_CXX_FLAGS}\" )",112]],"useCount":4595},{"word":"following","context":[["# furnished to do so, subject to the following conditions:",659],["# This module sets the following variables:",166],["# This code sets the following variables:",169],["\"the following output:\\n${OUTPUT}\\n\\n\")",188],["## # The following are required to uses Dart and the Cdash dashboard",188],["# Defines the following variables:",215],["# The module defines the following variables:",221],["# This module will define the following variables:",241],["# This module defines the following variables:",388],["# The top level Makefile was generated from the following files:",1373]],"useCount":13907},{"word":"foo","context":[["foo= abi::__cxa_demangle(foo, foo, 0, &bar);",92],["foo= abi::__cxa_demangle(foo, foo, 0, &bar);",92],["foo= abi::__cxa_demangle(foo, foo, 0, &bar);",92],["if (!__sync_fetch_and_add(&foo, bar) || foo)",93],["bar= __sync_lock_test_and_set(&foo, bar);",93],["if (!__sync_fetch_and_add(&foo, bar) || foo)",93],["int foo= -10; int bar= 10;",96],["if (bar || foo != 10)",107],["void foo(void) {}",160],["pthread_once(&once_control, foo);",160]],"useCount":3448},{"word":"for","context":[["# This file includes the relevant testing commands required for",1214],["# The set of files for implicit dependencies of each language:",10677],["# The set of languages for which implicit dependencies are needed:",10677],["# Preprocessor definitions for this target.",6763],["# CMake generated Testfile for",2420],["# The C and CXX include file regular expressions for this directory.",2244],["# Include the install script for each subdirectory.",1672],["# Dependency information for all targets:",1371],["# This file includes the relevent testing commands required for",1153],["#                          Is not available for standalone toolchain.",659]],"useCount":141871},{"word":"force","context":[["# order to force this file to be run again if it changes.",198],["#   If set manually, this will force the use of a specific SDK version",80],["# No valid ways available to find/set the revision/hash, so let's force some defaults",85],["# loading this file to force a compiler.",86],["# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be",89],["# linked dynamically.  Alternatively you can force all Boost",89],["# no precompiled header, force inclusion of prefix header",91],["# These functions force a re-configure on each git commit so that you can",93],["# force cmake to produce / instead of \\ in build commands for Ninja generator",95],["# force ASM compiler (required for CMake < 2.8.5)",130]],"useCount":2539},{"word":"foreach","context":[["foreach(lang C)",304],["foreach(lang )",342],["foreach(idir ${_include_dirs})",589],["foreach(extra ${pkg_cfg_extras})",605],["foreach(depend ${depends})",605],["foreach(library ${libraries})",612],["foreach(_item ${ARGN})",617],["foreach(arg ${ARGN})",866],["foreach(lib ${ARGN})",642],["foreach(lang CXX)",2027]],"useCount":35606},{"word":"format","context":[["-Wmissing-format-attribute",51],["# dependent upon the format parameter.  The compiler is invoked once with -M",56],["# format and will distribute the generated files over these directories.",58],["# The WARN_FORMAT tag determines the format of the warning messages that",63],["macro(CUDA_WRAP_SRCS cuda_target format generated_files)",65],["# The format is:",82],["# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images",83],["#   format              - PTX or OBJ",44],["# output files in an output format independent way. To create the layout file",43],["set(_cuda_source_format ${format})",39]],"useCount":2467},{"word":"forms","context":[["# Redistribution and use in source and binary forms, with or without modification, are",17],["# Redistribution and use in source and binary forms, with or without",2447],["* Redistribution and use in source and binary forms, with or without",17],["set (forms ${forms}",17],["## Redistribution and use in source and binary forms, with or without",18],["#    Redistribution and use in source and binary forms, with or without",20],["# U.S. Government. Redistribution and use in source and binary forms, with",31],["#  Redistribution and use in source and binary forms, with or without",109],["# Redistribution and use in source and binary forms, with or without modification,",83],["#Redistribution and use in source and binary forms, with or without",44]],"useCount":2906},{"word":"found","context":[["# remember found paths",129],["\"Python not found in PATH:\\n  $ENV{PATH}\\n\"",132],["#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK",135],["SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING \"Where the SDL2 Library can be found\")",146],["# if only the debug version was found, set the release variable also to the debug version",165],["# include directory or library not found",117],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# if only the release version was found, set the debug variable also to the release version",165],["## found in the COPYING file.",458],["# On OSX, this will prefer the Framework version (if found) over others.",292]],"useCount":25309},{"word":"framework","context":[["SET(SDL2_LIBRARY_TEMP ${SDL2_LIBRARY_TEMP} \"-framework Cocoa\")",145],["\"/System/Library/Frameworks/OpenGL.framework\"",106],["# CMake doesn't display the -framework Cocoa string in the UI even",239],["# Non-OS X framework versions expect you to also dynamically link to",233],["# module will automatically add the -framework Cocoa on your behalf.",226],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["IF(NOT ${SDL2_INCLUDE_DIR} MATCHES \".framework\")",153],["ENDIF(NOT ${SDL2_INCLUDE_DIR} MATCHES \".framework\")",152],["\"/System/Library/Frameworks/GLUT.framework/Headers\"",109]],"useCount":5736},{"word":"from","context":[["# The top level Makefile was generated from the following files:",1373],["# perform publicly and display publicly.  Beginning five (5) years from",397],["CACHE STRING \"Result from TRY_RUN\" FORCE)",567],["# Per-language clean rules from dependency scanning.",11977],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# generated from catkin/cmake/template/pkgConfig.cmake.in",605],["# copied from catkin/cmake/list_append_unique.cmake to keep pkgConfig",605],["# append elements to a list and remove existing duplicates from the list",586],["# copied from catkin/cmake/list_append_deduplicate.cmake to keep pkgConfig",586],["\"Inherited from directory.\"",332]],"useCount":39319},{"word":"full","context":[["# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being",65],["#      standalone toolchain. This option is not used if full NDK is found",72],["# This macro helps us find the location of helper files we will need the full path to",66],["# Save the full path of the file so try_compile can use it.",82],["/* Define to the full name of this package. */",192],["/* Define to the full name and version of this package. */",193],["# (To distributed this file outside of CMake, substitute the full",586],["# (To distribute this file outside of CMake, substitute the full",3976],["# will show members with their full class and namespace scopes in the",63],["# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full",63]],"useCount":7820},{"word":"function","context":[["# We must run the following at \"include\" time, not at function call time,",115],["function(test)",480],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# Requires CMake 2.6 or newer (uses the 'function' command)",158],["# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target",98],["# if function is found in libc, result will be empty",92],["# Searches function in libraries",92],["# if function is found, sets output parameter result to the name of the library",92],["function(git_describe _var)",91],["# We should call this function again since hunter_add_package is include-like",132]],"useCount":22379},{"word":"functions","context":[["# Ignore warnings about older, less secure functions",80],["#  FindBoost functions & macros",81],["# End functions/macros",87],["/* Windows stuff, mostly functions, that have Posix analogs but named differently */",88],["/* used by stacktrace functions */",76],["# (namespaces, classes, functions, etc.) that should be excluded from the",75],["# The following functions are provided by this module:",71],["configuration. By default gcc built-in sync functions are used,",69],["# These functions force a re-configure on each git commit so that you can",93],["# Tests for functions",93]],"useCount":2852},{"word":"g","context":[["set(CMAKE_C_FLAGS_RELWITHDEBINFO   \"-O2 -g\")",87],["set( CMAKE_CXX_FLAGS_DEBUG     \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c++ Debug flags\" )",110],["set( CMAKE_C_FLAGS_DEBUG       \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c Debug flags\" )",110],["\"-g -O0 --coverage -fprofile-arcs -ftest-coverage\"",126],["set(CMAKE_HOST_FLAGS_RELWITHDEBINFO -O2 -g -DNDEBUG)",134],["set(CMAKE_HOST_FLAGS_DEBUG -g)",135],["# This module supports requiring a minimum version, e.g. you can do",143],["#   Pass them in list form, e.g.: \"-j;2\" for -j 2",183],["# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables",278],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278]],"useCount":9480},{"word":"gcc","context":[["# Force the compilers to gcc for iOS",68],["string( REPLACE \"-gcc\" \"\" ${_var} \"${__gccExeName}\" )",136],["file( GLOB __gccExePath RELATIVE \"${_root}/bin/\" \"${_root}/bin/*-gcc${TOOL_OS_SUFFIX}\" )",111],["set( ANDROID_CXX_FLAGS \"-gcc-toolchain ${ANDROID_TOOLCHAIN_ROOT} ${ANDROID_CXX_FLAGS}\" )",111],["list(SORT __availableToolchainsLst) # we need clang to go after gcc",108],["set( ANDROID_NDK_TOOLCHAINS_PATH \"${ANDROID_NDK}/../../gcc/${ANDROID_NDK_HOST_SYSTEM_NAME}/arm\" )",102],["elseif( EXISTS \"${ANDROID_NDK}/../../gcc/\" )",102],["configuration. By default gcc built-in sync functions are used,",69],["# gcc). The argument of the tag is a list of macros of the form: name",69],["# Need explicit pthread for gcc -fsanitize=address",69]],"useCount":3472},{"word":"general","context":[["# Also defined, but not for general use are:",104],["if(\"${lib}\" MATCHES \"^debug|optimized|general$\")",173],["if(\"${library}\" MATCHES \"^(debug|optimized|general)$\")",414],["if(\"${lib}\" MATCHES \"^(debug|optimized|general)$\")",415],["if(\"${library}\" MATCHES \"^debug|optimized|general$\")",172],["# save some trees in general.",126],["# also defined, but not for general use are",608],["# Igatools a general purpose Isogeometric analysis library.",42],["# trees in general.",42],["# also defined, but NOT for general use are",44]],"useCount":2719},{"word":"generate","context":[["# Byproducts of CMake generate step:",1365],["# information to generate all constant output in the proper language.",84],["# generated_file:STRING=<> File to generate.  This argument must be passed in.",198],["# We were unable to find some libraries, so generate a sensible",94],["# sources only. Doxygen will then generate output that is more tailored for",109],["#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions",111],["# will generate a graph for each documented class showing the direct and",126],["# each generated HTML page. If it is left blank doxygen will generate a",126],["# as appropriate. These values are used to generate the final SDL2_LIBRARY",174],["# generated_cubin_file:STRING=<> File to generate.  This argument must be passed",198]],"useCount":8726},{"word":"generated","context":[["# We need to set the linker language based on what the expected generated file",130],["file(WRITE ${dependency_file} \"#FindCUDA.cmake generated file.  Do not edit.\\n\")",132],["# install generated code",260],["# Set these up as variables to make reading the generated file easier",199],["# originally generated with the command:",160],["# generated from catkin/cmake/template/pkgConfig.cmake.in",605],["# Pairs of files generated by the same build rule.",683],["# The top level Makefile was generated from the following files:",1373],["# CMake generated Testfile for",2420],["# CMAKE generated file: DO NOT EDIT!",3617]],"useCount":20269},{"word":"generated_file","context":[["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"",396],["\"Removing ${generated_file}\"",396],["if(NOT generated_file)",199],["\"Generating ${generated_file}\"",199],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["# generated_file:STRING=<> File to generate.  This argument must be passed in.",198],["message(\"Generated ${generated_file} successfully.\")",198],["${format_flag} -o \"${generated_file}\"",198],["message(FATAL_ERROR \"Error generating file ${generated_file}\")",198],["message(FATAL_ERROR \"Error generating ${generated_file}\")",795]],"useCount":3880},{"word":"generating","context":[["### Section generating for lang: genpy",85],["### Section generating for lang: genlisp",85],["### Section generating for lang: gencpp",85],["COMMENT \"Resetting code coverage counters to zero.\\nProcessing code coverage counters and generating report.\"",94],["BRIEF_DOCS \"Ignore headers from these directories when generating the prefix header.\"",114],["# Capturing lcov counters and generating report",99],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# defined in the generating passes of nvcc invokation.  We will go ahead and manually",192],["message(FATAL_ERROR \"Error generating file ${generated_file}\")",198],["message(FATAL_ERROR \"Error generating ${generated_file}\")",795]],"useCount":2836},{"word":"generator","context":[["# There are certain generator specific ones",92],["# next try prefer the compiler specified by the generator",52],["# The generator used is:",1373],["# Compute -G arg for configuring external projects with the same CMake generator:",71],["# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables",278],["# force cmake to produce / instead of \\ in build commands for Ninja generator",95],["# if the generator supports configuration types then set",204],["# and some are specific to a generator",278],["# Newlines inside flags variables break CMake's NMake generator.",49],["--build-generator ${CMAKE_GENERATOR}",47]],"useCount":4131},{"word":"get","context":[["# get all the details about standalone toolchain",129],["# doxygen should invoke to get the current version for each file (typically from",75],["# get all the details about NDK",129],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["# use pkg-config to get the directories and then use these values",582],["# Use pkg-config to get hints about paths",321],["# get include dirs",70],["# Args with spaces need quotes around them to get them to be parsed as a single argument.",198],["# Try to get some hints from pkg-config, if available",66],["# provide a way to get access to the other files we need local to here.",65]],"useCount":5770},{"word":"get_filename_component","context":[["get_filename_component(_IMPORT_PREFIX \"${_IMPORT_PREFIX}\" PATH)",374],["get_filename_component(work_dir \"${source_dir}\" PATH)",136],["get_filename_component( ANDROID_STANDALONE_TOOLCHAIN \"${ANDROID_STANDALONE_TOOLCHAIN}\" ABSOLUTE )",136],["get_filename_component(FIL_WE ${FIL} NAME_WE)",140],["get_filename_component(ABS_FIL ${FIL} ABSOLUTE)",141],["get_filename_component(_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",142],["get_filename_component(_ROOT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)",151],["get_filename_component(_IMPORT_PREFIX \"${CMAKE_CURRENT_LIST_FILE}\" PATH)",171],["get_filename_component(CMAKE_CURRENT_LIST_FILENAME ${CMAKE_CURRENT_LIST_FILE} NAME_WE)",216],["get_filename_component(",220]],"useCount":12219},{"word":"get_property","context":[["get_property(svn_revision TARGET ${name} PROPERTY _EP_SVN_REVISION)",62],["get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )",111],["get_property(_prefixFile TARGET ${_target} PROPERTY COTIRE_${_language}_PREFIX_HEADER)",94],["get_property(cvs_repository TARGET ${name} PROPERTY _EP_CVS_REPOSITORY)",62],["get_property(svn_repository TARGET ${name} PROPERTY _EP_SVN_REPOSITORY)",63],["get_property(_isSet ${_type} \"${_object}\" PROPERTY ${_property} SET)",76],["get_property(cvs_tag TARGET ${name} PROPERTY _EP_CVS_TAG)",62],["get_property(_propertyValue ${_type} \"${_object}\" PROPERTY ${_property})",114],["get_property(type TARGET ${TARGET_LIBRARY} PROPERTY TYPE)",56],["get_property(deps TARGET ${name} PROPERTY _EP_DEPENDS)",80]],"useCount":4822},{"word":"get_target_property","context":[["get_target_property(_targetSourceFiles ${_target} SOURCES)",163],["get_target_property(_targetType ${_target} TYPE)",166],["get_target_property(COTIRE_TARGET_MAXIMUM_NUMBER_OF_INCLUDES ${_target} COTIRE_UNITY_SOURCE_MAXIMUM_NUMBER_OF_INCLUDES)",38],["get_target_property(_imported ${_target} IMPORTED)",44],["get_target_property(DOC_TARGET doc TYPE)",51],["get_target_property(_unityTargetName ${_target} COTIRE_UNITY_TARGET_NAME)",62],["get_target_property(cmake_command ${name} _EP_CMAKE_COMMAND)",62],["get_target_property(cmake_generator ${name} _EP_CMAKE_GENERATOR)",62],["get_target_property(_targetAddSCU ${_target} COTIRE_ADD_UNITY_BUILD)",114],["get_target_property(_targetUsePCH ${_target} COTIRE_ENABLE_PRECOMPILED_HEADER)",159]],"useCount":2895},{"word":"getting","context":[["# Had trouble getting the quote in the regex",21],["# No idea - some other issue must be getting in the way",11],["MESSAGE(STATUS \"Consider getting pdftops from Poppler to convert PDF images to EPS images.\")",13],["//// Comment out the above line if you're getting linking errors when compiling your programs,",13],["# the documentation. This will only work if the methods are indeed getting or",14],["# Set the component getting installed.",8081],["# documentation. This will only work if the methods are indeed getting or",37],["# 1.8.1 Fix problem where ps2pdf was not getting the appropriate arguments.",25],["# This will only work if the methods are indeed getting or setting a simple",21]],"useCount":8236},{"word":"git","context":[["See https://android.googlesource.com/platform/development.git f907f4f9d4e56ccc8093df6fee54454b8bcab6c2",111],["set(GIT_DIR \"${GIT_PARENT_DIR}/.git\")",160],["# These functions force a re-configure on each git commit so that you can",93],["set(GIT_DATA \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/git-data\")",93],["# Returns the results of git describe --exact-match on the source tree,",92],["#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])",78],["SET(CPACK_SOURCE_IGNORE_FILES \"/CVS/;/\\\\.svn/;/\\\\.bzr/;/\\\\.hg/;/\\\\.git/;\\\\.swp$;\\\\.#;/#\")",81],["# We have reached the root directory, we are not in git",81],["SET(CPACK_IGNORE_FILES \"/CVS/;/\\\\.svn/;/\\\\.bzr/;/\\\\.hg/;/\\\\.git/;\\\\.swp$;\\\\.#;/#\")",81],["# Returns the results of git describe on the source tree, and adjusting",91]],"useCount":3737},{"word":"given","context":[["# flags given by _flags.  If the combination of libraries is found and passes",103],["# and now the version string given by qmake",56],["# now parse the parts of the user given version string into variables",66],["# Generate debug names from given release names",69],["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["# given by _list.  If the combination is found, this macro checks (using the",96],["# Parse the arguments we were given.",97],["# combination using the name of a routine given by _name using the linker",103],["#    check what the source file would have printed when called with the given arguments.",119],["# If we weren't given a build_configuration, use Debug.",198]],"useCount":5238},{"word":"graphics","context":[["/opt/graphics/OpenGL/include",179],["/opt/graphics/OpenGL/include /usr/X11R6/include",93],["# - For each specified module XXX (system, window, graphics, network, audio, main):",91],["#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)",81],["#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules",70],["/opt/graphics/OpenGL/contrib/libglfw",70],["#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules",70],["list(FIND SFML_FIND_COMPONENTS \"graphics\" FIND_SFML_GRAPHICS_COMPONENT)",69],["# sfml-graphics",69],["PATHS /opt/graphics/OpenGL/lib",67]],"useCount":2445},{"word":"groovy","context":[["\"/opt/ros/groovy/share/catkin/cmake/test/download_test_data.cmake\"",40],["\"/opt/ros/groovy/share/catkin/cmake/catkin_generate_environment.cmake\"",40],["\"/opt/ros/groovy/share/catkin/cmake/assert.cmake\"",40],["\"/opt/ros/groovy/share/catkin/cmake/platform/ubuntu.cmake\"",40],["\"/opt/ros/groovy/share/ros/core/rosbuild/public.cmake\"",41],["\"/opt/ros/groovy/share/ros/core/rosbuild/rosbuild.cmake\"",41],["\"/opt/ros/groovy/share/ros/core/rosbuild/private.cmake\"",41],["\"/opt/ros/groovy/share/ros/core/rosbuild/ProcessorCount.cmake\"",41],["\"/opt/ros/groovy/include\"",90],["\"/opt/ros/groovy/share/catkin/cmake/templates/setup.zsh.in\"",40]],"useCount":2995},{"word":"gtest","context":[["\"gtest/CMakeFiles/gtest_main.dir/DependInfo.cmake\"",167],["SET(CMAKE_RELATIVE_PATH_TOP_SOURCE \"/usr/src/gtest\")",176],["\"gtest/CMakeFiles/gtest.dir/DependInfo.cmake\"",167],["\"/usr/src/gtest/include\"",276],["\"gtest/CMakeFiles/gtest.dir/DependInfo.cmake\"",167],["\"/usr/src/gtest\"",277],["\"gtest/CMakeFiles/CMakeDirectoryInformation.cmake\"",167],["\"/usr/src/gtest/CMakeLists.txt\"",162],["\"/usr/src/gtest/cmake/internal_utils.cmake\"",162],["INCLUDE(CMakeFiles/gtest.dir/cmake_clean_${lang}.cmake OPTIONAL)",95]],"useCount":3939},{"word":"h","context":[["#include <unistd.h>",495],["#include <stdlib.h>",1540],["#include <sys/types.h>",830],["#include <stdio.h>",717],["#include <pthread.h>",614],["#include <sys/socket.h>",573],["set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",345],["#include <signal.h>",376],["set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",391],["#include <math.h>",407]],"useCount":66590},{"word":"handle","context":[["# the input file might be full path so handle that",55],["# TODO: handle /MT and static lib",65],["# we have to handle framework a little bit differently:",56],["# handle the QUIETLY and REQUIRED arguments and set LIBXML2_FOUND to TRUE",58],["# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if",126],["# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if",106],["# handle success",113],["# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.",84],["# but we cannot let automoc handle them, as the .cpp files don't exist yet when",83],["# handle errors",114]],"useCount":3047},{"word":"has","context":[["# I think it has something to do with the CACHE STRING.",237],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value",204],["# The user has not requested an exact version.  Among known",82],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["#                                module has problems finding the proper Boost installation",104],["# It has been altered for iOS development",84],["# has ia32/*",90],["#  EIGEN3_FOUND - system has eigen lib with correct version",101],["message(WARNING \"Path to your Android NDK (or toolchain) has non-alphanumeric symbols.\\nThe build might be broken.\\n\")",103]],"useCount":9363},{"word":"hash","context":[["Observe that for revision hash/date to work you need at least version ${_REQUIRED_GIT_VERSION}\")",42],["message(\"* Use GIT revision hash  : No\")",51],["message(\" *** version of git for the revision-hash to work, and be allowede to ask for\")",53],["set(rev_hash_cached \"${rev_hash}\" CACHE INTERNAL \"Cached commit-hash\")",76],["# No valid ways available to find/set the revision/hash, so let's force some defaults",85],["if(NOT hash)",93],["# Returns the refspec and sha hash of the current head revision",90],["set(staged \"${dir}/.ExternalData_${algo}_${hash}\")",50],["get_git_head_revision(refspec hash)",89],["message(\"* Use GIT revision hash  : Yes\")",46]],"useCount":2089},{"word":"have","context":[["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# If you have questions regarding the use of this file, please contact",186],["/* Define to 1 if you have the <unistd.h> header file. */",225],["/* Define to 1 if you have the <inttypes.h> header file. */",189],["/* Define to 1 if you have the <sys/types.h> header file. */",214],["/* Define to 1 if you have the <stdint.h> header file. */",203],["# This is the list of host compilation flags.  It C or CXX should already have",198],["# Make sure the targets which have been exported in some other",198],["/* Define to 1 if you have the <sys/stat.h> header file. */",189],["# People will have to manually change the cache values of",300]],"useCount":22729},{"word":"header","context":[["/* Define to 1 if you have the <sys/types.h> header file. */",214],["/* Define to 1 if you have the <unistd.h> header file. */",225],["# Look for the header file.",367],["/* Define to 1 if you have the <string.h> header file. */",179],["/* Define to 1 if you have the <stdint.h> header file. */",203],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["/* Define to 1 if you have the <inttypes.h> header file. */",189],["/* Define to 1 if you have the ANSI C header files. */",177],["/* Define to 1 if you have the <stdlib.h> header file. */",165],["/* Define to 1 if you have the <sys/stat.h> header file. */",189]],"useCount":16985},{"word":"headers","context":[["# define the list of search paths for headers and libraries",78],["# search headers and libraries in the target environment, search",351],["# for libraries and headers in the target directories",216],["BRIEF_DOCS \"Honor headers from these directories when generating the prefix header.\"",76],["# defines that must be present in config.h for our headers",86],["option(USE_COREPCH      \"Use precompiled headers when compiling servers\"              1)",102],["BRIEF_DOCS \"Ignore headers from these directories when generating the prefix header.\"",114],["if(\"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"protobuf-headers\" OR NOT CMAKE_INSTALL_COMPONENT)",109],["if(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"protobuf-headers\")",109],["option(USE_SCRIPTPCH    \"Use precompiled headers when compiling scripts\"              1)",103]],"useCount":6523},{"word":"help","context":[["# to the contents of the HTML help documentation and to the tree view.",62],["# the HTML help compiler on the generated index.hhp.",62],["# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)",54],["# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)",54],["# Windows users are probably better off using the HTML help feature.",49],["# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run",62],["# This variable will help provide a master list of all the sources.",63],["# running if errors occur, instead of asking the user for help.",63],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["#  cpack --help-variable-list",278]],"useCount":2662},{"word":"here","context":[["### --- Project specific additions here",116],["# We need to be careful here and this extra loop because including files will effect THIS_SRC_DIR!!!!",116],["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["########## List your subdirectories here! ##########################################",115],["# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex",102],["# others, the libnames have to change here too",85],["# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.",84],["########## List your source files here! ############################################",122],["# here is the target environment located",273],["# Set the final string here so the GUI reflects the final state.",274]],"useCount":5727},{"word":"home","context":[["\"/home/einstein/openairinterface5g/common/utils/msc\"",249],["\"/home/cmeon/SimplexLP/eigen/test\"",552],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair-cn/SECU\"",249],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/cmeon/SimplexLP/eigen\"",969]],"useCount":29046},{"word":"host","context":[["# This is the list of host compilation flags.  It C or CXX should already have",198],["# macro to find packages on the host OS",144],["# macro to find programs on the host OS",143],["#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform",135],["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135],["# detect current host platform",129],["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111],["#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)",108],["# search for programs in the build host directories",214],["# programs in the host environment",344]],"useCount":4967},{"word":"hpp","context":[["# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp",98],["\"location of version.hpp: ${Boost_INCLUDE_DIR}/boost/version.hpp\")",81],["# patterns (like *.h and *.hpp) to filter out the header-files in the",84],["set(SFML_CONFIG_HPP_INPUT \"${SFML_INCLUDE_DIR}/Headers/Config.hpp\")",86],["set(SFML_CONFIG_HPP_INPUT \"${SFML_INCLUDE_DIR}/SFML/Config.hpp\")",86],["# we could read this from version.hpp, but for that to work we'd",90],["NAMES         boost/config.hpp",99],["find_path(SFML_INCLUDE_DIR SFML/Config.hpp",102],["# extract the major and minor version numbers from SFML/Config.hpp",104],["set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",345]],"useCount":4164},{"word":"html","context":[["#                       HTML report is generated in _outputname/index.html",94],["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["HTML_OUTPUT            = html",101],["#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",113],["COMMENT \"Open ./${_outputname}/index.html in your browser to view the coverage report.\"",91],["HTML_FILE_EXTENSION    = .html",124],["\"  http://doc.qt.io/qt-5/windows-requirements.html\"",132],["#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.",136],["# written to the html output directory.",80],["# http://www.slproweb.com/products/Win32OpenSSL.html",75]],"useCount":3409},{"word":"http","context":[["# http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6611808",80],["set(CTEST_DROP_METHOD \"http\")",455],["# For the latest info, see http://www.ogre3d.org/",448],["# http://academic.cleardefinition.com",438],["\"  http://doc.qt.io/qt-5/windows-requirements.html\"",132],["# http://www.irisa.fr/lagadic",98],["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["# See http://visp.inria.fr for more information.",91],["# here: http://tinyurl.com/2cb428.  Syntax highlighting is important for proper",82],["# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",80]],"useCount":7570},{"word":"hunter_add_version","context":[["include(hunter_add_version)",569],["hunter_add_version(",1732]],"useCount":2301},{"word":"hunter_config","context":[["hunter_config(OpenCV-Extra VERSION 3.0.0)",20],["hunter_config(JsonSpirit VERSION 0.0.4-hunter)",19],["hunter_config(TIFF VERSION 4.0.2-p3)",20],["#   hunter_config(Foo VERSION 1.0.0)",20],["#   * https://github.com/ruslo/hunter/wiki/dev.modules#hunter_config",20],["include(hunter_config)",20],["hunter_config(Android-Modules VERSION 1.0.0)",19],["hunter_config(Eigen VERSION 3.2.4-p0)",20],["#   hunter_config(Boo VERSION 1.2.3z CMAKE_ARGS BOO_WITH_A=ON)",20],["hunter_config(Igloo VERSION 1.1.1-hunter)",19]],"useCount":2138},{"word":"hydro","context":[["\"/opt/ros/hydro/include/opencv\"",37],["\"/opt/ros/hydro/include\"",82],["\"/opt/ros/hydro/share/catkin/cmake/assert.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/catkin_package.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/platform/lsb.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/stamp.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/templates/_setup_util.py.in\"",29],["\"/opt/ros/hydro/share/catkin/cmake/legacy.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/tools/libraries.cmake\"",29],["\"/opt/ros/hydro/share/catkin/cmake/catkin_metapackage.cmake\"",29]],"useCount":2230},{"word":"i","context":[["else (${i})",84],["endif (${i})",84],["# files in one run (i.e. multiple -o and -T options on the command line). This",80],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["endforeach(i)",208],["endforeach (i)",133],["# instruction, i.e. will overwrite variable values (foreach's _x will survive)",132],["mark_as_advanced(${i})",111],["if (${i})",86],["foreach(i ${${PREFIX}})",76]],"useCount":6269},{"word":"idir","context":[["foreach(idir ${absolute_include_dirs})",16],["set(include ${idir})",609],["if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})",606],["if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})",606],["elseif(\"${idir}\" STREQUAL \"include\")",175],["foreach(idir ${_include_dirs})",589],["elseif(\"${idir} \" STREQUAL \"include \")",414]],"useCount":3015},{"word":"if","context":[["if(NOT DEFINED CMAKE_INSTALL_PREFIX)",2389],["if(NOT CMAKE_INSTALL_COMPONENT OR \"${CMAKE_INSTALL_COMPONENT}\" STREQUAL \"Unspecified\")",1823],["if(NOT CMAKE_INSTALL_COMPONENT)",2385],["if(COMPONENT)",2385],["if(BUILD_TYPE)",2386],["if(APPLE)",2827],["if (WIN32)",3149],["if(WIN32)",5089],["if(MSVC)",2158],["if(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)",2385]],"useCount":332769},{"word":"ifdef","context":[["#ifdef _WIN32",226],["#ifdef __APPLE__",159],["+#  ifdef __ANDROID__",111],["#ifdef __cplusplus",557],["#ifdef signal",84],["# config.h.cmake includes a special #ifdef for Darwin",77],["#ifdef __WIN__",39],["\"#ifdef __cplusplus",54],["#ifdef PATH_MAX",99],["#ifdef _MSC_VER",114]],"useCount":2028},{"word":"ifndef","context":[["list (APPEND _contents \"#ifndef __cplusplus\")",38],["#ifndef __cplusplus",147],["#ifndef _PTRDIFF_T",111],["#ifndef MAP_ANON",97],["#   #ifndef SOMELIB_NO_DEPRECATED",36],["#ifndef _GNU_SOURCE",36],["#ifndef CONFIG_H",166],["\"#ifndef ${_nameUpper}",45],["#ifndef MY_CONFIG_H",88],["#ifndef __REVISION_H__",87]],"useCount":2088},{"word":"implicit","context":[["STRING(REGEX MATCH \"fno-implicit-templates\" NO_IMPLICIT_TEMPLATES",23],["# must append this because mysql sets -fno-implicit-templates and we need to override it",22],["# The set of languages for which implicit dependencies are needed:",10677],["# The set of files for implicit dependencies of each language:",10677],["# Get the absolute path with no ../.. relative marks, to eliminate implicit linker warnings",45],["#       argument instead of the implicit PATHS as it isn't hard-coded",34],["# add the compiler implicit directories because some compilers",30],["if (CMAKE_CXX_FLAGS MATCHES -fno-implicit-templates)",21],["# in the showme list that can only be found in the implicit",28],["ROOT_ADD_C_FLAG(__cflags -Wno-implicit-function-declaration)",30]],"useCount":21897},{"word":"imported","context":[["# This file does not depend on other imported targets which have",184],["# Create imported target opencv_video",36],["MESSAGE(FATAL_ERROR \"The imported target \\\"${target}\\\" references the file",39],["# this one translates potentially used imported library targets to their files on disk",41],["# Create imported target opencv_highgui",36],["# and the following imported targets::",58],["message(FATAL_ERROR \"The imported target \\\"${target}\\\" references the file",142],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# Loop over all imported files and verify that they actually exist",181],["# Create imported target opencv_ml",36]],"useCount":2163},{"word":"in","context":[["# in the FIND_PATH() and FIND_LIBRARY() calls",577],["# Redistribution and use in source and binary forms, with or without",2447],["# Force unix paths in dependencies.",2233],["# Already in cache, be silent",1409],["# in cache already",1278],["# generated from catkin/cmake/template/pkgConfig.cmake.in",605],["# The contents of this file are placed in the public domain. Feel",495],["# append elements to a list if they are not already in the list",605],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605]],"useCount":81823},{"word":"inc","context":[["#   PATH_SUFFIXES \"common/inc\"",55],["set(FTGL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/graf3d/ftgl/inc)",37],["find_path(CUDA_SDK_ROOT_DIR common/inc/cutil.h",59],["\"/home/einstein/openairinterface5g/openair2/UTIL/LFDS/liblfds6.1.1/liblfds611/inc\"",240],["# \t额外计算默认目录的md5，其中包括src,inc,proto,src.android/cpp,src.ios/cpp,src.win/cpp，src.unix/cpp",81],["file(GLOB files inc/${fp})",70],["set(_linkdef ${_linkdef} ${CMAKE_CURRENT_SOURCE_DIR}/inc/${f})",68],["set (COTIRE_ADDITIONAL_PREFIX_HEADER_IGNORE_EXTENSIONS \"inc;inl;ipp\" CACHE STRING",38],["\"If not defined, defaults to inc;inl;ipp.\"",38],["if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/inc/${f})",43]],"useCount":2198},{"word":"include","context":[["# The C and CXX include file regular expressions for this directory.",2244],["/usr/local/include",3782],["/opt/local/include",1602],["#include <stdlib.h>",1540],["PATH_SUFFIXES include",1381],["/usr/include",3956],["/sw/include",1178],["\"include\"",1149],["# The include file search paths:",7746],["include(FindPackageHandleStandardArgs)",8410]],"useCount":151160},{"word":"include_directories","context":[["include_directories(${CMAKE_CURRENT_BINARY_DIR})",64],["#     include_directories(${Boost_INCLUDE_DIRS})",66],["#      include_directories(${Boost_INCLUDE_DIRS})",70],["include_directories(${CUDA_INCLUDE_DIRS})",72],["#   include_directories(${SFML_INCLUDE_DIR})",81],["include_directories (",86],["include_directories( SYSTEM \"${ANDROID_SYSROOT}/usr/include\" ${ANDROID_STL_INCLUDE_DIRS} )",108],["include_directories(${Boost_INCLUDE_DIRS})",203],["include_directories(.)",405],["include_directories(",624]],"useCount":4575},{"word":"included","context":[["# Header files are presumed to be included like",241],["## External_${extProjName}.cmake files can be recurisvely included,",143],["# Make sure this file is included only once by creating globally unique varibles",139],["# based on the name of this included file.",139],["#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)",131],["# will be included in the documentation.",126],["# This macro was taken directly from the FindQt4.cmake file that is included",109],["# included. Example variables are:",92],["# Make sure this file is included only once",90],["# included. The list of available CPACK_xxx variables and their associated",278]],"useCount":5394},{"word":"includes","context":[["# Initialize our list of includes with the user ones followed by the CUDA system ones.",66],["# This file includes the relevant testing commands required for",1214],["# This file includes the relevent testing commands required for",1153],["# Only check existence of private includes if the Private component is",211],["# If you want to use a more convenient module that includes everything,",161],["# global includes and link directories",112],["# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files",63],["# Construct search paths for includes and libraries from a PREFIX_PATH",67],["# config.h.cmake includes a special #ifdef for Darwin",77],["# only search for libraries and includes in the ndk toolchain",140]],"useCount":6303},{"word":"including","context":[["# can cause incorrect dependencies when #including files based on this macro which is",192],["## and cmake variables are global, so when including sub projects it",143],["#       - put each source file in YOUR_SRCS including a *relative* path",122],["# We need to be careful here and this extra loop because including files will effect THIS_SRC_DIR!!!!",116],["# not including the namespace part.",59],["# the code including all documentation.",59],["# be used to specify the location (absolute path including file name) of",62],["# that captures the structure of the code including all",62],["# the code including all documentation. Note that this",65],["#message(\"including dependency_file = ${dependency_file}\")",67]],"useCount":2134},{"word":"index","context":[["# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then",63],["# If the GENERATE_HTMLHELP tag is set to YES, additional index files",63],["# should be ignored while generating the index headers.",63],["if(index EQUAL -1)",65],["# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index",73],["COMMENT \"Open ./${_outputname}/index.html in your browser to view the coverage report.\"",91],["CHECK_FUNCTION_EXISTS (index HAVE_INDEX)",92],["#                       HTML report is generated in _outputname/index.html",94],["# configuration options related to the alphabetical class index",109],["index 5e28c64..65892a1 100644",111]],"useCount":3850},{"word":"indigo","context":[["\"/opt/ros/indigo/share/std_msgs/cmake/../msg/Header.msg\"",438],["\"/opt/ros/indigo/share/catkin/cmake/catkin_workspace.cmake\"",88],["\"/opt/ros/indigo/include\"",416],["\"/opt/ros/indigo/share/catkin/cmake/templates/rosinstall.in\"",88],["\"/opt/ros/indigo/share/catkin/cmake/../package.xml\"",88],["\"/opt/ros/indigo/share/catkin/cmake/platform/windows.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/catkin_destinations.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/stamp.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/catkin_metapackage.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/templates/setup.bash.in\"",88]],"useCount":9301},{"word":"infile","context":[["STRING(SUBSTRING \"${infile}\" 0 ${_binlength} _checkinfile)",55],["STRING(LENGTH ${infile} _infileLength)",55],["FILE(RELATIVE_PATH rel ${CMAKE_CURRENT_BINARY_DIR} ${infile})",55],["GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)",190],["MAIN_DEPENDENCY ${infile}",113],["FILE(RELATIVE_PATH rel ${CMAKE_CURRENT_SOURCE_DIR} ${infile})",105],["MAIN_DEPENDENCY ${infile})",80],["GET_FILENAME_COMPONENT(rc_path ${infile} PATH)",77],["FILE(READ \"${infile}\" _RC_FILE_CONTENTS)",77],["ARGS ${rcc_options} -name ${outfilename} -o ${outfile} ${infile}",77]],"useCount":2070},{"word":"info","context":[["COMMAND ${GENHTML_PATH} -o ${_outputname} ${_outputname}.info.cleaned",68],["set(info \"\")",63],["COMMAND ${LCOV_PATH} --directory . --capture --output-file ${_outputname}.info",63],["COMMAND ${CMAKE_COMMAND} -E remove ${_outputname}.info ${_outputname}.info.cleaned",66],["# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few",66],["COMMAND ${CMAKE_COMMAND} -E remove ${_outputname}.info ${_outputname}.info.cleaned",66],["\"Include debugging info:\")",81],["# Param _outputname     lcov output is generated as _outputname.info",93],["# Show info where to find the report",195],["# For the latest info, see http://www.ogre3d.org/",448]],"useCount":3632},{"word":"information","context":[["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["# output generic information about the core and buildtype chosen",121],["# output information about installation-directories and locations",123],["# Load information for each installed configuration.",163],["# distributed with this work for additional information",186],["\"PACKAGE_VERSION=\\\"No svn information\\\"\"",240],["\"FIRMWARE_VERSION=\\\"No svn information\\\"\"",249],["# Dependency information for all targets:",1371],["# Save compiler ABI information.",942],["# Qt Help Project output. For more information please see",100]],"useCount":7097},{"word":"input","context":[["# from the input.",80],["# configuration options related to the input files",109],["# invoke to filter for each input file. Doxygen will invoke the filter program",87],["# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using",83],["# Accepts the following variables as input:",81],["# input file. Doxygen will then use the output that the filter program writes",66],["# by executing (via popen()) the command <filter> <input-file>, where <filter>",66],["# is the value of the INPUT_FILTER tag, and <input-file> is the name of an",66],["# So if a user specifies the same cuda file as input more than once, you",66],["# should be searched for input files as well. Possible values are YES and NO.",64]],"useCount":4307},{"word":"install","context":[["# Set the install prefix",8083],["install(TARGETS ${TARGETNAME}",144],["# install generated code",260],["install (",295],["* An install or uninstall procedure did not complete successfully.",399],["install(FILES",425],["# set variables for source/devel/install prefixes",605],["install(",1129],["# Include the install script for each subdirectory.",1672],["# Set the install configuration name.",8081]],"useCount":33494},{"word":"installation","context":[["# installation",60],["#   The Swift installation component that this library belongs to.",60],["# Look for an installation.",64],["#  OPENSSL_ROOT_DIR - Set this variable to the root installation of OpenSSL",56],["# Note Xcode 4.3 changed the installation location, choose the most recent one available",65],["#                                module has problems finding the proper Boost installation",104],["# output information about installation-directories and locations",123],["message( FATAL_ERROR \"Could not find install_name_tool, please check your installation.\" )",136],["# Compute the installation prefix relative to this file.",181],["* The installation package was faulty and contained",399]],"useCount":4346},{"word":"installed","context":[["# This module finds if Java is installed and determines where the",52],["# Set the component getting installed.",8081],["# Load information for each installed configuration.",163],["# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable",86],["#    libraries will be installed.",73],["# This module finds if Python is installed and determines where the",63],["# Determine the subdirectory where this library will be installed.",60],["# If you have multiple versions of Ogre installed, use the CMake or",59],["# Extract the directory where *this* file has been installed (determined at cmake run-time)",55],["# Search user-installed locations first, so that we prefer user installs",49]],"useCount":11644},{"word":"instead","context":[["# By default, the dynamic libraries of SFML will be found. To find the static ones instead,",103],["# force cmake to produce / instead of \\ in build commands for Ninja generator",95],["# Same for structs, setting HAVE_STRUCT_<name> instead",92],["# We are using the libraries located in the VC subdir instead of the parent directory eventhough :",78],["#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)",72],["# use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.",159],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# instead of configure time.",65],["# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list",65],["# contain links (just like the HTML output) instead of page references",63]],"useCount":4787},{"word":"int","context":[["int main(int argc, char **argv)",542],["int main()",2639],["int main() {",1207],["SET(SOCKET_SIZE_TYPE int)",243],["int ret;",271],["int main(int ac, char **av)",340],["int main(int ac, char **av)",340],["int main(void)",492],["int main(void) {",735],["int main(int argc, char **argv)",542]],"useCount":16573},{"word":"internal","context":[["# internal helper macro to generate the failure message when used in CONFIG_MODE:",43],["set(CPP_FILES ${CPP_FILES} src/internal/${file})",178],["# internal macro",69],["# test against internal check variable",68],["# Set this variable as internal, so the user isn't bugged with it.",67],["# that is typed after a \\internal command is included. If the tag is set",63],["# Set it to YES to include the internal documentation.",63],["# Header and internal header is needed to generate internal vapi",44],["SET(_CUR_SEARCH _CUR_SEARCH-NOTFOUND CACHE INTERNAL \"internal use\")",50],["# Header and internal header is needed to generate internal vapi",44]],"useCount":2240},{"word":"into","context":[["# set CXXFLAGS to be fed into CXX_FLAGS by the user:",63],["# iconv built into libc) for the transcoding. See",54],["# Convert the process output into a list",65],["# We need to force this back into the cache.",65],["# now parse the parts of the user given version string into variables",66],["# hierarchy of group names into alphabetical order. If set to NO (the default)",54],["# boost version numbers that should be taken into account when searching",52],["# 1. Copy this file into your cmake modules path.",85],["# also opt into OpenGL and OpenThreads (and Producer if needed) as these",153],["# Major, minor, and fix directly translate into the version numbers shown in",52]],"useCount":5101},{"word":"is","context":[["# The default value is: YES.",1098],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# The corresponding makefile is:",1373],["# The generator used is:",1373],["# The default value is: NO.",1874],["#   This file is part of ccFOAM.",794]],"useCount":109112},{"word":"it","context":[["# though it actually is there if I modify a pre-used variable.",237],["but not all the files it references.",399],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# Copy the file if it is different",199],["ENDFOREACH (it)",218],["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["# necessarily need it.",233],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# I think it has something to do with the CACHE STRING.",237]],"useCount":32782},{"word":"item","context":[["message(STATUS \"warning: embedded item does not exist '${ri}'\")",44],["ENDFOREACH(item)",111],["if(item MATCHES \"[^/]+\\\\.framework/\")",81],["# searching for the same item do nothing.",70],["endforeach(item)",63],["FOREACH(item ${DIRINC})",62],["foreach(item ${${lst}})",50],["if(item MATCHES \"${regex}\")",48],["list(REMOVE_ITEM ${lst} \"${item}\")",47],["#message(STATUS \"info: embedded item exists (${ri})\")",43]],"useCount":2435},{"word":"itk","context":[["if(${itk-module}_SYSTEM_INCLUDE_DIRS)",38],["foreach(dep IN LISTS ITK_MODULE_${itk-module}_DEPENDS)",29],["itk_module_headertest(${itk-module})",26],["foreach(itk-module ${ITK_MODULES_ALL})",25],["if(NOT ${itk-module}_IS_TEST)",25],["list(SORT ITK_MODULE_${itk-module}_DEPENDS) # Deterministic order.",24],["set(CONFIG_EXTRA_INCLUDES \"${CONFIG_EXTRA_INCLUDES}#include \\\"Templates/itk${param_nospace}.h\\\"\\n\")",23],["if(itk-module)",22],["set(${proj}_REPOSITORY ${git_protocol}://itk.org/ITK.git)",22],["# Info: http://www.itk.org/Wiki/CMake:Component_Install_With_CPack",22]],"useCount":2407},{"word":"its","context":[["# others acting on its behalf a paid-up, nonexclusive, irrevocable",397],["# acting on its behalf a paid-up, nonexclusive, irrevocable worldwide",397],["# granted to it by virtue of its status as an intergovernmental organisation nor",163],["#    indicates whether the executable would have been able to run on its",150],["# The AMD SDK currently does not place its headers",76],["set(FIND_SFML_ERROR \"SFML found but some of its dependencies are missing (${FIND_SFML_DEPENDENCIES_NOTFOUND})\")",69],["# If a library is found, replace its cache entry with its REALPATH",66],["# If a library is found, replace its cache entry with its REALPATH",66],["# 3. Neither the name of the University nor the names of its contributors",59],["#      and its affiliates, except as required to comply with Section 4(c) of",59]],"useCount":3667},{"word":"itself","context":[["# since the program itself never needs to be run (only the compiler/preprocessor)",56],["# Now propogate the list itself upwards.",28],["# library itself.",30],["# to build them itself.",36],["# common itself).",38],["message(STATUS \"Building LZMA version ${lzma_version} included in ROOT itself\")",44],["# output depend on the dependency file itself, which should cause the",71],["# Finally the library itself",320],["# NOTICE:  The United States Government is granted for itself and others",397],["# July 25, 2001, the United States Government is granted for itself and",397]],"useCount":2124},{"word":"just","context":[["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["# quotes just around the filenames for the input_file and output_file variables.",198],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# here.  If they aren't there we need to just blank this variable and",71],["# contain links (just like the HTML output) instead of page references",63],["# contain links (just like the HTML output) instead of page references.",63],["# and Perl will parse it just the same.",62],["set (ERROR_MSG \"${ERROR_MSG} a in a non standard directory, just invoke\")",60],["# then just use the release libraries",207],["# and try using this line, so I'm just skipping it entirely for OS X.",240]],"useCount":4142},{"word":"keep","context":[["# copied from catkin/cmake/list_append_unique.cmake to keep pkgConfig",605],["# for cl.exe do not keep unparsed lines which solely consist of a source file name",38],["\"${OBJCOPY} --only-keep-debug <TARGET> ${REACTOS_BINARY_DIR}/symbols/${SYMBOL_FILE}\"",45],["# command to the generated LaTeX files. This will instruct LaTeX to keep",63],["# Set arg to nothing to keep it from being processed further",65],["# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which",94],["# copied from catkin/cmake/list_append_deduplicate.cmake to keep pkgConfig",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# determine which symbols to keep in memory and which to flush to disk.",34]],"useCount":3625},{"word":"key","context":[["key(\"parser\")",77],["foreach(key ${keys})",82],["#   CPACK_PACKAGE_INSTALL_REGISTRY_KEY  - Name of the registry key for the installer",92],["if(key)",53],["foreach(key ${${keys_var}})",48],["\"${${key}_RESOLVED_EMBEDDED_ITEM}\")",44],["if(${${key}_COPYFLAG})",42],["set(key \"${arg}\")",40],["set(key)",39],["# This module defines a number of key variables and macros.",56]],"useCount":2623},{"word":"keyword","context":[["STRING(REPLACE \"${keyword}=\" \"\" str ${str})",55],["#  HAS_CXX11_DECLTYPE           - decltype keyword",32],["message(AUTHOR_WARNING \"value '${arg}' with no previous keyword in ${f}\")",39],["FILE (STRINGS ${CMAKE_SOURCE_DIR}/VERSION str REGEX \"^[ ]*${keyword}=\")",40],["# undo build configuration keyword merging after deduplication",586],["# Optionally, the COMPONENTS keyword can be passed to find_package()",40],["# This tag can be used to specify a number of word-keyword mappings (TCL only).",45],["MACRO(MYSQL_GET_CONFIG_VALUE keyword var)",48],["# instead of private inheritance when no explicit protection keyword is present.",55],["# unpack a list of libraries with optional build configuration keyword prefixes",586]],"useCount":2068},{"word":"keywords","context":[["# merge build configuration keywords with library names to correctly deduplicate",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# If the debug & release library ends up being the same, omit the keywords",62],["message (FATAL_ERROR \"Unknown keywords: ${_option_UNPARSED_ARGUMENTS}\")",58],["# variables.  These contain debug/optimized keywords when",44],["# pack a list of libraries with optional build configuration keywords",586],["#                            target_link_libraries debug/optimized keywords)",35],["#                                       \"component\" (includes debug and optimized keywords",35],["# Filter out keywords for used for debug vs optimized builds",36],["# Remove superfluous \"debug\" / \"optimized\" keywords from",37]],"useCount":2520},{"word":"know","context":[["# do not go through all toolchains if we know the name",110],["# Commands beyond this point should not need to know the version.",559],["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["# we know about.",90],["# need to know the include dir already",90],["# We don't know the Boost version, so assume it's",89],["# Determine the cmake host system version so we know where to find the iOS SDKs",67],["# standard header. Notice: only use this tag if you know what you are doing!",63],["message(FATAL_ERROR \"There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.\")",65],["# for VS projects we won't know if we are making a debug or release build",65]],"useCount":2269},{"word":"lang","context":[["foreach(lang CXX)",2027],["foreach(lang)",263],["FOREACH(lang C CXX)",182],["foreach(lang C)",304],["foreach(lang )",342],["foreach (lang C CXX Fortran)",123],["FOREACH(lang C)",1002],["FOREACH(lang)",3112],["FOREACH(lang CXX)",4715],["ENDFOREACH(lang)",9004]],"useCount":31256},{"word":"language","context":[["# finally set a found variable for each MPI language",41],["# If you use Microsoft's C++/CLI language, you should set this option to YES to",79],["# The OUTPUT_LANGUAGE tag is used to specify the language in which all",84],["# The default language is English, other supported languages are:",63],["#     [+] added assembler language support (.S)",61],["# We need to set the linker language based on what the expected generated file",130],["# ignores language-specific flags and libraries.  However, some MPI implementations",41],["# The set of files for implicit dependencies of each language:",10677],["# Per-language clean rules from dependency scanning.",11977],["# information to generate all constant output in the proper language.",84]],"useCount":25919},{"word":"languages","context":[["message(STATUS \"Looking for BLAS... - NOT found (Unsupported languages)\")",24],["# The set of languages for which implicit dependencies are needed:",10677],["# make sure to enable languages after setting configuration types",21],["# OpenMP support are returned in variables for the different languages.",16],["# Figure out which languages are being wrapped, and add them to the list.",16],["foreach(lang ${languages})",12],["# This module is shared by multiple languages; use include blocker.",148],["# The default language is English, other supported languages are:",63],["# choose languages that apply to the target",38],["# this allows for the same .i file to be wrapped into different languages",36]],"useCount":11073},{"word":"left","context":[["# put in front of it. If left blank `html' will be used as the default path.",70],["# the mscgen tool resides. If left empty the tool is assumed to be found in the",75],["# If left blank NO is used.",64],["# found. If left blank, it is assumed the dot tool can be found in the path.",80],["# each generated HTML page. If it is left blank doxygen will generate a",126],["# and *.h) to filter out the source-files in the directories. If left",127],["# Remove any output file left over from previous test run",131],["# and spaces, anything else is left up to the user to fix if they want to",198],["# put in front of it. If left blank `rtf' will be used as the default path.",63],["# by doxygen. Possible values are YES and NO. If left blank NO is used.",63]],"useCount":2913},{"word":"level","context":[["## the top level of the deal.II distribution.",474],["# The top level Makefile was generated from the following files:",1373],["# adjust API level",109],["# choose native API level",126],["# found in the top-level directory of this distribution.",85],["message( STATUS \"Adjusting Android API level 'android-${ANDROID_NATIVE_API_LEVEL}' to 'android-${__real_api_level}'\")",109],["#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.",129],["#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)",135],["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["# level, even when the patch level is non-zero.",82]],"useCount":4616},{"word":"lib","context":[["/opt/local/lib",2139],["/usr/lib",4822],["/usr/local/lib",4764],["/opt/lib",642],["/sw/lib",1821],["PATH_SUFFIXES lib64 lib",1592],["if(lib)",1210],["list(APPEND ${VAR} \"${lib}\")",1182],["PATH_SUFFIXES lib",1048],["lib",688]],"useCount":74008},{"word":"lib64","context":[["/opt/local/lib64",118],["NEW_RPATH \"/usr/local/lib64/games/speed-dreams-2/lib\")",100],["PATH_SUFFIXES lib lib64",221],["PATH_SUFFIXES lib64 lib",1592],["/usr/lib64",1464],["/usr/local/lib64",1189],["/usr/freeware/lib64",348],["lib64",207],["${CMAKE_INSTALL_PREFIX}/lib64",150],["PATH_SUFFIXES \"lib\" \"lib64\"",125]],"useCount":7922},{"word":"libraries","context":[["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["# NOTE: Singular variables for this library, plural for libraries this this lib depends on.",311],["# Set the include dir variables and the libraries and let libfind_process do the rest.",345],["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# keep build configuration keywords, target names and absolute libraries as-is",586],["set(libraries \"\")",484],["# search headers and libraries in the target environment, search",351],["foreach(library ${libraries})",612],["# as a fall back for non-catkin libraries try to search globally",605],["# pack a list of libraries with optional build configuration keywords",586]],"useCount":29501},{"word":"library","context":[["find_library(lib ${library})",605],["elseif(TARGET ${library})",586],["# merge build configuration keywords with library names to correctly deduplicate",586],["list(APPEND ${VAR} \"${lib}${CATKIN_BUILD_CONFIGURATION_KEYWORD_SEPARATOR}${library}\")",588],["list(GET _argn ${_index} library)",589],["elseif(IS_ABSOLUTE ${library})",605],["foreach(library ${libraries})",612],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["set(lib \"${library}-NOTFOUND\")",605],["find_library(lib ${library}",605]],"useCount":47096},{"word":"libs","context":[["if( EXISTS \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libgnustl_static.a\" )",112],["# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES",116],["ARGS --libs",127],["FUNCTION(MY_SEARCH_LIBS func libs result)",92],["FOREACH(lib  ${libs})",92],["# On 32bit build find the 32bit libs",92],["set( __libstl                \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libgnustl_static.a\" )",112],["set( __libstl                \"${__libstl}/libs/${ANDROID_NDK_ABI_NAME}/libstdc++.a\" )",112],["set( __libstl                 \"${ANDROID_NDK}/sources/cxx-stl/gabi++/libs/${ANDROID_NDK_ABI_NAME}/libgabi++_static.a\" )",110],["# Lookup the 64 bit libs on x64",92]],"useCount":8327},{"word":"like","context":[["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.",65],["# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index",73],["# patterns (like *.h and *.hpp) to filter out the header-files in the",84],["# We should call this function again since hunter_add_package is include-like",132],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# Header files are presumed to be included like",241],["#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")",68],["# like it is currently), we can remove the quotes around the",65],["# we convert the strings to lists (like we want).",65]],"useCount":4913},{"word":"line","context":[["# copy and paste a runnable command line.",198],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["#  CMAKE_REQUIRED_FLAGS = string of compile command line flags",209],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["# -include process include file as the first line of the primary source file",110],["WARN_FORMAT            = \"$file:$line: $text\"",110],["# 2. Add the following line to your CMakeLists.txt:",101],["#   CMAKE_REQUIRED_FLAGS = string of compile command line flags",81],["# files in one run (i.e. multiple -o and -T options on the command line). This",80]],"useCount":6799},{"word":"link","context":[["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["# Non-OS X framework versions expect you to also dynamically link to",233],["# module will attempt to locate and set the the proper link flags",187],["# detect if need link crtbegin_so.o explicitly",104],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["# global includes and link directories",112],["#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link",156],["# SDL2_LIBRARY, the name of the library to link against",162],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# SDL2_FOUND, if false, do not try to link to SDL2",164]],"useCount":11548},{"word":"linker","context":[["#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker",111],["# We need to set the linker language based on what the expected generated file",130],["# this is *required* to use the following linker flags that routes around",137],["# linker flags",140],["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111],["set( ANDROID_LINKER_FLAGS      \"${ANDROID_LINKER_FLAGS}\"      CACHE INTERNAL \"Android specific c/c++ linker flags\" )",108],["set( CMAKE_MODULE_LINKER_FLAGS \"\"                        CACHE STRING \"module linker flags\" )",110],["set( CMAKE_EXE_LINKER_FLAGS    \"-Wl,-z,nocopyreloc\"      CACHE STRING \"executable linker flags\" )",110],["set( CMAKE_SHARED_LINKER_FLAGS \"\"                        CACHE STRING \"shared linker flags\" )",110],["#    flags and linker flags.",111]],"useCount":3919},{"word":"linking","context":[["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["# In windows, automatic linking is performed, so you do not have",89],["# to specify the libraries.  If you are linking to a dynamic",89],["# for linking.",89],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking",89],["CACHE STRING \"Flags used for linking binaries during coverage builds.\"",71],["# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking",69],["# in case of static linking, we must also define the list of all the dependencies of SFML libraries",69],["#  s        linking statically to the C++ standard library and",66]],"useCount":2931},{"word":"links","context":[["# Note: wordpad (write) and others do not support links.",63],["# building a shared library, shared module, or executable that links",100],["# Targets to which this target links.",10677],["# contain links (just like the HTML output) instead of page references",63],["# contain links (just like the HTML output) instead of page references.",63],["# directories that are symbolic links (a Unix file system feature) are excluded",52],["# There is no 'readlink' on solaris, so we use perl to follow links:",50],["# that links to our library links to this one as well.",36],["# links to external symbols imported via tag files in a separate window.",36],["# does not have to be run to correct the links.",38]],"useCount":11689},{"word":"linux","context":[["#        * arm-linux-androideabi-4.6",107],["#        * mipsel-linux-android-4.6",107],["set( ANDROID_LLVM_TRIPLE \"armv7-none-linux-androideabi\" )",334],["set( ANDROID_LLVM_TRIPLE \"armv5te-none-linux-androideabi\" )",222],["#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"",135],["#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"",135],["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135],["set( ANDROID_NDK_HOST_SYSTEM_NAME \"linux-x86_64\" )",115],["set( ANDROID_LLVM_TRIPLE \"mipsel-none-linux-android\" )",111],["set( ANDROID_LLVM_TRIPLE \"i686-none-linux-android\" )",111]],"useCount":4320},{"word":"list","context":[["list(FIND ${listname} ${_item} _index)",607],["list(APPEND CMAKE_ABSOLUTE_DESTINATION_FILES",1652],["list(APPEND ${VAR} \"${lib}\")",1182],["list(APPEND CPACK_ABSOLUTE_DESTINATION_FILES",757],["list(LENGTH depend_list count)",609],["# append to list",599],["list(REMOVE_AT depend_list 0)",605],["# append elements to a list if they are not already in the list",605],["# append elements to a list if they are not already in the list",605],["list(APPEND ${listname} ${_item})",607]],"useCount":88020},{"word":"listed","context":[["# functions referencing it will be listed.",62],["# all listed variables are TRUE",2436],["# include brief member descriptions after the members that are listed in",63],["# called/used by that function will be listed.",62],["# will be listed.",63],["# if all listed variables are TRUE",786],["# all listed variables are TRUE.",93],["# be listed.",83],["# library. We now set the variables listed by the documentation for this",71],["# If the ALLEXTERNALS tag is set to YES all external classes will be listed",63]],"useCount":5236},{"word":"listname","context":[["string(REPLACE \"-fopenmp\" \"\" tmpFlags \"${${listname}}\")",19],["message(\"-fopenmp causes incorrect compliation of HDF, removing from ${listname}\")",19],["macro(_list_append_deduplicate listname)",586],["list(REMOVE_ITEM ${listname} ${ARGN})",587],["if(${listname})",587],["macro(_list_append_unique listname)",605],["list(APPEND ${listname} ${ARGN})",587],["if(\"${${listname}}\" MATCHES \".*-fopenmp.*\")",19],["list(FIND ${listname} ${_item} _index)",607],["list(APPEND ${listname} ${_item})",607]],"useCount":4261},{"word":"lists","context":[["# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS",65],["# we convert the strings to lists (like we want).",65],["# error message that lists the libraries we were unable to find.",94],["/* Define if libtool can extract symbol lists from object files. */",34],["# testing this directory and lists subdirectories to be tested as well.",2367],["# 1.5.0 Allow any type of file in the INPUTS lists, not just tex file",36],["#       Replaced it with a CONFIGURE option that lists input files for which",37],["#lists",37],["# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will",58],["# For lists items can also be appended using:",61]],"useCount":3468},{"word":"local","context":[["/usr/local/include",3782],["/usr/local",2077],["/opt/local/include",1602],["/opt/local",1525],["SET(CMAKE_INSTALL_PREFIX \"/usr/local\")",3426],["/opt/local # DarwinPorts",775],["/usr/local/lib",4764],["/usr/local/lib64",1189],["set(CMAKE_INSTALL_PREFIX \"/usr/local\")",1094],["/opt/local/lib",2139]],"useCount":41907},{"word":"location","context":[["#   If set manually, it will override the default location and force the user of a particular Developer Platform",79],["DOC \"Toolkit location.\"",132],["# old location ( pre r8c )",102],["# location did.  We will find a new one based on the new inputs.",92],["#  all files are absolute paths or relative to the location of the qrc file",88],["# Adding location for the tag files is done as follows:",83],["DOC \"Specify the location of the mysql library here.\"",82],["\"location of version.hpp: ${Boost_INCLUDE_DIR}/boost/version.hpp\")",81],["#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.",79],["* The file was deleted, renamed, or moved to another location.",399]],"useCount":5036},{"word":"log","context":[["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",404],["file(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",403],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log",273],["if(log)",150],["FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log",257],["LOG_CONFIGURE 0  # Wrap configure in script to ignore log output from dashboards",140],["LOG_BUILD     0  # Wrap build in script to to ignore log output from dashboards",140],["${log}",163],["set(log \"\")",162],["set(log LOG 1)",150]],"useCount":4991},{"word":"long","context":[["-typedef long           ptrdiff_t;",111],["long long int foo64= -10; long long int bar64= 10;",96],["@@ -51,7 +51,11 @@ typedef long int       ssize_t;",111],["MY_CHECK_TYPE_SIZE(long LONG)",81],["MY_CHECK_TYPE_SIZE(\"long long\" LONG_LONG)",81],["long long int foo64= -10; long long int bar64= 10;",96],["long long int foo64= -10; long long int bar64= 10;",96],["long long int foo64= -10; long long int bar64= 10;",96],["+     typedef long           ptrdiff_t;",111],["# modifications, as long as this notice is preserved.",442]],"useCount":4407},{"word":"look","context":[["# TODO: look for right fix",109],["# look for Paging component",59],["# Do the same find_package call but look specifically for the CMake version.",62],["# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,",62],["# look for plugin dirs",61],["# By default this script will look for a dynamic Ogre build. If you",59],["# look for the media directory",59],["# look for Terrain component",59],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# (Actually on second look, I think it only needs one of the m* libraries.)",229]],"useCount":2945},{"word":"lua","context":[["FIND_PATH(LUA_INCLUDE_DIR lua.h",72],["# dios_module_link_library(${MODULE} lua false)",64],["#  LUA_INCLUDE_DIR, where to find lua.h",72],["#  #include <lua/lua.h>",104],["#  #include <lua/lua.h>",104],["#  #include \"lua.h\"",104],["# in locations other than lua/",105],["#   #include \"lua.h\"",32],["if(LUA_INCLUDE_DIR AND EXISTS \"${LUA_INCLUDE_DIR}/lua.h\")",34],["find_path(LUA_INCLUDE_DIR lua.h",52]],"useCount":2023},{"word":"m","context":[["# Don't forget to include SDLmain.h and SDLmain.m your project for the",144],["set(CMAKE_REQUIRED_LIBRARIES m)",371],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)",214],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)",166],["set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES \"stdc++;m;c\")",134],["MY_SEARCH_LIBS(floor m LIBM)",92],["MY_SEARCH_LIBS(__infinity m LIBM)",92]],"useCount":4178},{"word":"macro","context":[["# can cause incorrect dependencies when #including files based on this macro which is",192],["# macro to find packages on the host OS",144],["macro(_list_append_deduplicate listname)",586],["macro(_unpack_libraries_with_build_configuration VAR)",586],["macro(_pack_libraries_with_build_configuration VAR)",586],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["macro(cuda_execute_process status command)",198],["macro( find_host_program )",147],["macro( find_host_package )",145],["macro(_list_append_unique listname)",605]],"useCount":22172},{"word":"macros","context":[["#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)",209],["# then the macro expansion is limited to the macros specified with the",63],["# macros.",69],["#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)",81],["# gcc). The argument of the tag is a list of macros of the form: name",69],["# This module defines a number of key variables and macros.",56],["# Defines the following macros:",56],["# End functions/macros",87],["include(${CMAKE_SOURCE_DIR}/cmake/macros/EnsureVersion.cmake)",54],["#  FindBoost functions & macros",81]],"useCount":3159},{"word":"main","context":[["int main(void) {",735],["int main(int argc, char **argv)",542],["int main(void)",492],["int main(int ac, char **av)",340],["int main(int argc, char **argv) {",190],["int main(int ac, char **av) {}",160],["# only applications need main().",187],["int main(int argc, char *argv[]){return 0;}\"",164],["int main() {",1207],["int main()",2639]],"useCount":10775},{"word":"make","context":[["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# Param _targetname     The name of new the custom make target",184],["#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..",132],["## is important make the extProjName and proj variables",143],["#    variables to make necessary Android-specific configuration changes.",136],["#     You need native port of make to build your project.",136],["Usually it happens because of bug in make-standalone-toolchain.sh script from NDK r7, r7b and r7c.",113],["# Set these up as variables to make reading the generated file easier",199],["#   $ make -j8",217],["# create dummy targets for exported code generation targets to make life of users easier",605]],"useCount":8920},{"word":"man","context":[["# If the MAN_LINKS tag is set to YES and Doxygen generates man output,",62],["# then it will generate one additional man file for each entity",62],["# documented in the real man page(s). These additional files",62],["# only source the real man page, but without them the man command",62],["# put in front of it. If left blank `man' will be used as the default path.",63],["# The MAN_OUTPUT tag is used to specify where the man pages will be put.",63],["# the generated man pages (default is the subroutine's section .3)",63],["# configuration options related to the man page output",106],["MAN_OUTPUT             = man",117],["# generate man pages",63]],"useCount":2154},{"word":"manually","context":[["#   If set manually, this will force the use of a specific SDK version",80],["#   If set manually, it will override the default location and force the user of a particular Developer Platform",79],["# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT",66],["# Setup iOS platform unless specified manually with IOS_PLATFORM",66],["# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT",64],["# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain",58],["You need to either upgrade to newer NDK or manually copy",113],["# defined in the generating passes of nvcc invokation.  We will go ahead and manually",192],["# People will have to manually change the cache values of",300],["# since the path where the library is found is returned we have to iterate over the paths manually",605]],"useCount":2461},{"word":"mark_as_advanced","context":[["mark_as_advanced( ANDROID_FORCE_ARM_BUILD )",136],["mark_as_advanced(",2103],["mark_as_advanced (",164],["mark_as_advanced( CMAKE_INSTALL_NAME_TOOL )",139],["mark_as_advanced( ANDROID_FORBID_SYGWIN )",136],["mark_as_advanced( ANDROID_NDK_LAYOUT )",103],["mark_as_advanced( ANDROID_NDK_HOST_X64 )",108],["mark_as_advanced(EIGEN3_INCLUDE_DIR)",108],["mark_as_advanced(${i})",111],["mark_as_advanced( ANDROID_STL ANDROID_STL_FORCE_FEATURES )",112]],"useCount":8484},{"word":"match","context":[["## use regular expression to match wildcard equivalent \"-L*<endchar>\"",70],["# returned by pkg-config, so use a wildcard match to improve chances of finding",46],["git_describe(out --exact-match ${ARGN})",89],["# Returns the results of git describe --exact-match on the source tree,",92],["#                               RelWithDebInfo, but it should match one of the",198],["# use regular expression to match wildcard equivalent \"-L*<endchar>\"",43],["# We'll set Boost_FOUND true again if we have an exact version match.",44],["# set this tag to YES in order to let doxygen match functions declarations and",58],["# to do: test whether compiler flags match between target  _targetName",53],["pkg_message(OGRE \"Build type (static, dynamic) does not match the requested one.\")",59]],"useCount":2419},{"word":"materials","context":[["#     and/or other materials provided with the distribution.",120],["#    the documentation and/or other materials provided with the",74],["#       and/or other materials provided with the distribution.",70],["# documentation and/or other materials provided with the distribution.",770],["#       documentation and/or other materials provided with the distribution.",374],["#     documentation and/or other materials provided with the distribution.",153],["#    documentation and/or other materials provided with the distribution.",268],["#   documentation and/or other materials provided with the distribution.",293],["#   and/or other materials provided with the distribution.",310],["#    and/or other materials provided with the distribution.",340]],"useCount":3056},{"word":"math","context":[["CHECK_SYMBOL_EXISTS(isnan math.h HAVE_ISNAN)",81],["CHECK_SYMBOL_EXISTS(rint  math.h HAVE_RINT)",81],["\"#include  <math.h>",92],["CHECK_SYMBOL_EXISTS(log2  math.h HAVE_LOG2)",92],["math (EXPR _index \"${_index} + 1\")",120],["# For Windows and Mac, don't need to explicitly include the math library",131],["# include the math library for Unix",132],["math( EXPR __availableToolchainsCount \"${__availableToolchainsCount}-1\" )",136],["#include <math.h>",407],["math(EXPR _index \"${_index} + 1\")",1190]],"useCount":5830},{"word":"members","context":[["# inherited members of a class in the documentation of that class as if those",80],["# all members of a group must be documented explicitly.",84],["# member in the group (if any) for the other members of the group. By default",84],["# members were ordinary class members. Constructors, destructors and assignment",80],["# If the EXTRACT_STATIC tag is set to YES all static members of a file",63],["# alphabetically by member name. If set to NO the members will appear in",63],["# for undocumented members. If EXTRACT_ALL is set to YES then this flag will",63],["# If the EXTRACT_PRIVATE tag is set to YES all private members of a class",63],["# If this flag is set to YES, the members of anonymous namespaces will be",75],["# members were ordinary class members. Constructors, destructors and assignment",80]],"useCount":2059},{"word":"message","context":[["message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")",2385],["message(STATUS \"\")",580],["message(\"${_msg}\")",605],["message(FATAL_ERROR \"Error generating ${generated_file}\")",795],["message(FATAL_ERROR",1189],["message(\"\")",1342],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["message(STATUS \"[ ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} ] \"",2154],["message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")",2385]],"useCount":65679},{"word":"missing","context":[["# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.",111],["set(FIND_SFML_ERROR \"Could NOT find SFML (missing: ${FIND_SFML_MISSING})\")",101],["set(FIND_SFML_ERROR \"SFML found but some of its dependencies are missing (${FIND_SFML_DEPENDENCIES_NOTFOUND})\")",69],["message( FATAL_ERROR \"The required libstdsupc++.a is missing in your standalone toolchain.",112],["# replacements, missing definitions are set to their default value.",63],["#     [~] Fix for missing install_name_tool on OS X",63],["# Process all libraries and set _FOUND to false if any are missing",48],["# Process all includes and set _FOUND to false if any are missing",48],["_FPHSA_FAILURE_MESSAGE(\"${FPHSA_FAIL_MESSAGE}: missing: ${MISSING_VARS} (found ${${_NAME}_CONFIG} ${VERSION_MSG})\")",43],["if(fail-on-missing)",1228]],"useCount":3233},{"word":"mode","context":[["# -*- mode: cmake; -*-",88],["# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: \"cmake -Wdev\" -*-",131],["# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: \"cmake -Wdev\" -*-",131],["SET(MY_ATOMIC_MODE_DUMMY 1 CACHE BOOL \"Assume single-CPU mode, no concurrency\")",79],["# Device mode.  No flags necessary.",66],["# Set whether we are using emulation or device mode.",65],["# Parse HOST_COMPILATION mode.",65],["option(CUDA_BUILD_EMULATION \"Build in Emulation mode\" OFF)",64],["option(CUDA_64_BIT_DEVICE_CODE \"Compile device code in 64 bit mode\" ${CUDA_64_BIT_DEVICE_CODE_DEFAULT})",64],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136]],"useCount":2888},{"word":"modify","context":[["# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",45],["## Then modify the CMakeLists.txt file in the root directory of your",231],["# modify the way the check is run:",223],["#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",70],["#             ** File generated automatically, do not modify **",66],["# copy, modify, merge, publish, distribute, sublicense, and/or sell",45],["BRIEF_DOCS \"Do not modify source file's build command.\"",38],["# though it actually is there if I modify a pre-used variable.",237],["# CMAKE_INCLUDE_PATH to modify the search paths.",292],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",518]],"useCount":2133},{"word":"module","context":[["# This module responds to the the flag:",232],["# this module will try to find on your behalf.) Also for OS X, this",226],["# This module defines",3013],["# Fortran module output directory.",622],["# This module defines the following variables:",388],["# should be set in the CMake list file of the project before CPack module is",370],["# This module defines:",350],["# Variables defined by this module:",296],["# This module will define the following variables:",241],["# module will automatically add the -framework Cocoa on your behalf.",226]],"useCount":29945},{"word":"modules","context":[["# find the requested modules",111],["\"/boilermake/opencv-src/opencv/modules/imgproc/include\"",101],["# use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.",159],["# modules won't do it for you. This is to allow you control over your own",159],["# Requires these CMake modules:",210],["\"/boilermake/opencv-src/opencv/modules/core/include\"",101],["\"/boilermake/opencv-src/opencv/modules/highgui/include\"",101],["# SDL2 CMake modules.",100],["set(SFML_FOUND TRUE) # will be set to false if one of the required modules is not found",99],["\"/boilermake/opencv-src/opencv/modules/ts/include\"",92]],"useCount":7940},{"word":"more","context":[["# and providing a more controlled/consistent search behavior.",244],["# sources only. Doxygen will then generate output that is more tailored for",109],["# See http://visp.inria.fr for more information.",91],["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.",98],["# Qt Help Project output. For more information please see",100],["# If you want to use a more convenient module that includes everything,",161],["# made to remove references to Qt and make this file more generally applicable",109],["#   for more details.",402]],"useCount":6951},{"word":"msg","context":[["\"/opt/ros/indigo/share/rosgraph_msgs/cmake/rosgraph_msgs-msg-extras.cmake\"",54],["\"/opt/ros/indigo/share/roscpp/cmake/roscpp-msg-extras.cmake\"",54],["message(STATUS \"${msg}\")",55],["# generated from genmsg/cmake/pkg-msg-paths.cmake.em",57],["# generated from genmsg/cmake/pkg-msg-paths.cmake.develspace.in",57],["\"/opt/ros/indigo/share/std_msgs/cmake/std_msgs-msg-extras.cmake\"",58],["MESSAGE (STATUS \"${msg}... no\")",63],["# generated from genmsg/cmake/pkg-msg-paths.cmake.installspace.in",67],["\"/opt/ros/indigo/share/std_msgs/cmake/../msg/Header.msg\"",438],["\"/opt/ros/indigo/share/std_msgs/cmake/../msg/Header.msg\"",438]],"useCount":4097},{"word":"multiple","context":[["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["set(CUDA_NVCC_FLAGS_${config_upper} \"\" CACHE STRING \"Semi-colon delimit multiple arguments.\")",64],["set(CUDA_NVCC_FLAGS \"\" CACHE STRING \"Semi-colon delimit multiple arguments.\")",64],["# If you have multiple versions of Ogre installed, use the CMake or",59],["\"If a target contains more than that number of source files, cotire will create multiple unity source files for it.\"",38],["# feed. A documentation feed provides an umbrella under which multiple",54],["# this to NO can help when comparing the output of multiple runs.",42],["# This module is shared by multiple languages; use include blocker.",148],["# files in one run (i.e. multiple -o and -T options on the command line). This",80],["# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output",79]],"useCount":2200},{"word":"must","context":[["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# simple dependencies must only be find_package()-ed once",605],["# dependencies with components must be find_package()-ed again",605],["# Each component is separate and you must opt in to each module. You must",159],["# Each component is separate and you must opt in to each module. You must",159],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["# generated_file:STRING=<> File to generate.  This argument must be passed in.",198],["# generated_cubin_file:STRING=<> File to generate.  This argument must be passed",198],["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170]],"useCount":7350},{"word":"mysql","context":[["SET(CMAKE_INSTALL_PREFIX \"/usr/local/mysql\")",156],["/usr/include/mysql",152],["/usr/local/include/mysql",152],["/usr/lib/mysql",134],["/usr/local/lib/mysql",132],["/usr/local/mysql/lib",123],["/usr/local/mysql/include",121],["#define PACKAGE \"mysql\"",87],["#define PACKAGE_TARNAME \"mysql\"",87],["DOC \"Specify the location of the mysql library here.\"",82]],"useCount":5055},{"word":"n","context":[["\"the following output:\\n${OUTPUT}\\n\\n\")",188],["\"Source file was:\\n${SOURCE}\\n\")",208],["\"Source file was:\\n${SOURCE}\\n\")",208],["# @n",233],["\"${OUTPUT}\\n\\n\")",250],["\"${OUTPUT}\\n\\n\")",250],["\"${OUTPUT}\\n\"",317],["\"the following output:\\n${OUTPUT}\\n\\n\")",188],["string(REPLACE \";\" \"\\n\" CMAKE_INSTALL_MANIFEST_CONTENT",466],["\"\\n\"",455]],"useCount":23806},{"word":"name","context":[["# Param _targetname     The name of new the custom make target",184],["${name}",182],["/* Define to the one symbol short name of this package. */",179],["/* Define to the full name of this package. */",192],["/* Define to the full name and version of this package. */",193],["set_target_properties(${name}",281],["# the name of the target operating system",346],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# Set the install configuration name.",8081],["# 3. Neither the name of the Corporation nor the names of the",636]],"useCount":48822},{"word":"names","context":[["# merge build configuration keywords with library names to correctly deduplicate",586],["# in case and if your file system supports case sensitive file names. Windows",84],["# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names",79],["# 3. Neither the name of the Corporation nor the names of the",636],["#  * The names of Kitware, Inc., the Insight Consortium, or the names of",69],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# N.B. _prefix is the prefix applied to the names of all cached variables that",103],["set(_state \"names\")",88],["# allowed. This is useful if you have classes or files whose names only differ",84],["message(STATUS \"MSVC: Overloaded standard names\")",79]],"useCount":7252},{"word":"native","context":[["set( ANDROID_NATIVE_API_LEVEL \"${ANDROID_NATIVE_API_LEVEL}\" CACHE STRING \"Android API level for native code\" FORCE )",136],["#     You need native port of make to build your project.",136],["# So this flag option is required for all projects using OpenGL from native.",111],["#  n        using the STLport deprecated \"native iostreams\" feature",66],["#     [+] support cross-compilation on Windows (native, no cygwin support)",63],["# Find the native MySQL includes and library",51],["/* LLVM architecture name for the native architecture, if available */",39],["/* LLVM name for the native TargetInfo init function, if available */",39],["# choose native API level",126],["#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK",135]],"useCount":2293},{"word":"need","context":[["# only applications need main().",187],["# Commands beyond this point should not need to know the version.",559],["# For threads, as mentioned Apple doesn't need this.",239],["# necessarily need it.",233],["# Args with spaces need quotes around them to get them to be parsed as a single argument.",198],["# Now we need to build up our command string.  We are accounting for quotes",198],["# We won't actually use these variables for now, but we need to set this, in",198],["# system piece by piece in case you need to opt out of certain components",159],["# update the list -- these are only system libraries, no need to find them",138],["#     You need native port of make to build your project.",136]],"useCount":10918},{"word":"needed","context":[["# The set of languages for which implicit dependencies are needed:",10677],["# This needed to change because \"proper\" SDL2 convention",100],["# Only link if needed",102],["# subsequent toolchain loading is not really needed",129],["# This needed to change because \"proper\" SDL convention",145],["# also opt into OpenGL and OpenThreads (and Producer if needed) as these",153],["# Added a search for SDL2main which is needed by some platforms.",196],["# the dependency file needed by CMake to compute dependencies.  In addition the",198],["# Added a search for threads which is needed by some platforms.",247],["# Added needed compile switches for MinGW.",247]],"useCount":15531},{"word":"needs","context":[["# MinGW needs an additional library, mwindows",230],["# since the program itself never needs to be run (only the compiler/preprocessor)",56],["# This needs to be passed in at this stage, because VS needs to fill out the",66],["# This needs to be passed in at this stage, because VS needs to fill out the",66],["message(FATAL_ERROR \"needs newer comp_base.cmake version\")",73],["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["What needs to be done?",56],["# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.",44],["# Determine full path names for all of the libraries that one needs",55],["# For Xcode, cmake needs my patch to process",48]],"useCount":2024},{"word":"new","context":[["# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few",66],["# Add new source files here.",63],["# The new default is to treat a multi-line C++ comment block as a detailed",62],["# location did.  We will find a new one based on the new inputs.",92],["# location did.  We will find a new one based on the new inputs.",92],["# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree",99],["set(_Boost_VERSION_AGE \"new\")",90],["# State that we found a version of Boost that is too new or too old.",90],["# Param _targetname     The name of new the custom make target",184],["# Added new modifications to recognize OS X frameworks and",246]],"useCount":3797},{"word":"newer","context":[["# In Boost 1.36.0 and newer, the mangled compiler name used",89],["set(Boost_ERROR_REASON \"${Boost_ERROR_REASON} (or newer)\")",87],["message( FATAL_ERROR \"gabi++ is not awailable in your NDK. You have to upgrade to NDK r7 or newer to use gabi++.\")",71],["# Requires CMake 2.6 or newer (uses the 'function' command)",158],["message(FATAL_ERROR \"needs newer comp_base.cmake version\")",73],["#                          Available for NDK r7 and newer.",218],["#                          Implies -frtti -fno-exceptions for NDK r7 and newer.",218],["#                          Available for NDK r7b and newer.",110],["You need to either upgrade to newer NDK or manually copy",113],["# to require version 3.1.2 or newer of Eigen3.",117]],"useCount":2414},{"word":"no","context":[["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["--no-warn-unused-cli",100],["# no suffix for sfml-main, it is always a static library",103],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined -Wl,-rpath-link,${ANDROID_SYSROOT}/usr/lib\" )",103],["#  See home page: https://github.com/taka-no-me/android-cmake",108],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,--no-undefined\" )",112],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136],["# update the list -- these are only system libraries, no need to find them",138],["# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library",164],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207]],"useCount":8885},{"word":"non","context":[["#   Generate API notes for non-overlayed modules with this target.",60],["# as a fall back for non-catkin libraries try to search globally",605],["# But for non-OSX systems, I will use the CMake Threads package.",239],["message(WARNING \"Path to your Android NDK (or toolchain) has non-alphanumeric symbols.\\nThe build might be broken.\\n\")",103],["# Ceres Solver - A fast non-linear least squares minimizer",86],["# level, even when the patch level is non-zero.",82],["# before the specified paths. To search non-standard paths first,",70],["# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run",62],["set (ERROR_MSG \"${ERROR_MSG} a in a non standard directory, just invoke\")",60],["#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)",51]],"useCount":3856},{"word":"none","context":[["set( ANDROID_LLVM_TRIPLE \"armv7-none-linux-androideabi\" )",334],["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["set( ANDROID_LLVM_TRIPLE \"mipsel-none-linux-android\" )",111],["#        none           -> Do not configure the runtime.",111],["set( ANDROID_LLVM_TRIPLE \"i686-none-linux-android\" )",111],["if( ANDROID_STL STREQUAL \"none\" )",112],["if( NOT ANDROID_STL STREQUAL \"none\" )",112],["(none)",114],["set( ANDROID_LLVM_TRIPLE \"armv5te-none-linux-androideabi\" )",222],["none           -> Do not configure the runtime.",226]],"useCount":2325},{"word":"not","context":[["* An install or uninstall procedure did not complete successfully.",399],["but this file does not exist.  Possible reasons include:",399],["#                          Is not available for standalone toolchain.",659],["# also defined, but not for general use are",608],["# append elements to a list if they are not already in the list",605],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["none           -> Do not configure the runtime.",226],["# Commands beyond this point should not need to know the version.",559],["but not all the files it references.",399]],"useCount":45801},{"word":"now","context":[["# now that we collected all arguments, process them",46],["# so it is simply ignored here for now.",52],["# and now the version string given by qmake",56],["message(FATAL_ERROR \"There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.\")",65],["# now parse the parts of the user given version string into variables",66],["# library. We now set the variables listed by the documentation for this",71],["# Clang version 3.0.0 and greater now supports gcov as well.",83],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["# define this for now until a future version fixes this bug.",192],["# We won't actually use these variables for now, but we need to set this, in",198]],"useCount":2933},{"word":"number","context":[["# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns",63],["# The TAB_SIZE tag can be used to set the number of spaces in a tab.",63],["# check the version number",114],["# in which this list will be split (can be a number in the range [1..20])",63],["# This tag can be used to specify a number of aliases that acts",63],["# The PROJECT_NUMBER tag can be used to enter a project or revision number.",70],["/* Version number of package */",183],["# compute an overall version number which can be compared at once",80],["# if we could extract them, compare with the requested version number",110],["BRIEF_DOCS \"Maximum number of source files to include in a single unity source file.\"",114]],"useCount":5283},{"word":"nvcc","context":[["# This file runs the nvcc commands to produce the desired output file along with",198],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# defined in the generating passes of nvcc invokation.  We will go ahead and manually",192],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["NAMES nvcc nvcc.exe",130],["NAMES nvcc nvcc.exe",130],["set(CUDA_NVCC_EXECUTABLE \"/usr/local/cuda/bin/nvcc\") # path",85],["NAMES nvcc",67],["# commands and targets to invoke the nvcc compiler to generate C or PTX source",67]],"useCount":2945},{"word":"nvcc_host_compiler_flags","context":[["if (nvcc_host_compiler_flags)",198],["set(nvcc_host_compiler_flags \"\")",198],["set(nvcc_host_compiler_flags \"${nvcc_host_compiler_flags},\\\"${flag}\\\"\")",197],["set(nvcc_host_compiler_flags \"${nvcc_host_compiler_flags},\\\"${flag}\\\"\")",197],["set(nvcc_host_compiler_flags \"-Xcompiler\" ${nvcc_host_compiler_flags})",198],["#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")",198],["set(nvcc_host_compiler_flags \"-Xcompiler\" ${nvcc_host_compiler_flags})",198],["#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")",198],["${nvcc_host_compiler_flags}",593]],"useCount":2175},{"word":"o","context":[["# detect if need link crtbegin_so.o explicitly",104],["set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",391],["set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",345],["${format_flag} -o \"${generated_file}\"",198],["-o \"${generated_cubin_file}\"",198],["-o \"${NVCC_generated_dependency_file}\"",197],["set( CMAKE_CXX_CREATE_SHARED_MODULE  \"${CMAKE_CXX_CREATE_SHARED_MODULE} \\\"${ANDROID_SYSROOT}/usr/lib/crtbegin_so.o\\\"\" )",112],["string( REPLACE \"<OBJECTS>\" \"\\\"${ANDROID_SYSROOT}/usr/lib/crtbegin_so.o\\\"\" __cmd \"${__cmd}\" )",104],["set(CXXOUT \"-o \")",102],["SET(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",101]],"useCount":4817},{"word":"obj","context":[["set(lib_objs ${lib_objs} ${library}.dir/${CMAKE_CFG_INTDIR}/*.obj)",32],["set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",391],["set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",345],["SET(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)",101],["SET(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)",77],["# Setup properties for obj files:",65],["set(\"${var_obj}\" \"${obj}\" PARENT_SCOPE)",51],["set(lib_objs ${lib_objs} ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${library}.dir/${path}/${name}.obj)",35],["OUTPUT ${obj}",27],["#    set(lib_objs ${lib_objs} ${library}.dir/${CMAKE_CFG_INTDIR}/${name}.obj)",32]],"useCount":2093},{"word":"object","context":[["* @param yyscanner The scanner object.",209],["#---create a list of all the object files-----------------------------",35],["EXTERNAL_OBJECT true # This is an object file not to be compiled, but only be linked.",66],["#Enable extended object support for debug compiles on X64 (not required on X86)",74],["set(cuda_build_comment_string \"Building NVCC (${cuda_build_type}) object ${generated_file_relative_path}\")",64],["message(STATUS \"MSVC: Enabled extended object-support for debug-compiles\")",61],["# Try compiling to an object file only.",51],["# compile a C++ file into an object file",47],["#     cuda file to Visual Studio it knows that this file produces an object file",34],["# Create a static archive incrementally for large object file counts.",44]],"useCount":2422},{"word":"of","context":[["# The set of files for implicit dependencies of each language:",10677],["# The set of files for implicit dependencies of each language:",10677],["# The set of languages for which implicit dependencies are needed:",10677],["# (To distribute this file outside of CMake, substitute the full",3976],["# Byproducts of CMake generate step:",1365],["# Pairs of files generated by the same build rule.",683],["# 3. Neither the name of the Corporation nor the names of the",636],["# 3. Neither the name of the Corporation nor the names of the",636],["# create dummy targets for exported code generation targets to make life of users easier",605],["#   This file is part of ccFOAM.",794]],"useCount":138035},{"word":"off","context":[["# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake",83],["# The QUIET tag can be used to turn on/off the messages that are generated",63],["# or super classes. Setting the tag to NO turns the diagrams off. Note that",59],["# Need to set these based off of the cached value",54],["#     [~] turn off SWIG search if it is not found first time",66],["# The WARNINGS tag can be used to turn on/off the warning messages that are",84],["# 3. Set compiler flags to turn off optimization and enable coverage:",84],["# Strip off the trailing \"/include\" in the path.",108],["## split off the link dirs (for rpath)",50],["# split off the link dirs (for rpath)",53]],"useCount":2562},{"word":"old","context":[["# description. Set this tag to YES if you prefer the old behaviour instead.",62],["# old location ( pre r8c )",102],["# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree",99],["# State that we found a version of Boost that is too new or too old.",90],["entry initialized from old variable name\")",89],["initialized from old variable name\")",89],["#   # The new version of the sdk shows up in common/lib, but the old one is in lib",56],["# and old paths.",53],["# (lib/Win32) and the old path (lib).",53],["set(_Boost_VERSION_AGE \"old\")",178]],"useCount":2305},{"word":"on","context":[["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["# this module will try to find on your behalf.) Also for OS X, this",226],["# module will automatically add the -framework Cocoa on your behalf.",226],["# acting on its behalf a paid-up, nonexclusive, irrevocable worldwide",397],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["# others acting on its behalf a paid-up, nonexclusive, irrevocable",397],["if(fail-on-missing)",1228],["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["# work by or on behalf of the U.S. Government.  Export of this program",397],["# NOTE: Singular variables for this library, plural for libraries this this lib depends on.",311]],"useCount":31972},{"word":"once","context":[["# Do the final processing once the paths have been detected.",62],["#pragma once",60],["# dependent upon the format parameter.  The compiler is invoked once with -M",56],["# simple dependencies must only be find_package()-ed once",605],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# Make sure this file is included only once by creating globally unique varibles",139],["# Make sure this file is included only once",90],["# So if a user specifies the same cuda file as input more than once, you",66],["# compute an overall version number which can be compared at once",80],["# Helper to add the include directory for CUDA only once",66]],"useCount":2105},{"word":"one","context":[["#                               RelWithDebInfo, but it should match one of the",198],["/* Define to the one symbol short name of this package. */",179],["# this one is important",304],["# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or",198],["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["message( FATAL_ERROR \"No one of known Android ABIs is supported by this cmake toolchain.\" )",136],["## appear to stay constant in one of these files.",143],["# this one not so much",157],["# \"real\" variable in one-shot.",237],["# (Actually on second look, I think it only needs one of the m* libraries.)",229]],"useCount":9719},{"word":"only","context":[["#      Can be set as environment variable. Can be set only at first cmake run.",205],["# simple dependencies must only be find_package()-ed once",605],["# (Actually on second look, I think it only needs one of the m* libraries.)",229],["set( ANDROID_NDK_HOST_SYSTEM_NAME ${ANDROID_NDK_HOST_SYSTEM_NAME2} ) # only 32-bit at the moment",203],["# only applications need main().",187],["# if only the debug version was found, set the release variable also to the debug version",165],["# update the list -- these are only system libraries, no need to find them",138],["# Make sure this file is included only once by creating globally unique varibles",139],["# only search for libraries and includes in the ndk toolchain",140],["# if only the release version was found, set the debug variable also to the release version",165]],"useCount":15786},{"word":"openair","context":[["\"/home/einstein/openairinterface5g/openair-cn/S6A\"",240],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair-cn/SECU\"",249],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/UTILS\"",241]],"useCount":6379},{"word":"openair2","context":[["\"/home/einstein/openairinterface5g/openair2/COMMON\"",242],["\"/home/einstein/openairinterface5g/openair2/X2AP\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OPT\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OSA\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OMV\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OTG\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/OMG\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/LISTS\"",240],["\"/home/einstein/openairinterface5g/openair2/UTIL/LFDS/liblfds6.1.1/liblfds611/src\"",240],["\"/home/einstein/openairinterface5g/openair2/LAYER2/RLC\"",240]],"useCount":6722},{"word":"openairinterface5g","context":[["\"/home/einstein/openairinterface5g/common/utils/msc\"",249],["\"/home/einstein/openairinterface5g/openair-cn/COMMON\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/API/NETWORK\"",249],["\"/home/einstein/openairinterface5g/openair-cn/SECU\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/EMM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/UTIL\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/IES\"",251],["\"/home/einstein/openairinterface5g/openair-cn/NAS/COMMON/ESM/MSG\"",249],["\"/home/einstein/openairinterface5g/openair2/COMMON\"",242]],"useCount":16851},{"word":"opencv","context":[["\"/boilermake/opencv-src/opencv/modules/core/include\"",101],["\"/boilermake/opencv-src/opencv/modules/highgui/include\"",101],["\"/usr/local/include/opencv\"",270],["\"/usr/include/opencv\"",150],["\"/boilermake/opencv-src/opencv/modules/ts/include\"",92],["\"/boilermake/opencv-src/opencv/modules/ts/include\"",92],["\"/boilermake/opencv-src/opencv/modules/imgproc/include\"",101],["\"/boilermake/opencv-src/opencv/modules/imgproc/include\"",101],["\"/boilermake/opencv-src/opencv/modules/highgui/include\"",101],["\"/boilermake/opencv-src/opencv/modules/core/include\"",101]],"useCount":2897},{"word":"opm","context":[["\"opm-core REQUIRED\"",13],["opm/core/wells/ProductionSpecification.cpp",12],["opm/core/simulator/initState.hpp",12],["opm/core/transport/reorder/reordersequence.h",12],["opm-core REQUIRED\"",15],["\"opm-common REQUIRED\"",15],["\"opm-material REQUIRED\"",15],["opm-core REQUIRED;",15],["# find opm -name '*.h*' -a ! -name '*-pch.hpp' -printf '\\t%p\\n' | sort",19],["# find opm -name '*.c*' -printf '\\t%p\\n' | sort",19]],"useCount":3093},{"word":"opt","context":[["/opt/include",601],["/opt/csw # Blastwave",760],["/opt/lib",642],["/opt/local # DarwinPorts",775],["/opt/csw",1308],["/opt/local",1525],["/opt/local/include",1602],["/opt",2109],["/opt/local/lib",2139],["/opt/csw/lib",486]],"useCount":37368},{"word":"optimized","context":[["if(\"${library}\" MATCHES \"^(debug|optimized|general)$\")",414],["if(\"${lib}\" MATCHES \"^(debug|optimized|general)$\")",415],["# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value",204],["if(\"${lib}\" MATCHES \"^debug|optimized|general$\")",173],["if(\"${library}\" MATCHES \"^debug|optimized|general$\")",172],["optimized ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})",101],["set(${PREFIX} optimized ${${PREFIX}_REL} debug ${${PREFIX}_DBG})",68],["set(Boost_${basename}_LIBRARY optimized ${Boost_${basename}_LIBRARY_RELEASE} debug ${Boost_${basename}_LIBRARY_DEBUG})",63],["optimized QtCore4.lib",61],["if(optimized)",60]],"useCount":4312},{"word":"option","context":[["Rerun cmake with -DANDROID_GOLD_LINKER=ON option in case of problems.",110],["SET(${prefix}_${option} FALSE)",102],["option(USE_SCRIPTPCH    \"Use precompiled headers when compiling scripts\"              1)",103],["option(WITH_COREDEBUG   \"Include additional debug-code in core\"                       0)",105],["option(WITH_WARNINGS    \"Show all warnings during compile\"                            0)",107],["# or class method. Note that enabling this option will significantly increase",108],["# So this flag option is required for all projects using OpenGL from native.",111],["ENDFOREACH(option)",130],["#      Interface (ABI). This option nearly matches to the APP_ABI variable",135],["FOREACH(option ${option_names})",137]],"useCount":15466},{"word":"optional","context":[["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# Takes optional second argument (is_commandline_app?) in ARGV1",42],["# Using the PROJECT_BRIEF tag one can provide an optional one line description",52],["# Lastly, this class takes an optional 'wrap method' parameter. Valid values are:",58],["# Additionally this script searches for the following optional",61],["# Set optional variables used in the generation of an rtf document.",62],["SET(CPACK_DEBIAN_PACKAGE_PRIORITY \"optional\")",71],["# variables controlling optional build flags",112],["# cuda_execute_process - Executes a command with optional command echo and status message.",198],["# pack a list of libraries with optional build configuration keywords",586]],"useCount":3485},{"word":"options","context":[["# Configuration options related to the dot tool",131],["# Set the options specific to this build case",174],["# Set the rest of the system-specific options and run the dashboard build/test",176],["# Configuration options related to the preprocessor",131],["# Show infomation about the options selected during configuration",130],["# Separate the sources from the options",239],["set(options)",293],["# set target ABI options",129],["# Build related configuration options",127],["# Project related configuration options",125]],"useCount":9588},{"word":"or","context":[["# documentation and/or other materials provided with the distribution.",770],["#       documentation and/or other materials provided with the distribution.",374],["#    and/or other materials provided with the distribution.",340],["#   and/or other materials provided with the distribution.",310],["# work by or on behalf of the U.S. Government.  Export of this program",397],["* The file was deleted, renamed, or moved to another location.",399],["* An install or uninstall procedure did not complete successfully.",399],["#   documentation and/or other materials provided with the distribution.",293],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",518],["# Redistribution and use in source and binary forms, with or without",2447]],"useCount":37342},{"word":"order","context":[["# the reader which header file to include in order to use a class.",59],["# set this tag to YES in order to let doxygen match functions declarations and",58],["# hierarchy of group names into alphabetical order. If set to NO (the default)",54],["# Set up the versions we know about, in the order we will search. Always add",61],["# for completeness.  We need run this loop in order to accomodate the addition",64],["# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the",65],["## We really do want to install in order to limit # of include paths INSTALL_COMMAND \"\"",74],["# declaration order.",122],["#    android-cmake toolchain searches for NDK/toolchain in the following order:",135],["# order to force this file to be run again if it changes.",198]],"useCount":2837},{"word":"org","context":[["ECLIPSE_DOC_ID         = org.doxygen.Project",66],["# The default value is: org.doxygen.Project.",63],["set(CTEST_DROP_SITE \"www.cdash.org\")",59],["# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming",66],["set(CTEST_DROP_SITE \"my.cdash.org\")",138],["# http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6611808",80],["# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",80],["# http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6478684",79],["DOCSET_BUNDLE_ID       = org.doxygen.Project",73],["# For the latest info, see http://www.ogre3d.org/",448]],"useCount":4683},{"word":"other","context":[["#       documentation and/or other materials provided with the distribution.",374],["# Make sure the targets which have been exported in some other",198],["#    documentation and/or other materials provided with the distribution.",268],["#   documentation and/or other materials provided with the distribution.",293],["# documentation and/or other materials provided with the distribution.",770],["#    and/or other materials provided with the distribution.",340],["#     documentation and/or other materials provided with the distribution.",153],["# This file does not depend on other imported targets which have",184],["# and other return variables are present after executing the process.",198],["#   and/or other materials provided with the distribution.",310]],"useCount":9158},{"word":"otherwise","context":[["SET( GLEW_FOUND 0 CACHE STRING \"Set to 1 if GLEW is found, 0 otherwise\")",42],["#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.",72],["SET(OPENSSL_FOUND 0 CACHE STRING \"Set to 1 if openssl is found, 0 otherwise\")",39],["SET(OPENSSL_FOUND 1 CACHE STRING \"Set to 1 if openssl is found, 0 otherwise\")",39],["#    the exit code (in many cases 0 for success), otherwise enter \"FAILED_TO_RUN\".",150],["SET( GLEW_FOUND 1 CACHE STRING \"Set to 1 if GLEW is found, 0 otherwise\")",42],["# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.",52],["# otherwise cause performance problems for the file system.",58],["if available and 'smp' configuration otherwise.\")",69],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136]],"useCount":2022},{"word":"out","context":[["# and *.h) to filter out the source-files in the directories. If left",127],["set(${_var} \"${out}\" PARENT_SCOPE)",198],["# Extra quotes are added around each flag to help nvcc parse out flags with spaces.",197],["# system piece by piece in case you need to opt out of certain components",159],["# Figure out threading library",93],["# Find out which libraries to use.",92],["set(out \"${out}-${res}-NOTFOUND\")",91],["set(out \"${out}-${res}-NOTFOUND\")",91],["git_describe(out --exact-match ${ARGN})",89],["# patterns (like *.h and *.hpp) to filter out the header-files in the",84]],"useCount":5680},{"word":"outfile","context":[["ARGS ${rcc_options} -name ${outfilename} -o ${outfile} ${infile}",77],["add_custom_command(OUTPUT ${outfile}",75],["SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/ui_${outfile}.h)",70],["SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/ui_${outfile}.h)",70],["SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/qrc_${outfilename}.cxx)",69],["QT4_MAKE_OUTPUT_FILE(${it} moc_ cpp outfile)",66],["ADD_CUSTOM_COMMAND(OUTPUT ${outfile}",384],["SET(${outfiles} ${${outfiles}} ${outfile})",293],["GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)",142],["ARGS ${moc_options} ${it} -o ${outfile}",66]],"useCount":3078},{"word":"output","context":[["# file checks the output of each command and if the command fails it deletes the",198],["# Fortran module output directory.",622],["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["\"the following output:\\n${OUTPUT}\\n\\n\")",188],["# This causes the installers to properly locate the output libraries",149],["LOG_BUILD     0  # Wrap build in script to to ignore log output from dashboards",140],["LOG_CONFIGURE 0  # Wrap configure in script to ignore log output from dashboards",140],["# output files.",198],["# This file runs the nvcc commands to produce the desired output file along with",198],["# Copy the results to the output variables.",300]],"useCount":18265},{"word":"output_dir","context":[["LATEX_ADD_CONVERT_COMMAND(${output_dir}/${output_file}",55],["ARGS -E copy ${input_dir}/${input_file} ${output_dir}/${input_file}",38],["${output_dir}/${file}",37],["COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}",736],["${CMAKE_COMMAND} -E chdir ${output_dir}",158],["LATEX_GET_OUTPUT_PATH(output_dir)",155],["ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${file}",60],["DEPENDS ${output_dir}/${LATEX_TARGET}.pdf)",55],["-D \"LATEX_BINARY_DIRECTORY=${output_dir}\"",50],["DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)",88]],"useCount":2903},{"word":"outside","context":[["# stack keeps track of inside/outside project status of processed header files",38],["# (To distribute this file outside of this repository, substitute the full",30],["# header is inside, but could be become outside if there is a shorter outside match",38],["# header is inside, but could be become outside if there is a shorter outside match",38],["# header is a candidate if it is outside project",38],["# header is outside",38],["# get parent header file's inside/outside status",38],["# which point to directories outside the build tree to the install RPATH",79],["# (To distributed this file outside of CMake, substitute the full",586],["# (To distribute this file outside of CMake, substitute the full",3976]],"useCount":5179},{"word":"over","context":[["# explicitly to a value larger than 0 to get control over the balance",36],["# control over your own system piece by piece in case you need to opt",38],["# format and will distribute the generated files over these directories.",58],["# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake",65],["# Iterate over the macro arguments and create custom",68],["# Remove any output file left over from previous test run",131],["# Loop over all imported files and verify that they actually exist",181],["# On OSX, this will prefer the Framework version (if found) over others.",292],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# modules won't do it for you. This is to allow you control over your own",159]],"useCount":2286},{"word":"package","context":[["/* Define to the full name and version of this package. */",193],["/* Define to the address where bug reports for this package should be sent. */",187],["/* Define to the version of this package. */",191],["/* Define to the full name of this package. */",192],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198],["# In fact, there seems to be a problem if I used the Threads package",238],["# But for non-OSX systems, I will use the CMake Threads package.",239],["* The installation package was faulty and contained",399],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# warn when using a deprecated package",605]],"useCount":9571},{"word":"packages","context":[["#   A list of vala packages/libraries to be used during the compile cycle. The",41],["${CMAKE_INSTALL_PREFIX}/lib/python${pyversion}/dist-packages)",36],["# for ubuntu's libblas3gf and liblapack3gf packages",44],["#---Check for installed packages depending on the build options/components eamnbled -",45],["# Java. For instance, namespaces will be presented as packages, qualified",55],["# packages that should be included in the LaTeX output.",63],["#         packages/programs on the host system",63],["message(FATAL_ERROR \"Cannot find libuuid. Try installing uuid-dev or the appropriate packages for your platform\")",65],["# macro to find packages on the host OS",144],["set(_state \"packages\")",243]],"useCount":2333},{"word":"page","context":[["# each generated HTML page. If it is left blank doxygen will generate a",126],["#  See home page: https://github.com/taka-no-me/android-cmake",108],["# configuration options related to the man page output",106],["/* Define to the home page for this package. */",67],["# contain links (just like the HTML output) instead of page references",63],["# contain links (just like the HTML output) instead of page references.",63],["# style sheet that is used by each HTML page. It can be used to",63],["# each generated HTML page (for example: .htm,.php,.asp). If it is left blank",62],["# only source the real man page, but without them the man command",62],["# documented in the real man page(s). These additional files",62]],"useCount":2219},{"word":"parameter","context":[["# Set the return parameter",66],["# Optional fourth parameter is passed as arguments to _testrunner",179],["#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter",135],["#      ANDROID_NDK - cmake parameter",133],["# if function is found, sets output parameter result to the name of the library",92],["message(STATUS \"MSVC: 64-bit platform, enforced -D_WIN64 parameter\")",80],["# wrong or incomplete parameter documentation, but not about the absence of",59],["# Lastly, this class takes an optional 'wrap method' parameter. Valid values are:",58],["# dependent upon the format parameter.  The compiler is invoked once with -M",56],["-Wno-unused-parameter",43]],"useCount":2024},{"word":"part","context":[["# This is part of the Findosg* suite used to find OpenSceneGraph components.",153],["# This file is part of Hypertable.",115],["# This file is part of WeeChat, the extensible chat client.",99],["# as part of the returned SDL2_LIBRARY variable.",155],["#   This file is part of FreeFOAM.",392],["# This file is part of the CMake build system for OGRE",449],["## This file is part of the deal.II library.",474],["#   This file is part of ccFOAM.",794],["This file is part of Magnum.",96],["# _component The part of PCL that this library belongs to.",88]],"useCount":5560},{"word":"passed","context":[["# generated_cubin_file:STRING=<> File to generate.  This argument must be passed",198],["# Optional fourth parameter is passed as arguments to _testrunner",179],["\"passed with the following output:\\n\"",108],["# This needs to be passed in at this stage, because VS needs to fill out the",66],["# generated_file_path in them get passed in through as a command line",65],["# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no",62],["# are normally passed to the compiler using the -I flag.",59],["# check if all passed variables are valid",51],["# passed to find_package.",43],["# generated_file:STRING=<> File to generate.  This argument must be passed in.",198]],"useCount":2771},{"word":"patch","context":[["#  NUMPY_VERSION_PATCH       - the patch version number of NumPy",40],["# For Xcode, cmake needs my patch to process",48],["# Once anyone knows how OpenSSL would call the patch versions beyond 'z'",51],["# the string. The patch field translates to the single character suffix that",52],["# The version number is encoded as 0xMNNFFPPS: major minor fix patch status",52],["# dios_module_add_directory_md5(${MODULE} patch)",52],["# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:",57],["# the patch level dropped.",81],["#   CPACK_PACKAGE_VERSION_PATCH         - Package project version (patch)",92],["# level, even when the patch level is non-zero.",82]],"useCount":2225},{"word":"path","context":[["# Relative path conversion top directories.",2231],["message(WARNING \"ABSOLUTE path INSTALL DESTINATION : ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["message(FATAL_ERROR \"ABSOLUTE path INSTALL DESTINATION forbidden (by caller): ${CMAKE_ABSOLUTE_DESTINATION_FILES}\")",1652],["PATHS ${path}",605],["set(lib_path ${path})",605],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321],["#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..",206],["# Get path, convert backslashes as ${ENV_${var}}",204],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["# since the path where the library is found is returned we have to iterate over the paths manually",605]],"useCount":31585},{"word":"paths","context":[["# Use pkg-config to get hints about paths",321],["# construct search paths",187],["# Search default search paths, after we search our own set of paths.",196],["# Search default search paths, after we search our own set of paths.",196],["# CMAKE_INCLUDE_PATH to modify the search paths.",292],["# additional Unix paths (FreeBSD, etc).",436],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# The C and CXX include file search paths:",935],["# Force unix paths in dependencies.",2233],["# The include file search paths:",7746]],"useCount":20121},{"word":"pcl","context":[["\"/usr/include/pcl-1.7\"",136],["\"/home/chen/pcl-pcl-1.7.2/build/io/CMakeFiles/pcl_io.dir/DependInfo.cmake\"",97],["\"/home/chen/pcl-pcl-1.7.2/build/io/CMakeFiles/pcl_io.dir/DependInfo.cmake\"",97],["\"/home/chen/pcl-pcl-1.7.2/build/io/CMakeFiles/pcl_io_ply.dir/DependInfo.cmake\"",102],["\"/home/chen/pcl-pcl-1.7.2/build/io/CMakeFiles/pcl_io_ply.dir/DependInfo.cmake\"",102],["OLD_RPATH \"/home/chen/pcl-pcl-1.7.2/build/lib:\"",107],["OLD_RPATH \"/home/chen/pcl-pcl-1.7.2/build/lib:\"",107],["\"/home/chen/pcl-pcl-1.7.2/build/common/CMakeFiles/pcl_common.dir/DependInfo.cmake\"",108],["\"/home/chen/pcl-pcl-1.7.2/build/common/CMakeFiles/pcl_common.dir/DependInfo.cmake\"",108],["\"../recognition/include/pcl/recognition/3rdparty\"",118]],"useCount":2036},{"word":"pkg","context":[["# Try to get some hints from pkg-config, if available",66],["# generated from genmsg/cmake/pkg-msg-paths.cmake.em",57],["\"/opt/ros/indigo/share/catkin/cmake/em/pkg.pc.em\"",61],["# try to locate Ogre via pkg-config",59],["# generated from genmsg/cmake/pkg-genmsg.cmake.em",86],["# Use pkg-config to get hints about paths",321],["# use pkg-config to get the directories and then use these values",582],["# generated from genmsg/cmake/pkg-msg-paths.cmake.develspace.in",57],["# generated from genmsg/cmake/pkg-msg-paths.cmake.installspace.in",67],["\"/opt/ros/indigo/share/catkin/cmake/templates/pkg.context.pc.in\"",61]],"useCount":3437},{"word":"pkgConfig","context":[["# generated from catkin/cmake/template/pkgConfig-version.cmake.in",44],["\"/opt/ros/indigo/share/catkin/cmake/templates/pkgConfig-version.cmake.in\"",61],["# copied from catkin/cmake/list_append_deduplicate.cmake to keep pkgConfig",586],["# copied from catkin/cmake/list_append_unique.cmake to keep pkgConfig",605],["# generated from catkin/cmake/template/pkgConfig.cmake.in",605],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["\"/opt/ros/indigo/share/catkin/cmake/templates/pkgConfig.cmake.in\"",61]],"useCount":3134},{"word":"platform","context":[["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111],["#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform",135],["message( FATAL_ERROR \"No one of available compiler toolchains is able to compile for ${ANDROID_ARCH_NAME} platform.\" )",136],["message( FATAL_ERROR \"Cross-compilation on your platform is not supported by this cmake toolchain\" )",143],["#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform",134],["See https://android.googlesource.com/platform/development.git f907f4f9d4e56ccc8093df6fee54454b8bcab6c2",111],["message( ERROR \"Could not find libsupc++.a for a chosen platform. Either your NDK is not supported or is broken.\")",111],["# need always fallback to older platform",129],["# detect current host platform",129],["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135]],"useCount":7722},{"word":"platforms","context":[["# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms",168],["# Added a search for threads which is needed by some platforms.",247],["# Added a search for SDL2main which is needed by some platforms.",196],["set( ANDROID_SYSROOT \"${ANDROID_NDK}/platforms/android-${ANDROID_NATIVE_API_LEVEL}/arch-${ANDROID_ARCH_NAME}\" )",136],["--- a/ndk/platforms/android-9/arch-x86/include/machine/_types.h",111],["+++ b/ndk/platforms/android-9/arch-x86/include/machine/_types.h",111],["# WITH_PIC options.Not of much use, PIC is taken care of on platforms",92],["# set up output paths for executable binaries (.exe-files, and .dll-files on DLL-capable platforms)",85],["# Unix style platforms",83],["#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.",77]],"useCount":2772},{"word":"plugin","context":[["STRING(TOLOWER ${plugin} target)",45],["plugin.xml",161],["SET(WITH_${plugin} 1)",128],["# strip RenderSystem_ or Plugin_ prefix from plugin name",64],["# look for plugin dirs",61],["# specific to this plugin",50],["foreach(plugin ${qtplugins})",45],["if(EXISTS \"${plugin}\")",44],["# A unique identifier for the eclipse help plugin. When installing the plugin",42],["# A unique identifier for the eclipse help plugin. When installing the plugin",42]],"useCount":2956},{"word":"plugins","context":[["MESSAGE(\"Dynamic plugins are disabled.\")",92],["# create plugins.cfg",58],["# header files for plugins are not usually needed, but find them anyway if they are present",61],["# check if dependencies for plugins are met",61],["# find link libraries for plugins",64],["# On Unix, the plugins might have no prefix",64],["# Find Ogre plugins",64],["#       the OGRE plugins are located",116],["${OGRE_BINARY_DIR}/inst/bin/release/plugins.cfg",55],["# plugins",72]],"useCount":3390},{"word":"point","context":[["# will point to the HTML generated by the htags(1) tool instead of doxygen",58],["# Commands beyond this point should not need to know the version.",559],["# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.",160],["#            sets NEON as floating-point unit",134],["# which point to directories outside the build tree to the install RPATH",79],["#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)",72],["message(FATAL_ERROR \"There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.\")",65],["#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).",62],["# the environment variable OGRE_HOME to point to the path where the",59],["message(STATUS \"Monalisa not found. Set variable MONALISA_DIR to point to your Monalisa installation\")",44]],"useCount":2668},{"word":"possible","context":[["The possible values are:",226],["# verbose:BOOL=<>          OFF: Be as quiet as possible (default)",200],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["#      toolchain to be used. The list of possible values depends on the NDK",108],["#      version. For NDK r10c the possible values are:",69],["# the list of possible encodings.",52],["# Note that it's not possible to compile PowerPC applications if you are using",51],["# Set the possible values of build type for cmake-gui",44],["#      version. For NDK r8c the possible values are:",38]],"useCount":2357},{"word":"precompiled","context":[["# make source files depend on precompiled header",44],["option(USE_COREPCH      \"Use precompiled headers when compiling servers\"              1)",102],["# note: ccache requires the -include flag to be used in order to process precompiled header correctly",48],["#Fallback to the \"old\" precompiled suppport",48],["# precompiled is specified at the target level",49],["# /Fp specify a path or file name for precompiled header files",68],["# -pch-dir location for precompiled header files",68],["option(USE_SCRIPTPCH    \"Use precompiled headers when compiling scripts\"              1)",103],["# no precompiled header, force inclusion of prefix header",91],["# /Fp specifies precompiled header binary file name",76]],"useCount":2100},{"word":"prefix","context":[["# Compute the installation prefix relative to this file.",181],["# Set the install prefix",8083],["SET(${prefix}_${current_arg_name} ${current_arg_list})",255],["# I need to prefix each file and directory with the correct path",122],["# redo search if prefix path changed",181],["# correspond to the ./configure --prefix=$SDLDIR",175],["# correspond to the ./configure --prefix=$SDL2DIR",157],["# correspond to the ./configure --prefix=$OSGDIR",153],["prefix=@CMAKE_INSTALL_PREFIX@",146],["SET(${prefix}_${arg_name})",127]],"useCount":21196},{"word":"program","context":[["# provided by doxygen. Whatever the program writes to standard output",58],["# input file. Doxygen will then use the output that the filter program writes",66],["/* Define if the neat program is available */",68],["# work by or on behalf of the U.S. Government.  Export of this program",397],["# Test program returns 0 (down) or 1 (up).",92],["# The INPUT_FILTER tag can be used to specify a program that doxygen should",87],["# invoke to filter for each input file. Doxygen will invoke the filter program",87],["# The FILE_VERSION_FILTER tag can be used to specify a program or script that",80],["# We have to actually try running the test program, because of a bug",79],["# the version control system). Doxygen will invoke the program by executing (via",75]],"useCount":3566},{"word":"proj","context":[["set(${proj}_DEPENDENCIES \"\")",142],["set(${proj}_CMAKE_OPTIONS",138],["ProjectDependancyPush(CACHED_proj ${proj})",143],["## is important make the extProjName and proj variables",143],["SlicerMacroEmptyExternalProject(${proj} \"${${proj}_DEPENDENCIES}\")",162],["SlicerMacroEmptyExternalProject(${proj} \"${${proj}_DEPENDENCIES}\")",162],["SlicerMacroCheckExternalProjectDependency(${proj})",192],["${${proj}_DEPENDENCIES}",212],["BINARY_DIR ${proj}-build",267],["ExternalProject_Add(${proj}",575]],"useCount":6876},{"word":"project","context":[["## This file should be placed in the root directory of your project.",230],["## project to incorporate the testing dashboard.",231],["# should be set in the CMake list file of the project before CPack module is",370],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# been exported from the same project but in a separate export set.",184],["# The project is provided using ${extProjName}_DIR, nevertheless since other",148],["# Don't forget to include SDLmain.h and SDLmain.m your project for the",144],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# Set CMake OSX variable to pass down the external project",209]],"useCount":11634},{"word":"projects","context":[["# Add the Doxyfile.in and UseDoxygen.cmake files to the projects source directory.",51],["#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake",51],["# Push the list to the parent scope for projects to reference",55],["# Include dependent projects if any",227],["## and cmake variables are global, so when including sub projects it",143],["# So this flag option is required for all projects using OpenGL from native.",111],["#   CPACK_CMAKE_GENERATOR               - CMake Generator used for the projects",92],["# Compute -G arg for configuring external projects with the same CMake generator:",71],["# for VS projects we won't know if we are making a debug or release build",65],["# any makefiles or projects.",64]],"useCount":2260},{"word":"property","context":[["\"The property can be set to a list of directories.\"",92],["<property",90],["# Get the list of definitions from the directory property",65],["# This little macro lets you set any XCode specific property",64],["\"If not set, this property is initialized to the empty list.\"",54],["\"See target property COTIRE_ADD_UNITY_BUILD.\"",38],["BRIEF_DOCS \"Read-only property. Mark this source file as cotired for the given target.\"",38],["\"If this property is set to TRUE, cotire will complete the current unity file and start a new one.\"",38],["\"cotire sets this property to the full path of the generated <LANG> language precompiled header binary for the target.\"",38],["\"See target property COTIRE_ADD_CLEAN.\"",38]],"useCount":2475},{"word":"provided","context":[["#    the documentation and/or other materials provided with the",74],["#       documentation and/or other materials provided with the distribution.",374],["#    and/or other materials provided with the distribution.",340],["#   and/or other materials provided with the distribution.",310],["#   documentation and/or other materials provided with the distribution.",293],["#    documentation and/or other materials provided with the distribution.",268],["#     documentation and/or other materials provided with the distribution.",153],["# The project is provided using ${extProjName}_DIR, nevertheless since other",148],["#     and/or other materials provided with the distribution.",120],["# documentation and/or other materials provided with the distribution.",770]],"useCount":4916},{"word":"pthread","context":[["/* Define to 1 if you have the <pthread.h> header file. */",57],["SET(MY_ATOMIC_MODE_RWLOCK 1 CACHE BOOL \"Use pthread rwlocks for atomic ops\")",62],["\"Implement atomic operations using pthread rwlocks or atomic CPU",62],["SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} pthread)",69],["# Need explicit pthread for gcc -fsanitize=address",69],["set(SFML_SYSTEM_DEPENDENCIES \"pthread\")",69],["/* Define to 1 if you have the `pthread' library (-lpthread). */",69],["pthread",189],["set(CMAKE_REQUIRED_LIBRARIES pthread)",192],["#include <pthread.h>",614]],"useCount":3448},{"word":"public","context":[["\"/opt/ros/groovy/share/ros/core/rosbuild/public.cmake\"",41],["public const string GETTEXT_PACKAGE = \"@GETTEXT_PACKAGE@\";",37],["# The contents of this file are placed in the public domain. Feel",495],["# distribute copies to the public, perform publicly and display",397],["# @public",96],["public:",83],["# unsets all public (designed to be used externally) variables and reports",66],["# the same type (for instance a group of public functions) to be put as a",62],["# Doxygen will parse them like normal C++ but will assume all classes use public",55],["#-- Clear the public variables",46]],"useCount":2267},{"word":"put","context":[["# Generate the cmake readable dependency file to a temp file.  Don't put the",198],["or put the toolchain or NDK in the default path:",137],["#       - put each source file in YOUR_SRCS including a *relative* path",122],["# put flags to cache (for debug purpose only)",109],["# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of",105],["# put in front of it. If left blank `man' will be used as the default path.",63],["# put in front of it. If left blank `html' will be used as the default path.",70],["# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.",70],["# Where to put the generated output.",64],["# put in front of it. If left blank `rtf' will be used as the default path.",63]],"useCount":2984},{"word":"py","context":[["\"/opt/ros/indigo/share/catkin/cmake/templates/_setup_util.py.in\"",88],["\"/usr/local/_setup_util.py\")",110],["\"catkin_generated/installspace/_setup_util.py\"",110],["\"catkin_generated/generate_cached_setup.py\"",92],["\"/opt/ros/indigo/share/catkin/cmake/interrogate_setup_dot_py.py\"",88],["\"/opt/ros/indigo/share/catkin/cmake/templates/generate_cached_setup.py.in\"",88],["#   generate_sugar_files.py",60],["BUILD_COMMAND       ${PYTHON_EXE} setup.py install",53],["__init__.py",52],["${CMAKE_CURRENT_BINARY_DIR}/generate_helper.py",50]],"useCount":3154},{"word":"python","context":[["\"/opt/ros/indigo/share/catkin/cmake/python.cmake\"",88],["set(_Boost_MPI_PYTHON_DEPENDENCIES python mpi serialization)",160],["find_program(_python_path NAME \"python\" PATHS ENV PATH)",132],["include (python)",90],["python${_CURRENT_VERSION}",85],["# - Find python libraries",70],["# PYTHON_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python.",68],["#  y        using special debug build of python",66],["NAMES python${_CURRENT_VERSION_NO_DOTS} python${_CURRENT_VERSION}",64],["NAMES python${_CURRENT_VERSION_NO_DOTS} python${_CURRENT_VERSION}",64]],"useCount":4414},{"word":"qt4","context":[["\"/usr/share/qt4/mkspecs/default\"",186],["\"/usr/include/qt4\"",1026],["\"/usr/include/qt4/QtCore\"",1025],["\"/usr/include/qt4/QtGui\"",1022],["\"/usr/include/qt4/QtOpenGL\"",262],["\"/usr/include/qt4/QtXml\"",234],["\"/usr/include/qt4/QtDBus\"",200],["\"/usr/include/qt4/QtNetwork\"",214],["\"/usr/include/qt4/QtScript\"",212],["\"/usr/include/qt4/QtTest\"",211]],"useCount":7201},{"word":"re","context":[["# If we found boost-cmake, then we're done.  Print out what we found.",62],["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["# Find out what window system we're using",45],["# are NOT re-called (i.e. search for library is not repeated) if these variables",50],["# make sure we're using minimum the required version of git, so the \"dirty-testing\" will work properly",57],["# executing custom command, no need to re-check for dependencies",57],["# re-implements.",59],["# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.",89],["# rule to re-run.",71],["# These functions force a re-configure on each git commit so that you can",93]],"useCount":2376},{"word":"regex","context":[["set(_Boost_IOSTREAMS_DEPENDENCIES regex)",160],["if( __val MATCHES \"${regex}\" )",136],["macro( __LIST_FILTER listvar regex )",136],["\"regex\"",111],["# version with a regex.",93],["if(item MATCHES \"${regex}\")",48],["macro(ocv_list_filterout lst regex)",42],["set(_Boost_MATH_DEPENDENCIES math_c99 math_c99f math_c99l math_tr1 math_tr1f math_tr1l regex random)",40],["# since CMake 2.6 regex matches are stored in special variables CMAKE_MATCH_x, if it didn't match, they are empty",36],["# then the regex will be ignored anyway.",38]],"useCount":2089},{"word":"regular","context":[["# The C and CXX include file regular expressions for this directory.",2244],["# last ditch try -- if nothing works so far, just try running the regular compiler and",40],["# or if we know it matches the regular compiler.",41],["# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)",41],["# use regular expression to match wildcard equivalent \"-L*<endchar>\"",43],["# will behave just like regular Qt-style comments (thus requiring",56],["# comments will behave just like regular Qt-style comments",56],["## use regular expression to match wildcard equivalent \"-L*<endchar>\"",70],["# Assume regular sprintf",81],["# This function attempts to compile with the regular compiler, to see if MPI programs",40]],"useCount":3165},{"word":"related","context":[["# configuration options related to the man page output",106],["# configuration options related to source browsing",107],["# configuration options related to warning and progress messages",109],["# configuration options related to the HTML output",109],["# configuration options related to the input files",109],["# configuration options related to the alphabetical class index",109],["# Project related configuration options",125],["# Build related configuration options",127],["# Configuration options related to the preprocessor",131],["# Configuration options related to the dot tool",131]],"useCount":2929},{"word":"relative","context":[["# On Win32 search relative to the library",65],["# Compute the installation prefix relative to this file.",181],["# If a relative path is entered, it will be relative to the location",63],["# macro used to create the names of output files preserving relative dirs",67],["# ROOT configured for the install with relative paths, so use these",73],["# in /usr/include, therefore also search relative",76],["#  all files are absolute paths or relative to the location of the qrc file",88],["# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of",105],["#       - put each source file in YOUR_SRCS including a *relative* path",122],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321]],"useCount":3206},{"word":"release","context":[["You are strongly recommended to switch to another NDK release.",109],["# then just use the release libraries",207],["# if only the release version was found, set the debug variable also to the release version",165],["# if only the release version was found, set the debug variable also to the release version",165],["# if only the debug version was found, set the release variable also to the debug version",165],["# release and not debug",118],["# debug and not release",118],["# if only one debug/release variant is found, set the other to be equal to the found one",115],["# release library",114],["# are available for both release and debug modes.",98]],"useCount":6660},{"word":"remove","context":[["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"",396],["# append elements to a list and remove existing duplicates from the list",586],["COMMAND ${CMAKE_COMMAND} -E remove ${_outputname}.info ${_outputname}.info.cleaned",66],["# On versions < 1.35, remove the System library from the considered list",80],["# made to remove references to Qt and make this file more generally applicable",109],["# remove cygwin from PATH",129],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${cmake_dependency_file}.tmp\" \"${NVCC_generated_dependency_file}\"",191],["# Note that this will remove all occurances of -G.",191],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["-E remove",252]],"useCount":4779},{"word":"required","context":[["# So this flag option is required for all projects using OpenGL from native.",111],["message( FATAL_ERROR \"The required libstdsupc++.a is missing in your standalone toolchain.",112],["# force ASM compiler (required for CMake < 2.8.5)",130],["\"Python required for building Qt component (qtdeclarative):\\n\"",132],["#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform",134],["# this is *required* to use the following linker flags that routes around",137],["## # The following are required to uses Dart and the Cdash dashboard",188],["message(FATAL_ERROR \"CMake >= 2.6.0 required\")",198],["# This file includes the relevent testing commands required for",1153],["# This file includes the relevant testing commands required for",1214]],"useCount":11539},{"word":"requires","context":[["# This tag requires that the tag HAVE_DOT is set to YES.",557],["# This tag requires that the tag USE_MATHJAX is set to YES.",84],["# This tag requires that the tag GENERATE_RTF is set to YES.",106],["# This tag requires that the tag SEARCHENGINE is set to YES.",126],["# This tag requires that the tag GENERATE_HTMLHELP is set to YES.",126],["# This tag requires that the tag GENERATE_QHP is set to YES.",147],["# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.",147],["message(FATAL_ERROR \"Qt 5 requires at least CMake version 2.8.3\")",215],["# This tag requires that the tag GENERATE_LATEX is set to YES.",316],["# This tag requires that the tag GENERATE_HTML is set to YES.",546]],"useCount":5895},{"word":"res","context":[["set(res \"\")",237],["ans(res)",1838],["assert(NOT res)",214],["return_ref(res)",195],["if(NOT res EQUAL 0)",141],["RESULT_VARIABLE res",131],["if (res)",110],["set(out \"${out}-${res}-NOTFOUND\")",91],["CTEST_TEST(BUILD \"${CTEST_BINARY_DIRECTORY}\" RETURN_VALUE res)",88],["assert(res)",307]],"useCount":4442},{"word":"result","context":[["SET(${result} \"\" PARENT_SCOPE)",92],["list(APPEND result",164],["# if function is found in libc, result will be empty",92],["FUNCTION(MY_SEARCH_LIBS func libs result)",92],["set(${warning_flags} \"${result}\" PARENT_SCOPE)",100],["double result;",106],["RESULT_VARIABLE result",325],["if(result)",202],["set(\"${result_var_name}\" \"${result}\" PARENT_SCOPE)",116],["set(result)",149]],"useCount":7836},{"word":"results","context":[["# Collect inputs and cached results.  Detect changes since the last run.",47],["\"CMakeFiles/test-results\"",48],["\"CMakeFiles/rosbuild_clean-test-results.dir/DependInfo.cmake\"",83],["# Returns the results of git describe on the source tree, and adjusting",91],["# Returns the results of git describe --exact-match on the source tree,",92],["# Report results",93],["\"CMakeFiles/test-results.dir/DependInfo.cmake\"",119],["\"CMakeFiles/test-results-run.dir/DependInfo.cmake\"",119],["# Report the results.",220],["# Copy the results to the output variables.",300]],"useCount":2682},{"word":"return","context":[["#   CUDA_result - return value from running the command",198],["# and other return variables are present after executing the process.",198],["# On return:",219],["return ()",282],["return 1;",550],["# return as a flag string",599],["return -1;",708],["return 0;",4274],["return()",10056],["return(false)",177]],"useCount":22135},{"word":"root","context":[["## Then modify the CMakeLists.txt file in the root directory of your",231],["# from the root by following a path via at most 3 edges will be shown. Nodes",57],["# that lay further from the root node will be omitted. Note that setting this",57],["# We have reached the root directory, we are not in git",81],["# Check the platform selection and setup for developer root",81],["# Set the find root to the iOS developer roots and to user defined paths",82],["# subdirectory from a directory tree whose root is specified with the INPUT tag.",84],["#  bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root        #",89],["#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.",133],["## This file should be placed in the root directory of your project.",230]],"useCount":4244},{"word":"ros","context":[["\"/opt/ros/groovy/include\"",90],["\"/opt/ros/indigo/include\"",416],["\"/opt/ros/indigo/share/catkin/cmake/list_append_unique.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/catkin_package.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/catkin_python_setup.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/test/tests.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/list_insert_in_workspace_order.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/find_program_required.cmake\"",88],["\"/opt/ros/indigo/share/catkin/cmake/templates/setup.sh.in\"",88],["\"/opt/ros/indigo/share/std_msgs/cmake/../msg/Header.msg\"",438]],"useCount":15489},{"word":"rst","context":[["CHANGELOG.rst",11],["#.rst:",2057],["#[=======================================================================[.rst:",38],["#[========================================[.rst:",30],["#.rst",23],["# .rst:",18],["#[[.rst",14],["README.rst",12]],"useCount":2203},{"word":"rules","context":[["# Per-language clean rules from dependency scanning.",11977],["# different rules for the same moc file",83],["# the necessary Makefile rules, Perl scripts and LaTeX code to be able",62],["# neccessary compile rules with CMake.",38],["#     errors.  VS runs the rules for every source file in the target, and a",34],["#     build rules specified by CMAKE and the cuda files are compiled to object",34],["# custom command so that CMake does not propagate build rules to",31],["# set this to true if you don't want to rebuild the object files if the rules have changed,",26],["#      build rules specified by CMAKE and the cuda files are compiled to object",26],["# rules.  Use local data first to prefer real files over content links.",25]],"useCount":12838},{"word":"run","context":[["#      Can be set as environment variable. Can be set only at first cmake run.",205],["# order to force this file to be run again if it changes.",198],["# Once run this will define:",197],["# Set the rest of the system-specific options and run the dashboard build/test",176],["#    indicates whether the executable would have been able to run on its",150],["# Can be set only at the first run:",136],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["# Remove any output file left over from previous test run",131],["# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...",130],["# modify the way the check is run:",223]],"useCount":7923},{"word":"runtime","context":[["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115],["message( FATAL_ERROR \"Unknown runtime: ${ANDROID_STL}\" )",112],["set( ANDROID_STL \"${ANDROID_STL}\" CACHE STRING \"C++ runtime\" )",112],["system         -> Use the default minimal system C++ runtime library.",113],["none           -> Do not configure the runtime.",226],["#      chosen runtime. If disabled, then the user is responsible for settings",111],["gabi++_static  -> Use the GAbi++ runtime as a static library.",111],["#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime",112],["# runtime choice (STL, rtti, exceptions)",112],["#   ANDROID_RTTI : if rtti is enabled by the runtime",112]],"useCount":4435},{"word":"s","context":[["sudo ln -s ~/my-android-toolchain ${ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH}\" )",133],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# collaboration diagrams in a style similar to the OMG's Unified Modeling",80],["# No valid ways available to find/set the revision/hash, so let's force some defaults",85],["# We don't know the Boost version, so assume it's",89],["# 2.4's FindBoost module.",89],["set( CMAKE_ASM_SOURCE_FILE_EXTENSIONS s S asm )",110],["# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.",111],["# instruction, i.e. will overwrite variable values (foreach's _x will survive)",132]],"useCount":13496},{"word":"same","context":[["# So if a user specifies the same cuda file as input more than once, you",66],["# been exported from the same project but in a separate export set.",184],["# Pairs of files generated by the same build rule.",683],["# Compute -G arg for configuring external projects with the same CMake generator:",71],["# searching for the same item do nothing.",70],["# This is often the same, so clean up",73],["# different rules for the same moc file",83],["# Do the same thing for each subdirectory in TWO steps",116],["#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but",132],["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132]],"useCount":6118},{"word":"scanning","context":[["message (STATUS \"Result ${_result} scanning includes of ${_existingSourceFiles}.\")",35],["# - short option scanning",27],["# - long option scanning",27],["# Since this cmake macro is doing the dependency scanning for these files,",21],["*\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position",11],["/* We're scanning a new file or input source.  It's",11],["} /* end of scanning one token */",11],["# Per-language clean rules from dependency scanning.",11977],["# only consider existing source files for scanning",38]],"useCount":12158},{"word":"script","context":[["# Include the install script for each subdirectory.",1672],["# Execute the parser script.",200],["\"Executing the parser script\"",198],["LOG_INSTALL   0  # Wrap install in script to to ignore log output from dashboards",140],["LOG_CONFIGURE 0  # Wrap configure in script to ignore log output from dashboards",140],["LOG_TEST      0  # Wrap test in script to to ignore log output from dashboards",140],["LOG_BUILD     0  # Wrap build in script to to ignore log output from dashboards",140],["# This script defines the following variables:",127],["Usually it happens because of bug in make-standalone-toolchain.sh script from NDK r7, r7b and r7c.",113],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94]],"useCount":7573},{"word":"scripts","context":[["# If using memchecker add tests without using scripts",106],["message(\"* Build with scripts     : Yes (default)\")",107],["option(SCRIPTS          \"Build core with scripts included\"                            1)",85],["# Cache Variables: (probably not for direct use in your scripts)",79],["option(USE_SCRIPTPCH    \"Use precompiled headers when compiling scripts\"              1)",103],["#    Make sure to do the following in your scripts:",135],["message(\"* Build scripts w/PCH    : No\")",113],["message(\"* Build with scripts     : No\")",113],["message(\"* Build scripts w/PCH    : Yes (default)\")",113],["# set these global flags for cmake client scripts to change behavior",130]],"useCount":2667},{"word":"sdk","context":[["elseif(\"${sdk}\" STREQUAL \"TVOS\" OR \"${sdk}\" STREQUAL \"TVOS_SIMULATOR\")",90],["elseif(\"${sdk}\" STREQUAL \"TVOS\" OR \"${sdk}\" STREQUAL \"TVOS_SIMULATOR\")",90],["if(\"${sdk}\" STREQUAL \"OSX\")",120],["foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})",90],["set(VARIANT_SUFFIX \"-${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch}\")",90],["elseif(\"${sdk}\" STREQUAL \"IOS\" OR \"${sdk}\" STREQUAL \"IOS_SIMULATOR\")",90],["elseif(\"${sdk}\" STREQUAL \"IOS\" OR \"${sdk}\" STREQUAL \"IOS_SIMULATOR\")",90],["elseif(\"${sdk}\" STREQUAL \"WATCHOS\" OR \"${sdk}\" STREQUAL \"WATCHOS_SIMULATOR\")",80],["elseif(\"${sdk}\" STREQUAL \"WATCHOS\" OR \"${sdk}\" STREQUAL \"WATCHOS_SIMULATOR\")",80],["SDK ${sdk}",72]],"useCount":2611},{"word":"search","context":[["# search headers and libraries in the target environment, search",351],["# search headers and libraries in the target environment, search",351],["# Search default search paths, after we search our own set of paths.",196],["# search for programs in the build host directories",214],["# and providing a more controlled/consistent search behavior.",244],["# Added a search for threads which is needed by some platforms.",247],["# CMAKE_INCLUDE_PATH to modify the search paths.",292],["# The include file search paths:",7746],["# The C and CXX include file search paths:",935],["# as a fall back for non-catkin libraries try to search globally",605]],"useCount":20084},{"word":"see","context":[["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["# see if we have path to Android NDK",126],["#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.",534],["# For the latest info, see http://www.ogre3d.org/",448],["# see documentation at top",221],["# reasons because not all systems place things in SDL2/ (see FreeBSD).",199],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["# see if we have path to Android standalone toolchain",126],["# Qt Help Project output. For more information please see",100],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203]],"useCount":8632},{"word":"self","context":[["-Winit-self",34],["set(WARNING_FLAGS \"-W -Wall -Wextra -Winit-self -Winvalid-pch -Wfatal-errors\")",34],["# - Find HDF5, a library for reading and writing self describing array data.",23],["set(WARNING_FLAGS \"-W -Wall -Wextra -Winit-self -Wfatal-errors\")",19],["if(self.with_trace):",18],["-Wsign-compare -Wunused -Wno-unused-parameter -Wuninitialized -Winit-self",18],["# Find HDF5, a library for reading and writing self describing array data.",17],["\"Flags for the shared lib self-packer.\")",16],["\"Flags for the executable self-packer.\")",16],["# self contained",2363]],"useCount":2617},{"word":"set","context":[["# The set of files for implicit dependencies of each language:",10677],["# The set of languages for which implicit dependencies are needed:",10677],["set(CMAKE_DEPENDS_LANGUAGES",2756],["set(CMAKE_ASM_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725],["set(CMAKE_C_TARGET_INCLUDE_PATH",2057],["set(CMAKE_DEPENDS_CHECK_CXX",2244],["set(CMAKE_INSTALL_COMPONENT)",2385],["set(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")",2385],["set(CMAKE_TARGET_LINKED_INFO_FILES",2756],["set(CMAKE_Fortran_TARGET_INCLUDE_PATH ${CMAKE_C_TARGET_INCLUDE_PATH})",1725]],"useCount":477438},{"word":"set_property","context":[["set_property(TARGET Magnum::${_component} APPEND PROPERTY",89],["set_property(GLOBAL PROPERTY USE_FOLDERS ON)",83],["set_property (SOURCE ${_sourceFiles} APPEND PROPERTY OBJECT_DEPENDS \"${_pchFile}\")",76],["set_property(TARGET ${name} APPEND_STRING PROPERTY",101],["set_property(DIRECTORY APPEND PROPERTY",118],["set_property( CACHE ANDROID_NATIVE_API_LEVEL PROPERTY STRINGS ${ANDROID_SUPPORTED_NATIVE_API_LEVELS} )",128],["set_property(TARGET ${target_name} APPEND_STRING PROPERTY",145],["set_property(TARGET Qt5::${Plugin} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${Configuration})",214],["set_property(",218],["set_property (SOURCE ${_sourceFiles} APPEND_STRING PROPERTY COMPILE_FLAGS \" ${_flags} \")",106]],"useCount":8404},{"word":"set_target_properties","context":[["set_target_properties(",414],["set_target_properties(${_name} PROPERTIES LINK_FLAGS -Wl,--as-needed)",85],["set_target_properties(\"${target}\"",88],["set_target_properties(${name} PROPERTIES",106],["set_target_properties(${cuda_target}",130],["set_target_properties(${target} PROPERTIES",207],["set_target_properties(Qt5::${Plugin} PROPERTIES",214],["set_target_properties(${name}",281],["set_target_properties(opencv_stitching PROPERTIES",84],["set_target_properties(opencv_videostab PROPERTIES",84]],"useCount":8997},{"word":"sets","context":[["#            sets NEON as floating-point unit",134],["# It sets the following variables:",134],["# the library is. This code sets the following variables:",113],["# This sets the following variables:",159],["#    Also be aware that toolchain also sets configuration-specific compiler",111],["# if function is found, sets output parameter result to the name of the library",92],["# code sets the following variables:",85],["/* Character sets and collations */",76],["# This module sets the following variables:",166],["# This code sets the following variables:",169]],"useCount":3188},{"word":"setting","context":[["# Returns the guess by setting the variable pointed to by _ret",53],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# Same for structs, setting HAVE_STRUCT_<name> instead",92],["# setting a simple type. If this is not the case, or you want to show the",51],["#  A convenience macro for setting xcode specific properties on targets",65],["# way by setting EXPAND_ONLY_PREDEF to YES.",63],["# command in the documentation regardless of this setting.",62],["# If we are setting up code for a shared library, then we need to add extra flags for",61],["# that lay further from the root node will be omitted. Note that setting this",57],["# # to get these confused, so we are setting the name based on the word size of",57]],"useCount":2981},{"word":"settings","context":[["#       configuration/system dependent settings",45],["include(${CMAKE_SOURCE_DIR}/cmake/compiler/gcc/settings.cmake)",55],["# settings.",55],["#The following deprecated settings are for backwards compatibility with CMake1.4",57],["# determine configuration settings",63],["# inherit settings in recursive loads",71],["# This file describes the settings to be used by the documentation system",81],["# Standard settings",94],["#      chosen runtime. If disabled, then the user is responsible for settings",111],["# export toolchain settings for the try_compile() command",136]],"useCount":2944},{"word":"setup","context":[["# setup paths and STL for standalone toolchain",112],["\"catkin_generated/installspace/setup.sh\"",92],["\"catkin_generated/installspace/setup.bash\"",92],["\"/usr/local/setup.sh\")",110],["\"/usr/local/setup.zsh\")",110],["\"/usr/local/setup.bash\")",110],["# setup paths and STL for NDK",112],["# setup the cross-compiler",113],["# setup output directories",129],["\"catkin_generated/installspace/setup.zsh\"",92]],"useCount":3661},{"word":"sh","context":[["\"catkin_generated/installspace/setup.sh\"",92],["COMMAND sh \"${wxWidgets_CONFIG_EXECUTABLE}\"",126],["Usually it happens because of bug in make-standalone-toolchain.sh script from NDK r7, r7b and r7c.",113],["\"/usr/local/setup.sh\")",110],["\"/usr/local/env.sh\")",110],["\"catkin_generated/installspace/env.sh\"",92],["\"catkin_generated/env_cached.sh\"",92],["#!/bin/sh",91],["\"/opt/ros/indigo/share/catkin/cmake/templates/env.sh.in\"",88],["\"/opt/ros/indigo/share/catkin/cmake/templates/setup.sh.in\"",88]],"useCount":2259},{"word":"share","context":[["\"/usr/share/cmake-2.8/Modules/CMakeParseArguments.cmake\"",475],["\"/usr/share/cmake-2.8/Modules/FindPackageHandleStandardArgs.cmake\"",479],["\"/usr/share/cmake-2.8/Modules/FindPackageMessage.cmake\"",485],["\"/usr/share/cmake-2.8/Modules/CMakeCXXInformation.cmake\"",712],["\"/usr/share/cmake-2.8/Modules/CMakeCInformation.cmake\"",736],["\"/usr/share/cmake-2.8/Modules/Platform/Linux.cmake\"",740],["\"/usr/share/cmake-2.8/Modules/CMakeCommonLanguageInclude.cmake\"",741],["\"/usr/share/cmake-2.8/Modules/CMakeSystemSpecificInformation.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/CMakeGenericSystem.cmake\"",742],["\"/usr/share/cmake-2.8/Modules/Platform/UnixPaths.cmake\"",742]],"useCount":43778},{"word":"shared","context":[["\"/home/einstein/openairinterface5g/openair-cn/GTPV2-C/nwgtpv2c-0.11/shared\"",240],["set( CMAKE_SHARED_LINKER_FLAGS \"\"                        CACHE STRING \"shared linker flags\" )",110],["#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared",111],["if( ANDROID_STL MATCHES \"shared\" AND DEFINED __libstl )",111],["# case of shared STL linkage",112],["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115],["# This module is shared by multiple languages; use include blocker.",148],["\"/home/einstein/openairinterface5g/openair-cn/GTPV1-U/nw-gtpv1u/shared\"",240],["stlport_shared -> Use the STLport runtime as a shared library.",111],["gabi++_shared  -> Use the GAbi++ runtime as a shared library.",111]],"useCount":6971},{"word":"should","context":[["# Commands beyond this point should not need to know the version.",559],["# should be set in the CMake list file of the project before CPack module is",370],["## This file should be placed in the root directory of your project.",230],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["#                               RelWithDebInfo, but it should match one of the",198],["# This is the list of host compilation flags.  It C or CXX should already have",198],["/* Define to the address where bug reports for this package should be sent. */",187],["# We should call this function again since hunter_add_package is include-like",132],["You should either set an environment variable:",138],["# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows",163]],"useCount":13119},{"word":"since","context":[["# The project is provided using ${extProjName}_DIR, nevertheless since other",148],["# verify that message/service dependencies have not changed since configure",56],["# since the program itself never needs to be run (only the compiler/preprocessor)",56],["# will be treated as invalid architectures since they are no longer supported by Apple",56],["# makes dot run faster, but since only newer versions of dot (>1.8.10)",59],["# since these are more conventional for Boost.",62],["# We maintain this behavior since changing it could break people's builds.",66],["# since it wasn't added until 1.35.",80],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# We should call this function again since hunter_add_package is include-like",132]],"useCount":3248},{"word":"size","context":[["# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.",50],["# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>",92],["# tag is set to NO the size of the Perl module output will be much smaller",62],["# # to get these confused, so we are setting the name based on the word size of",57],["# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.",56],["# code bases. Also note that the size of a graph can be further restricted by",56],["# enabling this will significantly increase the size of the XML output.",55],["# Use this tag to change the font size of Latex formulas included",52],["# when you change the font size after a successful doxygen run you need",52],["# The default size is 10pt.",50]],"useCount":2322},{"word":"so","context":[["# furnished to do so, subject to the following conditions:",659],["# (SDL2.dll, libsdl2.so, SDL2.framework, etc).",171],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# If there are quotes, excape them, so they come through.",198],["# So I use a temporary variable until the end so I can set the",237],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["# Set the final string here so the GUI reflects the final state.",274],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605]],"useCount":15838},{"word":"some","context":[["# and some are specific to a generator",278],["# user-friendly message when we fail to find some necessary piece of",95],["# there is some sysroot-related problem in mips linker...",103],["# save some trees in general.",126],["# a CPU bug in some Cortex-A8 implementations:",138],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["# Added a search for SDL2main which is needed by some platforms.",196],["# Make sure the targets which have been exported in some other",198],["# We were unable to find some libraries, so generate a sensible",94],["# Added a search for threads which is needed by some platforms.",247]],"useCount":6367},{"word":"source","context":[["# Redistribution and use in source and binary forms, with or without",2447],["# set variables for source/devel/install prefixes",605],["# and *.h) to filter out the source-files in the directories. If left",127],["#   - add your source files to YOUR_SRCS",122],["########## List your source files here! ############################################",122],["#       - put each source file in YOUR_SRCS including a *relative* path",122],["#    check what the source file would have printed when called with the given arguments.",119],["BRIEF_DOCS \"Maximum number of source files to include in a single unity source file.\"",114],["BRIEF_DOCS \"Maximum number of source files to include in a single unity source file.\"",114],["# -include process include file as the first line of the primary source file",110]],"useCount":18119},{"word":"sources","context":[["STRING(REPLACE \"/cmake/sources.cmake\" \"\" THIS_SRC_DIR ${CMAKE_CURRENT_LIST_FILE})",122],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/system/include\" )",224],["LIST(APPEND YOUR_CMAKE_FILES \"${THIS_SRC_DIR}/${loop_var}/cmake/sources.cmake\")",116],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/stlport/stlport\" )",110],["set( __libstl                 \"${ANDROID_NDK}/sources/cxx-stl/gabi++/libs/${ANDROID_NDK_ABI_NAME}/libgabi++_static.a\" )",110],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/gabi++/include\" )",110],["# sources only. Doxygen will then generate output that is more tailored for",109],["# mark sources as cotired to prevent them from being used in another cotired target",106],["# Separate the sources from the options",239],["# we need to add generated .cpp files to the sources (to compile them),",83]],"useCount":6058},{"word":"specific","context":[["#    variables to make necessary Android-specific configuration changes.",136],["# and some are specific to a generator",278],["### --- Project specific additions here",116],["# ABI-specific flags",130],["### --- End Project specific additions",142],["# Build specific configuration flags",168],["# Set the options specific to this build case",174],["# Set the rest of the system-specific options and run the dashboard build/test",176],["# Add the build specific configuration flags",198],["# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables",278]],"useCount":6476},{"word":"specified","context":[["# specified.",221],["message( SEND_ERROR \"Unknown ANDROID_ABI=\\\"${ANDROID_ABI}\\\" is specified.\" )",136],["# - For each specified module XXX (system, window, graphics, network, audio, main):",91],["# subdirectory from a directory tree whose root is specified with the INPUT tag.",84],["\"using user-specified Boost_COMPILER = ${_boost_COMPILER}\")",80],["# Setup iOS platform unless specified manually with IOS_PLATFORM",66],["# /FI tells the preprocessor to include a specified file name as the header file",68],["# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH",70],["# and then again with no specified paths to search the default",70],["# before the specified paths. To search non-standard paths first,",70]],"useCount":6527},{"word":"specify","context":[["# specify the cross compiler",248],["message(FATAL_ERROR \"You must specify generated_file on the command line\")",199],["message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")",198],["message(FATAL_ERROR \"Should specify an SDK\")",134],["message(FATAL_ERROR \"Should specify an architecture\")",134],["\"STACK_DIRECTION is not defined.  Please specify -DSTACK_DIRECTION=1 \"",92],["# to specify the libraries.  If you are linking to a dynamic",89],["# The INPUT_FILTER tag can be used to specify a program that doxygen should",87],["# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude",85],["# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard",84]],"useCount":8404},{"word":"src","context":[["\"/usr/src/gtest\"",277],["\"src\"",400],["\"/usr/src/gtest/CMakeLists.txt\"",162],["\"/usr/src/gtest/cmake/internal_utils.cmake\"",162],["SET(CMAKE_RELATIVE_PATH_TOP_SOURCE \"/usr/src/gtest\")",176],["set(CPP_FILES ${CPP_FILES} src/${file})",178],["set(CPP_FILES ${CPP_FILES} src/internal/${file})",178],["\"/home/einstein/openairinterface5g/openair2/UTIL/LFDS/liblfds6.1.1/liblfds611/src\"",240],["\"../src\"",272],["\"/usr/src/gtest/include\"",276]],"useCount":24060},{"word":"standalone","context":[["#try to find Android standalone toolchain in one of the the default locations",132],["message( FATAL_ERROR \"Could not find neither Android NDK nor Android standalone toolchain.",115],["# see if we have path to Android standalone toolchain",126],["#                          Is not available for standalone toolchain.",659],["# get all the details about standalone toolchain",129],["set( __availableToolchains \"standalone\" )",136],["message( STATUS \"Using default path for standalone toolchain ${ANDROID_STANDALONE_TOOLCHAIN}\" )",133],["#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used",135],["#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)",135],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135]],"useCount":3034},{"word":"standard","context":[["message(STATUS \"MSVC: Overloaded standard names\")",79],["#  g        using debug versions of the standard and runtime",66],["#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)",66],["#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)",66],["# before the specified paths. To search non-standard paths first,",70],["# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:",74],["# /MD and /MDd are the standard values - if someone wants to use",77],["# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable",86],["# Look for a standard boost header file.",95],["# Force set compilers because standard identification works badly for us",138]],"useCount":3819},{"word":"static","context":[["# to other libraries to select whether to use the static or shared",100],["# define the SFML_STATIC macro if static build was chosen",94],["#        gabi++_static  -> Use the GAbi++ runtime as a static library.",109],["# By default, the dynamic libraries of SFML will be found. To find the static ones instead,",103],["# no suffix for sfml-main, it is always a static library",103],["#        stlport_static -> Use the STLport runtime as a static library.",109],["# In case of static linking, the SFML_STATIC macro will also be defined by this script.",94],["stlport_static -> Use the STLport runtime as a static library.",111],["gabi++_static  -> Use the GAbi++ runtime as a static library.",111],["# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES",116]],"useCount":8750},{"word":"status","context":[["# The version number is encoded as 0xMNNFFPPS: major minor fix patch status",52],["# Display a status message unless FIND_QUIETLY is set",66],["list(GET status 0 error_code)",56],["#   status  - Status message to print if verbose is true",198],["STATUS status",73],["# granted to it by virtue of its status as an intergovernmental organisation nor",163],["macro(cuda_execute_process status command)",198],["# The status gives if this is a developer or prerelease and is ignored here.",53],["execute_process(COMMAND \"${CMAKE_COMMAND}\" -E echo -- ${status})",199],["# cuda_execute_process - Executes a command with optional command echo and status message.",198]],"useCount":2086},{"word":"std","context":[["SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")",40],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")",50],["-D \"TEST_FOLDER=${PROJECT_BINARY_DIR}/testfiles/std\"",54],["# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.",58],["CHECK_CXX_COMPILER_FLAG(\"-std=c++0x\" COMPILER_SUPPORTS_CXX0X)",69],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["CHECK_CXX_COMPILER_FLAG(\"-std=c++11\" COMPILER_SUPPORTS_CXX11)",89],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")",147],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")",275]],"useCount":2797},{"word":"stdlib","context":[["CHECK_SYMBOL_EXISTS(lrand48 \"stdlib.h\" HAVE_LRAND48)",92],["#include <stdlib.h>",1540],["/* Define to 1 if you have the <stdlib.h> header file. */",165],["set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")",97],["CHECK_INCLUDE_FILES (stdlib.h HAVE_STDLIB_H)",84],["CHECK_INCLUDE_FILES (\"stdlib.h;sys/un.h\" HAVE_SYS_UN_H)",81],["CHECK_INCLUDE_FILES (\"stdlib.h;stdarg.h;string.h;float.h\" STDC_HEADERS)",77],["/* Define to 1 if srand48/lrand48/drand48 exist in <stdlib.h> */",31],["add_definitions(-stdlib=libc++)",31],["if (NOT IS_DIRECTORY \"${SWIFT_SOURCE_DIR}/stdlib/public/SDK/${framework_name}\")",30]],"useCount":3058},{"word":"step","context":[["_ep_get_step_stampfile(${name} ${step} stamp_file)",46],["if(step STREQUAL \"TEST\")",72],["#--Update/Patch step----------",76],["#--Build step-----------------",83],["#--Install step---------------",84],["#--Download step--------------",85],["#--Configure step-------------",91],["if(step STREQUAL \"INSTALL\")",93],["#                          ON : Describe each step",198],["# Byproducts of CMake generate step:",1365]],"useCount":4730},{"word":"string","context":[["string(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")",2385],["string(REPLACE \";\" \"\\n\" CMAKE_INSTALL_MANIFEST_CONTENT",466],["# Set the final string here so the GUI reflects the final state.",274],["#include <string.h>",286],["\"Defaults to empty string.\"",342],["string(TOUPPER ${config} config_upper)",355],["# return as a flag string",599],["string(REPLACE \" \" \";\" depend_list ${depend})",609],["string(REGEX REPLACE",631],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385]],"useCount":42891},{"word":"struct","context":[["CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_len",92],["# Check if struct sockaddr_in::sin_len is available.",92],["struct timespec ts;",134],["CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in\" sin_len",92],["# Check if struct sockaddr_in6::sin6_len is available.",92],["CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_storage\"",184],["struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",383],["struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",383],["struct hostent *foo =",86],["CHECK_TYPE_SIZE(\"struct ${type}\" SIZEOF_${defbase})",92]],"useCount":4069},{"word":"subdirectories","context":[["# corresponding subdirectories.",43],["# Used for subdirectories to export settings.",24],["# The RECURSIVE tag can be used to turn specify whether or not subdirectories",64],["# The EXEC_PROGRAM will not be inherited into subdirectories from",27],["# subdirectories, configure sql_builtins.cc",33],["# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be",83],["########## List your subdirectories here! ##########################################",115],["#   - to include subdirectories either",122],["# testing this directory and lists subdirectories to be tested as well.",2367],["# This macro includes subdirectories rather than adding them",24]],"useCount":3232},{"word":"subdirectory","context":[["# some libraries install the headers is a subdirectory of the include dir",46],["#       - include add each subdirectory to YOUR_DIRS and put a cmake/sources.cmake in each",44],["CACHE PATH \"The subdirectory relative to the install prefix where libraries will be installed (default is prefix/lib)\"",31],["# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory",50],["# Determine the subdirectory where this library will be installed.",60],["#       - include another source.cmake for each subdirectory",78],["# subdirectory from a directory tree whose root is specified with the INPUT tag.",84],["# Do the same thing for each subdirectory in TWO steps",116],["# Include the install script for each subdirectory.",1672],["# Configure variables for this subdirectory.",30]],"useCount":2793},{"word":"substitute","context":[["# (To distribute this file outside of YCM, substitute the full",12],["# (To distribute this file outside of extra-cmake-modules, substitute the full",27],["# (To distribute this file outside of this repository, substitute the full",30],["# (To distribute this file outside of CMake, substitute the full",3976],["# (To distributed this file outside of CMake, substitute the full",586],["#       will incorrectly substitute them.",37]],"useCount":4668},{"word":"suffix","context":[["# Attempt to guess the compiler suffix",86],["# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:",74],["list( APPEND __ndkSearchPaths \"${__ndkSearchPath}${suffix}\" )",73],["endforeach(suffix)",69],["# deduce the libraries suffix from the options",62],["#  Suffix initialization and compiler suffix detection.",80],["list( APPEND __ndkSearchPaths \"${__ndkSearchPath}/android-ndk${suffix}\" )",59],["# Add in a path suffix, based on the required version, ideally",90],["# no suffix for sfml-main, it is always a static library",103],["foreach( suffix ${ANDROID_SUPPORTED_NDK_VERSIONS} )",134]],"useCount":2548},{"word":"support","context":[["# Check for IPv6 support",92],["#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on",111],["# - Added support for Clang.",88],["c++11 support\"",86],["# with large file support",80],["message(STATUS \"MSVC: Enabled SSE2 support\")",79],["OPTION(WITH_LIBWRAP \"Compile with tcp wrappers support\" OFF)",92],["# compile with C++0x/11 support if available",77],["# enable parsing support.",79],["# ccache support",112]],"useCount":9076},{"word":"supported","context":[["#     [~] search for all supported NDK versions",65],["message(\" *** We remind you that you need to use the repository codebase and a supported\")",53],["calls it, or to nothing if 'inline' is not supported under any name.  */",54],["# will be treated as invalid architectures since they are no longer supported by Apple",56],["# The default language is English, other supported languages are:",63],["message( FATAL_ERROR \"Cross-compilation on your platform is not supported by this cmake toolchain\" )",143],["# supported when trying to run an application.  See",79],["message( ERROR \"Could not find libsupc++.a for a chosen platform. Either your NDK is not supported or is broken.\")",111],["# verify that target ABI is supported",129],["message( FATAL_ERROR \"No one of known Android ABIs is supported by this cmake toolchain.\" )",136]],"useCount":2850},{"word":"sure","context":[["# Make sure the build system knows the file is generated.",66],["# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes",73],["# Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:",78],["# Make sure this file is included only once",90],["# make sure we have / and not \\ as qmake gives on windows",94],["#    Make sure to do the following in your scripts:",135],["# Make sure that the ExtProjName/IntProjName variables are unique globally",137],["# Make sure this file is included only once by creating globally unique varibles",139],["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# Make sure the targets which have been exported in some other",198]],"useCount":3475},{"word":"sw","context":[["/sw # Fink",767],["/sw/include",1178],["# ------------------------- vim: set sw=2 sts=2 et: --------------- end-of-file",392],["/sw/include # Fink",292],["/sw/local/lib",145],["/sw/local/include",125],["/sw/lib64",92],["/sw          # Fink",88],["/sw",1363],["/sw/lib",1821]],"useCount":7138},{"word":"sys","context":[["#include <sys/socket.h>",573],["#include <sys/types.h>",830],["#include <sys/time.h>",279],["#include <sys/mman.h>",217],["/* Define to 1 if you have the <sys/types.h> header file. */",214],["/* Define to 1 if you have the <sys/stat.h> header file. */",189],["/* Define to 1 if you have the <sys/time.h> header file. */",112],["#include <sys/stat.h>",107],["CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)",102],["CHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)",99]],"useCount":11900},{"word":"system","context":[["set(_Boost_FILESYSTEM_DEPENDENCIES system)",160],["# This file is part of the CMake build system for OGRE",449],["# the name of the target operating system",346],["set( ANDROID_STL_INCLUDE_DIRS \"${ANDROID_NDK}/sources/cxx-stl/system/include\" )",224],["# Set the rest of the system-specific options and run the dashboard build/test",176],["# # Now search system paths",115],["# system piece by piece in case you need to opt out of certain components",159],["# default FindOpenGL.cmake module doesn't work with your system as an",159],["# update the list -- these are only system libraries, no need to find them",138],["message(\"USING the system ${extProjName}, set ${extProjName}_DIR=${${extProjName}_DIR}\")",128]],"useCount":13223},{"word":"t","context":[["if(NOT TARGET ${t})",609],["add_custom_target(${t})",605],["# For threads, as mentioned Apple doesn't need this.",239],["# Generate the cmake readable dependency file to a temp file.  Don't put the",198],["# If we weren't given a build_configuration, use Debug.",198],["# We won't actually use these variables for now, but we need to set this, in",198],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["\"@newglossary[ \\t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}\"",185],["# CMake doesn't display the -framework Cocoa string in the UI even",239]],"useCount":19487},{"word":"tag","context":[["# This tag requires that the tag GENERATE_HTML is set to YES.",546],["# This tag requires that the tag HAVE_DOT is set to YES.",557],["# This tag requires that the tag HAVE_DOT is set to YES.",557],["# This tag requires that the tag GENERATE_QHP is set to YES.",147],["# This tag requires that the tag GENERATE_QHP is set to YES.",147],["# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.",147],["# If the value of the INPUT tag contains directories, you can use the",170],["# This tag requires that the tag GENERATE_LATEX is set to YES.",316],["# This tag requires that the tag GENERATE_LATEX is set to YES.",316],["# This tag requires that the tag GENERATE_HTML is set to YES.",546]],"useCount":25818},{"word":"target","context":[["# Preprocessor definitions for this target.",6763],["# where is the target environment",315],["# keep build configuration keywords, target names and absolute libraries as-is",586],["# search headers and libraries in the target environment, search",351],["# the name of the target operating system",346],["# here is the target environment located",273],["# target for backward compatibility",248],["# register target for catkin_package(EXPORTED_TARGETS)",248],["# Generated CMake target import file.",233],["# Targets to which this target links.",10677]],"useCount":48194},{"word":"target_link_libraries","context":[["target_link_libraries(${cuda_target}",130],["target_link_libraries(",312],["target_link_libraries(${PROJECT_NAME}",100],["target_link_libraries(${_name} ${Boost_LIBRARIES})",91],["#   target_link_libraries(myapp ${SFML_LIBRARIES})",81],["target_link_libraries(${target} ${CUDA_cublasemu_LIBRARY})",63],["target_link_libraries(${library} ${ARG_LIBRARIES} ${ARG_DEPENDENCIES})",70],["target_link_libraries(${library} ${ARG_LIBRARIES})",70],["target_link_libraries(${target} ${CUDA_cufft_LIBRARY})",63],["target_link_libraries(${target} ${CUDA_cufftemu_LIBRARY})",63]],"useCount":3459},{"word":"targets","context":[["\"/home/einstein/openairinterface5g/targets/ARCH/EXMIMO/USERSPACE/LIB\"",240],["\"/home/einstein/openairinterface5g/targets/ARCH/COMMON\"",240],["\"/home/einstein/openairinterface5g/targets/ARCH/EXMIMO/DEFS\"",240],["# Create custom commands and targets for each file.",247],["# create dummy targets for exported code generation targets to make life of users easier",605],["# create dummy targets for exported code generation targets to make life of users easier",605],["# Dependency information for all targets:",1371],["\"/home/einstein/openairinterface5g/targets/COMMON\"",240],["# Make sure the targets which have been exported in some other",198],["# This file does not depend on other imported targets which have",184]],"useCount":8248},{"word":"test","context":[["LOG_TEST      0  # Wrap test in script to to ignore log output from dashboards",140],["\"unsupported/test/../../test\"",165],["\"unsupported/test\"",165],["\"unsupported/test/../../test\"",165],["# Set the rest of the system-specific options and run the dashboard build/test",176],["function(test)",480],["\"/home/cmeon/SimplexLP/eigen/test\"",552],["\"../test\"",582],["test/kaa_test_external.c",137],["\"test\"",1134]],"useCount":15332},{"word":"tested","context":[["# testing this directory and lists subdirectories to be tested as well.",2367],["# blank the following patterns are tested:",63],["# tested with:",61],["# This module has been tested on the WIN32 platform with wxWidgets",27],["# so all of them need to be tested. Lua 5.2 defines LUA_VERSION",24],["# JW tested with gsl-1.8, Windows XP, MSVS 7.1",22],["# following patterns are tested:*.c, *.cc, *.cxx, *.cpp, *.c++, *.java, *.ii,",21],["message(WARNING \"Your compiler is not tested, if you run into any issues, we'd welcome any patches.\")",20],["# system is non-Linux (where the code above has not been well tested)",20],["# JW tested with gsl-1.8, Windows XP, MSVS 7.1, MSVS 8.0",20]],"useCount":2717},{"word":"testing","context":[["# testing this directory and lists subdirectories to be tested as well.",2367],["# This file includes the relevant testing commands required for",1214],["# This file includes the relevent testing commands required for",1153],["## project to incorporate the testing dashboard.",231],["# make sure we're using minimum the required version of git, so the \"dirty-testing\" will work properly",57],["option(WITHOUT_GIT      \"Disable the GIT testing routines\"                            0)",55],["# Disable inline optimizations for valgrind testing to avoid false positives",34],["\"Additional URL templates for the ExternalData CMake script to look for testing data. E.g.",33],["option(testing \"Enable testing with CTest\" OFF)",30],["option(testing \"Enable testing with CTest\" OFF)",30]],"useCount":5699},{"word":"tests","context":[["# Param _testrunner     The name of the target which runs the tests.",82],["\"CMakeFiles/tests.dir/DependInfo.cmake\"",201],["# Run tests",200],["# If using memchecker add tests without using scripts",106],["# Param _testrunner     The name of the target which runs the tests",100],["# Code tests",100],["# the output so that it tests false if an error occurs.",93],["# and adjusting the output so that it tests false if there was no exact",92],["FIND_PROGRAM( GCOVR_PATH gcovr PATHS ${CMAKE_SOURCE_DIR}/tests)",88],["\"/opt/ros/indigo/share/catkin/cmake/test/tests.cmake\"",88]],"useCount":7003},{"word":"text","context":[["# in this list, if found as the leading text of the brief description, will be",59],["# used as the annotated text. Otherwise, the brief description is used as-is.",59],["# text before the first occurrence of this tag. Doxygen uses libiconv (or the",54],["# stripped from the text and the result after processing the whole list, is",59],["# All text after a hash (#) is considered a comment and will be ignored",40],["# that is used to form the text in various listings. Each string",59],["# doxygen can produce. The string should contain the $file, $line, and $text",63],["WARN_FORMAT            = \"$file:$line: $text\"",110],["#    contains the text the executable would have printed on stdout and stderr.",119],["# append custom deprecation text if available",605]],"useCount":2395},{"word":"than","context":[["# becomes larger than this value, doxygen will truncate the graph, which is",58],["# makes this harder than it should be. It looks like they",42],["#   Therefore it shouldn't have any side effects other than defining",43],["# If working from source rather than SDK, add samples include",50],["# number of direct children of the root node in a graph is already larger than",54],["# the documentation. If the initializer consists of more lines than specified",62],["# So if a user specifies the same cuda file as input more than once, you",66],["#  p        using the STLport standard library rather than the",66],["# in locations other than lua/",105],["# to find the path to this module rather than the path to a calling list file",115]],"useCount":2554},{"word":"that","context":[["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605],["# This tag requires that the tag HAVE_DOT is set to YES.",557],["# This tag requires that the tag GENERATE_HTML is set to YES.",546],["# This tag requires that the tag GENERATE_LATEX is set to YES.",316],["# Note that the header path has changed from SDL2/SDL.h to just SDL.h",202],["# Make this a macro instead of a function, so that things like RESULT_VARIABLE",198],["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# CMake policy 0007 NEW states that empty list elements are not",191],["# Note that this will remove all occurances of -G.",191]],"useCount":38795},{"word":"the","context":[["# This file includes the relevant testing commands required for",1214],["# The top level Makefile was generated from the following files:",1373],["# Include the install script for each subdirectory.",1672],["# For details see the accompanying COPYING-CMAKE-SCRIPTS file.",2066],["# (To distribute this file outside of CMake, substitute the full",3976],["# Set the install configuration name.",8081],["# Set the component getting installed.",8081],["# Set the install prefix",8083],["# This file includes the relevent testing commands required for",1153],["# documentation and/or other materials provided with the distribution.",770]],"useCount":386153},{"word":"them","context":[["# Args with spaces need quotes around them to get them to be parsed as a single argument.",198],["# compare them",114],["#    The flags will be prepopulated with critical flags, so don't loose them.",111],["# if we could extract them, compare with the requested version number",110],["# mark sources as cotired to prevent them from being used in another cotired target",106],["# Args with spaces need quotes around them to get them to be parsed as a single argument.",198],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198],["# If there are quotes, excape them, so they come through.",198],["#   Pass them in list form, e.g.: \"-j;2\" for -j 2",183],["# update the list -- these are only system libraries, no need to find them",138]],"useCount":5607},{"word":"then","context":[["then",87],["# use pkg-config to get the directories and then use these values",582],["# then just use the release libraries",207],["# if the generator supports configuration types then set",204],["## Store global variables before overwriting (then restore at end of this file.)",143],["#      chosen runtime. If disabled, then the user is responsible for settings",111],["# sources only. Doxygen will then generate output that is more tailored for",109],["# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless",94],["# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking",89],["# runtime, then you can choose to link to either a static or a",89]],"useCount":11877},{"word":"there","context":[["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["# In fact, there seems to be a problem if I used the Threads package",238],["# though it actually is there if I modify a pre-used variable.",237],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["# If there are quotes, excape them, so they come through.",198],["# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI",136],["# there is some sysroot-related problem in mips linker...",103],["# and adjusting the output so that it tests false if there was no exact",92],["# In Boost <= 1.35.0, there is no mangled compiler name for",89],["# We can use time() on Macintosh if there is no ftime().",77]],"useCount":5018},{"word":"these","context":[["# use pkg-config to get the directories and then use these values",582],["# Requires these CMake modules:",210],["# Set these up as variables to make reading the generated file easier",199],["# We won't actually use these variables for now, but we need to set this, in",198],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["# also opt into OpenGL and OpenThreads (and Producer if needed) as these",153],["## appear to stay constant in one of these files.",143],["# update the list -- these are only system libraries, no need to find them",138],["# set these global flags for cmake client scripts to change behavior",130],["BRIEF_DOCS \"Ignore headers from these directories when generating the prefix header.\"",114]],"useCount":7388},{"word":"they","context":[["#      errors even if they are not used.",135],["# seem to provide SDL2main for compatibility even though they don't",170],["# If there are quotes, excape them, so they come through.",198],["# Variables used by this module, they can change the default behaviour and need",124],["# mark 32 bit executables large address aware so they can use > 2GB address space",81],["# here.  If they aren't there we need to just blank this variable and",71],["# depends on exist.  If they don't then we should clear the dependency",71],["# Loop over all imported files and verify that they actually exist",181],["# append elements to a list if they are not already in the list",605],["# and spaces, anything else is left up to the user to fix if they want to",198]],"useCount":5289},{"word":"this","context":[["# The contents of this file are placed in the public domain. Feel",495],["# (To distribute this file outside of CMake, substitute the full",3976],["# testing this directory and lists subdirectories to be tested as well.",2367],["# The C and CXX include file regular expressions for this directory.",2244],["# Once done, this will define",984],["# (To distributed this file outside of CMake, substitute the full",586],["# Commands beyond this point should not need to know the version.",559],["# Targets to which this target links.",10677],["# Once done this will define",4139],["# Preprocessor definitions for this target.",6763]],"useCount":75473},{"word":"time","context":[["/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */",86],["#include <time.h>",274],["# We must run the following at \"include\" time, not at function call time,",115],["# We must run the following at \"include\" time, not at function call time,",115],["/* Define to 1 if you have the <sys/time.h> header file. */",112],["CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)",102],["CHECK_INCLUDE_FILES(\"time.h;sys/time.h\" TIME_WITH_SYS_TIME)",92],["CHECK_INCLUDE_FILES(\"time.h;sys/time.h\" TIME_WITH_SYS_TIME)",92],["# code to emit a #pragma message each time a library is selected",89],["#include <sys/time.h>",279]],"useCount":6336},{"word":"tmp","context":[["file(REMOVE \"${tmp}\")",52],["-D \"output_file:FILEPATH=${cmake_dependency_file}.tmp\"",200],["SET(MYSQL_UNIX_ADDR \"/tmp/mysql.sock\")",41],["strcpy(fname, \\\"/tmp/name/multiplemaptestXXXXXX\\\");",36],["\"Removing ${cmake_dependency_file}.tmp and ${NVCC_generated_dependency_file}\"",192],["\"Copy if different ${cmake_dependency_file}.tmp to ${cmake_dependency_file}\"",199],["\"Generating temporary cmake readable file: ${cmake_dependency_file}.tmp\"",199],["COMMAND \"${CMAKE_COMMAND}\" -E remove \"${cmake_dependency_file}.tmp\" \"${NVCC_generated_dependency_file}\"",191],["\"/Users/vector/tmp/Cobalt/ext/emsdk_portable/clang/tag-e1.34.1/src/include\"",134],["COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different \"${cmake_dependency_file}.tmp\" \"${cmake_dependency_file}\"",199]],"useCount":3002},{"word":"to","context":[["# furnished to do so, subject to the following conditions:",659],["# Targets to which this target links.",10677],["# testing this directory and lists subdirectories to be tested as well.",2367],["# copied from catkin/cmake/catkin_libraries.cmake to keep pkgConfig",1172],["# as a fall back for non-catkin libraries try to search globally",605],["# since the path where the library is found is returned we have to iterate over the paths manually",605],["# flag project as catkin-based to distinguish if a find_package()-ed project is a catkin project",605],["# create dummy targets for exported code generation targets to make life of users easier",605],["# append elements to a list if they are not already in the list",605],["# furnished to do so, subject to the following conditions:",659]],"useCount":232006},{"word":"tool","context":[["# the mscgen tool resides. If left empty the tool is assumed to be found in the",75],["# command. Doxygen will then run the mscgen tool (see",54],["# will point to the HTML generated by the htags(1) tool instead of doxygen",58],["# available from the path. This tool is part of Graphviz, a graph visualization",63],["# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is",84],["# Configuration options related to the dot tool",131],["#      used by ndk-build tool from Android NDK.",135],["# found. If left blank, it is assumed the dot tool can be found in the path.",80],["# the mscgen tool resides. If left empty the tool is assumed to be found in the",75],["# The tag DOT_PATH can be used to specify the path where the dot tool can be",63]],"useCount":2291},{"word":"toolchain","context":[["# export toolchain settings for the try_compile() command",136],["message( FATAL_ERROR \"It is not possible to change path to the Android standalone toolchain on subsequent run.\" )",135],["#    android-cmake toolchain searches for NDK/toolchain in the following order:",135],["# Variables controlling behavior or set by cmake toolchain:",136],["message( FATAL_ERROR \"No one of known Android ABIs is supported by this cmake toolchain.\" )",136],["or put the toolchain or NDK in the default path:",137],["# only search for libraries and includes in the ndk toolchain",140],["message( FATAL_ERROR \"Cross-compilation on your platform is not supported by this cmake toolchain\" )",143],["#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..",206],["#                          Is not available for standalone toolchain.",659]],"useCount":7674},{"word":"tools","context":[["\"../tools/include\"",73],["\"/home/BCAMATH/mfernandez/reduced-flipping-GSHMC/src/tools/CMakeFiles/gmxana.dir/DependInfo.cmake\"",82],["set( ANDROID_FORBID_SYGWIN TRUE CACHE BOOL \"Prevent cmake from working under cygwin and using cygwin tools\")",136],["set(CMAKE_INSTALL_PREFIX \"E:/picvox/tools/opencv/build/install\")",65],["\"/opt/ros/indigo/share/catkin/cmake/tools/doxygen.cmake\"",88],["message(\"* Build map/vmap tools   : Yes\")",112],["\"/opt/ros/indigo/share/catkin/cmake/tools/rt.cmake\"",88],["message(\"* Build map/vmap tools   : No  (default)\")",112],["#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools",111],["\"/opt/ros/indigo/share/catkin/cmake/tools/libraries.cmake\"",88]],"useCount":3176},{"word":"top","context":[["# see documentation at top",221],["#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)",135],["# found in the top-level directory of this distribution.",85],["# top of each HTML page. The value NO (the default) enables the index and",39],["set(PostgreSQL_LIBRARY_PATH_DESCRIPTION \"top-level directory containing the PostgreSQL libraries.\")",32],["# for a project that appears at the top of each page and should give viewer",31],["set(top \"${CMAKE_CURRENT_BINARY_DIR}\")",31],["## the top level of the deal.II distribution.",474],["# The top level Makefile was generated from the following files:",1373],["# Relative path conversion top directories.",2231]],"useCount":5310},{"word":"tree","context":[["# subdirectory from a directory tree whose root is specified with the INPUT tag.",84],["# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree",99],["# Returns the results of git describe on the source tree, and adjusting",91],["# Returns the results of git describe --exact-match on the source tree,",92],["# which point to directories outside the build tree to the install RPATH",79],["# ROOT configured for use from the build tree - absolute paths are used.",73],["# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index",73],["# used to set the initial width (in pixels) of the frame in which the tree",62],["# use, i.e. don't skip the full RPATH for the build tree",62],["# to the contents of the HTML help documentation and to the tree view.",62]],"useCount":4128},{"word":"true","context":[["set( ARMEABI_V7A true )",405],["return(true)",153],["<default>true</default>",175],["#   status  - Status message to print if verbose is true",198],["#                                                   in if build_cubin is true.",198],["set( X86 true )",208],["set( NEON true )",226],["set( ARMEABI true )",275],["set( VFPV3 true )",366],["SET(CPACK_PACKAGE_RELOCATABLE \"true\")",370]],"useCount":7758},{"word":"try","context":[["#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)",108],["# try to detect change of NDK",104],["#try to find Android standalone toolchain in one of the the default locations",132],["# try to convert path to 8.3 form",103],["#try to find Android NDK in one of the the default locations",132],["# try to detect change",153],["# SDL2_FOUND, if false, do not try to link to SDL2",164],["# this module will try to find on your behalf.) Also for OS X, this",226],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# as a fall back for non-catkin libraries try to search globally",605]],"useCount":6074},{"word":"txt","context":[["\"CMakeLists.txt\"",522],["\"CMakeCache.txt\"",1377],["SET(CMAKE_INSTALL_MANIFEST \"install_manifest_${CMAKE_INSTALL_COMPONENT}.txt\")",1131],["SET(CMAKE_INSTALL_MANIFEST \"install_manifest.txt\")",1131],["\"../CMakeLists.txt\"",627],["set(CMAKE_INSTALL_MANIFEST \"install_manifest_${CMAKE_INSTALL_COMPONENT}.txt\")",618],["\"${CMAKE_ROOT}/Modules/RepositoryInfo.txt.in\"",145],["\"/usr/src/gtest/CMakeLists.txt\"",162],["## Then modify the CMakeLists.txt file in the root directory of your",231],["set(CMAKE_INSTALL_MANIFEST \"install_manifest.txt\")",618]],"useCount":13961},{"word":"type","context":[["CHECK_TYPE_SIZE(\"${type}\" SIZEOF_${defbase})",92],["# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>",92],["FUNCTION(MY_CHECK_STRUCT_SIZE type defbase)",92],["# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>",92],["# System type affects version_compile_os variable",92],["# Initialize C link type selection flags.  These flags are used when",97],["# Tests for type sizes (and presence)",93],["FUNCTION(MY_CHECK_TYPE_SIZE type defbase)",92],["# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>",92],["CHECK_TYPE_SIZE(\"struct ${type}\" SIZEOF_${defbase})",92]],"useCount":7974},{"word":"typedef","context":[["# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum",56],["# types are typedef'ed and only the typedef is referenced, never the tag name.",75],["+     typedef long           ptrdiff_t;",111],["-typedef long           ptrdiff_t;",111],["@@ -51,7 +51,11 @@ typedef long int       ssize_t;",111],["+     typedef int            ptrdiff_t;",111],["# typedef struct TypeS {} TypeT, will appear in the documentation as a struct",78],["# with name TypeT. When disabled the typedef will appear as a member of a file,",76],["# types are typedef'ed and only the typedef is referenced, never the tag name.",75],["# is documented as struct, union, or enum with the name of the typedef. So",56]],"useCount":2032},{"word":"types","context":[["SET (CMAKE_EXTRA_INCLUDE_FILES sys/types.h)",81],["CHECK_INCLUDE_FILES (\"sys/types.h;sys/dir.h\" HAVE_SYS_DIR_H)",81],["CHECK_INCLUDE_FILES (sys/types.h HAVE_SYS_TYPES_H)",88],["SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h netinet/in.h sys/socket.h)",92],["/* Define to `unsigned int' if <sys/types.h> does not define. */",77],["# types are typedef'ed and only the typedef is referenced, never the tag name.",75],["#include <sys/types.h>",830],["/* Define to 1 if you have the <sys/types.h> header file. */",214],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["# if the generator supports configuration types then set",204]],"useCount":4510},{"word":"undef","context":[["\"cotire will add corresponding #undef directives to the generated unit source file after this file is included.\"",38],["#undef inline",127],["# undef signal",80],["# undefined via #undef or recursively expanded use the := operator",59],["#undef PACKAGE_TARNAME",42],["#undef size_t",39],["\"cotire will add corresponding #undef directives to the generated unit source file before each target source file.\"",38],["\"cotire will add corresponding #undef directives to the generated unit source file before this file is included.\"",38],["\"cotire will add corresponding #undef directives to the generated unit source file after each target source file.\"",38],["list (APPEND ${_contentsVar} \"#undef ${_definition}\")",38]],"useCount":2102},{"word":"unittests","context":[["list(APPEND unittests \"test_string\")",13],["list(APPEND unittests \"test_code\")",12],["list(APPEND unittests \"test_readline\")",12],["list(APPEND unittests \"test_gettext\")",12],["list(APPEND unittests \"test_zipimport\")",12],["list(APPEND unittests \"test_unicode_file\")",12],["list(APPEND unittests \"test_grp\")",12],["list(APPEND unittests \"test_hash\")",12],["list(APPEND unittests \"test_int\")",12],["SET(CPACK_COMPONENT_TEST_DESCRIPTION \"Installs unittests (requires Perl to run)\")",20]],"useCount":3740},{"word":"unity","context":[["\"Most of the relevant target properties will be copied from this target to the new unity build target.\"",38],["BRIEF_DOCS \"Maximum number of source files to include in a single unity source file.\"",114],["\"If not set, cotire will only create a single unity source file.\"",44],["BRIEF_DOCS \"Add a new target that performs a unity build for cotired targets added in this directory.\"",38],["BRIEF_DOCS \"Add a new target that performs a unity build for this target.\"",38],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file after the inclusion of each source file.\"",38],["\"The source file will also be excluded from the generated unity source file.\"",38],["BRIEF_DOCS \"Preprocessor undefs to place in the generated unity source file after the inclusion of this source file.\"",38],["\"This property essentially works as a separator for unity source files.\"",38],["\"The unity target name will be set to this target's name with the suffix _unity appended.\"",38]],"useCount":2516},{"word":"unix","context":[["# Force unix paths in dependencies.",2233],["# \t额外计算默认目录的md5，其中包括src,inc,proto,src.android/cpp,src.ios/cpp,src.win/cpp，src.unix/cpp",81],["# - Find unix commands from cygwin",74],["# want clean framework path, not unix compatibility path",58],["# There is a bug in NSI that does not handle full unix paths properly. Make",50],["# On unix system, debug and release have the same name",37],["\"/usr/include/gtk-unix-print-2.0\"",28],["# also exports API functions as dllexport. On unix, creates a dummy file",26],["\"/usr/include/gio-unix-2.0\"",26],["# for unix add X11 stuff",24]],"useCount":3118},{"word":"unset","context":[["unset(__new_path)",137],["unset( __length )",271],["unset( NDK_CCACHE CACHE )",223],["unset( __fileCopyProcess )",138],["unset(_IMPORT_CHECK_FILES_FOR_${target})",142],["unset(_IMPORT_CHECK_TARGETS)",142],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["unset(_expectedTargets)",206],["unset(_targetsNotDefined)",206],["unset(_targetsDefined)",206]],"useCount":16017},{"word":"up","context":[["# set up output paths for executable binaries (.exe-files, and .dll-files on DLL-capable platforms)",85],["# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.",89],["# Test program returns 0 (down) or 1 (up).",92],["# set up the default search directories for frameworks",115],["# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler",198],["# Now we need to build up our command string.  We are accounting for quotes",198],["# others acting on its behalf a paid-up, nonexclusive, irrevocable",397],["# acting on its behalf a paid-up, nonexclusive, irrevocable worldwide",397],["# and spaces, anything else is left up to the user to fix if they want to",198],["# Set these up as variables to make reading the generated file easier",199]],"useCount":6970},{"word":"use","context":[["# which compilers to use for C and C++",285],["# So I use a temporary variable until the end so I can set the",237],["#  Redistribution and use is allowed according to the terms of the New",566],["# But for non-OSX systems, I will use the CMake Threads package.",239],["set(_state \"use\")",243],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",518],["# Redistribution and use in source and binary forms, with or without",2447],["# also defined, but not for general use are",608],["# use pkg-config to get the directories and then use these values",582],["# use pkg-config to get the directories and then use these values",582]],"useCount":28641},{"word":"used","context":[["# The generator used is:",1373],["# In fact, there seems to be a problem if I used the Threads package",238],["# though it actually is there if I modify a pre-used variable.",237],["# used in building SDL2.",212],["# as appropriate. These values are used to generate the final SDL2_LIBRARY",174],["# used in building SDL.",174],["# used in building osg.",177],["#                               configuration used when compiling the code.  If",198],["# Set build-directive (used in core to tell which buildtype we used)",188],["# Set build-directive (used in core to tell which buildtype we used)",188]],"useCount":27567},{"word":"user","context":[["#      chosen runtime. If disabled, then the user is responsible for settings",111],["# and spaces, anything else is left up to the user to fix if they want to",198],["# Make variables changeble to the advanced user",194],["# Help the user find it if we cannot.",186],["set( CMAKE_INSTALL_PREFIX \"${ANDROID_TOOLCHAIN_ROOT}/user\" CACHE STRING \"path for installing\" )",127],["# user-friendly message when we fail to find some necessary piece of",95],["WORKING_DIRECTORY ${TOP}/user-source",90],["# The user has not requested an exact version.  Among known",82],["# versions, find those that are acceptable to the user request.",82],["# Set the find root to the iOS developer roots and to user defined paths",82]],"useCount":7367},{"word":"uses","context":[["# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is",54],["## # The following are required to uses Dart and the Cdash dashboard",188],["# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.",170],["# Requires CMake 2.6 or newer (uses the 'function' command)",158],["# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree",99],["# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.",62],["# also the default input encoding. Doxygen uses libiconv (or the iconv built",54],["# text before the first occurrence of this tag. Doxygen uses libiconv (or the",54],["# Doxygen uses this value to replace tabs by spaces in code fragments.",63],["# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.",47]],"useCount":3046},{"word":"using","context":[["# If using memchecker add tests without using scripts",106],["# If using memchecker add tests without using scripts",106],["On Linux and OS X host platform you can workaround this problem using gold linker (default).",111],["# So this flag option is required for all projects using OpenGL from native.",111],["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115],["set( ANDROID_FORBID_SYGWIN TRUE CACHE BOOL \"Prevent cmake from working under cygwin and using cygwin tools\")",136],["# and try using this line, so I'm just skipping it entirely for OS X.",240],["# Added code to assist with automated building by using environmental variables",244],["# warn when using a deprecated package",605],["# The project is provided using ${extProjName}_DIR, nevertheless since other",148]],"useCount":11000},{"word":"usr","context":[["set(CMAKE_INSTALL_PREFIX \"/usr/local\")",1094],["/usr/local/lib",4764],["/usr/include",3956],["/usr/local/include",3782],["SET(CMAKE_INSTALL_PREFIX \"/usr/local\")",3426],["/usr/local",2077],["/usr",1984],["/usr/lib64",1464],["/usr/local/lib64",1189],["/usr/lib",4822]],"useCount":95850},{"word":"v","context":[["if(${v})",58],["if(NOT DEFINED \"${v}\")",60],["message(FATAL_ERROR \"No \\\"-D${v}=\\\" value provided!\")",60],["message(STATUS \"v='${v}'\")",100],["# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.",58],["set_property(CACHE ${v} PROPERTY ADVANCED 1)",47],["elseif(_${v}_LAST)",47],["message(STATUS \"v='${v}'\")",100],["set(_${v}_CHANGED 1)",94],["foreach(v",74]],"useCount":3580},{"word":"v7a","context":[["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132],["#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary",111],["set( ANDROID_NDK_ABI_NAME \"armeabi-v7a\" )",402],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a with VFPV3\" )",135],["#   ARMEABI_V7A : TRUE for arm v7a",135],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a\")",133],["elseif( ANDROID_ABI STREQUAL \"armeabi-v7a with NEON\" )",133],["#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but",132],["#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but",132],["#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but",132]],"useCount":2161},{"word":"value","context":[["# The default value is: YES.",1098],["# The default value is: NO.",1874],["#  Options (can be set as cmake parameters: -D<option_name>=<value>):",135],["# If the value of the INPUT tag contains directories, you can use the",170],["#   CUDA_result - return value from running the command",198],["# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value",204],["# if there are no configuration types and CMAKE_BUILD_TYPE has no value",207],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["message( FATAL_ERROR \"ANDROID_STL is set to invalid value \\\"${ANDROID_STL}\\\".",224],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321]],"useCount":15743},{"word":"values","context":[["# People will have to manually change the cache values of",300],["The possible values are:",226],["# use pkg-config to get the directories and then use these values",582],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["# as appropriate. These values are used to generate the final SDL2_LIBRARY",174],["Supported values are: \\\"${PRINTABLE_ANDROID_SUPPORTED_ABIS}\\\"",137],["#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI",135],["# instruction, i.e. will overwrite variable values (foreach's _x will survive)",132],["#      Possible values are:",118],["#      toolchain to be used. The list of possible values depends on the NDK",108]],"useCount":5420},{"word":"var","context":[["SET(${var} TRUE)",96],["string(TOUPPER \"${var}\" VAR)",93],["SET(${var} 0)",89],["SET(${var} 1)",87],["# replace won't work if var is blank",83],["foreach (var ${_MPI_OLD_VARS})",78],["foreach(var ${ARGN})",122],["# Get path, convert backslashes as ${ENV_${var}}",204],["if(${var})",155],["IF(${var}_COMPILED)",130]],"useCount":7953},{"word":"variable","context":[["# \"real\" variable in one-shot.",237],["# $SDLDIR is an environment variable that would",175],["#      Can be set as environment variable. Can be set only at first cmake run.",205],["# Set CMake OSX variable to pass down the external project",209],["# though it actually is there if I modify a pre-used variable.",237],["# So I use a temporary variable until the end so I can set the",237],["# Set the temp variable to INTERNAL so it is not seen in the CMake GUI",267],["#  cpack --help-variable-list",278],["##variable",450],["# the package name of the dependency must be kept in a unique variable so that it is not overwritten in recursive calls",605]],"useCount":18373},{"word":"variables","context":[["# This file will be configured to contain variables for CPack. These variables",370],["# Copy the results to the output variables.",300],["# NOTE: Singular variables for this library, plural for libraries this this lib depends on.",311],["# Set the include dir variables and the libraries and let libfind_process do the rest.",345],["# This file will be configured to contain variables for CPack. These variables",370],["# This module defines the following variables:",388],["# set variables for source/devel/install prefixes",605],["# if all listed variables are TRUE",786],["# all listed variables are TRUE",2436],["# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)",278]],"useCount":26504},{"word":"version","context":[["/* Define to the full name and version of this package. */",193],["#   version.",809],["# Commands beyond this point should not need to know the version.",559],["# On OSX, this will prefer the Framework version (if found) over others.",292],["set(_state \"version\")",243],["message(FATAL_ERROR \"Qt 5 requires at least CMake version 2.8.3\")",215],["# define this for now until a future version fixes this bug.",192],["/* Define to the version of this package. */",191],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["# if only the release version was found, set the debug variable also to the release version",165]],"useCount":35005},{"word":"versions","context":[["# Try to find Boost by stepping backwards through the Boost versions",90],["#     [~] search for all supported NDK versions",65],["#  g        using debug versions of the standard and runtime",66],["# On versions < 1.35, remove the System library from the considered list",80],["# versions, find those that are acceptable to the user request.",82],["# Select acceptable versions.",82],["set(_state \"versions\")",88],["# Non-OS X framework versions expect you to also dynamically link to",233],["# OS X framework based version. (Other versions link to -lSDL2main which",168],["# versions of the libraries.",100]],"useCount":4195},{"word":"void","context":[["int main(void) {",735],["void foo(void) {}",160],["void foo(void) {}",160],["SET(MANAGED_METHOD_RETURN_TYPE     \"void\")",396],["int main(void)",492],["SET(MANAGED_METHOD_PARAMS          \"void\")",96],["int main(void){",92],["SET(RETQSORTTYPE \"void\")",84],["extern \\\"C\\\" void (*signal (int, void (*)(int)))(int);",84],["void (*signal ()) ();",84]],"useCount":5090},{"word":"vtk","context":[["\"/usr/include/vtk-5.8\"",258],["foreach(vtk-module ${VTK_MODULES_ALL})",96],["if(NOT ${vtk-module}_IS_TEST)",63],["PROPERTIES LABELS \"${${vtk-module}_TEST_LABELS}\"",57],["foreach(dep IN LISTS ${vtk-module}_LINK_DEPENDS)",57],["unset(vtk-module)",50],["foreach(test IN LISTS ${vtk-module}_TESTED_BY)",47],["\"/usr/lib/vtk-5.8/VTKTargets.cmake\"",46],["\"/usr/lib/vtk-5.8/VTKConfig.cmake\"",46],["\"/usr/lib/vtk-5.8/VTKConfigVersion.cmake\"",46]],"useCount":7084},{"word":"want","context":[["# Avoid finding the .dll in the PATH.  We want the .lib.",105],["# and spaces, anything else is left up to the user to fix if they want to",198],["# to see if this is the behavior they want.",66],["# If you want to observe which libraries are being linked against",89],["# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want",75],["## We really do want to install in order to limit # of include paths INSTALL_COMMAND \"\"",74],["# So we want to try and include the dependency file if it exists.  If",71],["# Add the other files that we want cmake to clean on a cleanup ##########",66],["# We want to use the tag inline below without risking double dashes",66],["# If you want to use a more convenient module that includes everything,",161]],"useCount":3811},{"word":"warning","context":[["# configuration options related to warning and progress messages",109],["# ignored.  I'm just setting it to avoid the warning that's printed.",191],["# The WARNINGS tag can be used to turn on/off the warning messages that are",84],["# touch toolchain variable to suppress \"unused variable\" warning",73],["# The WARN_FORMAT tag determines the format of the warning messages that",63],["# The WARN_LOGFILE tag can be used to specify a file to which warning",62],["FAIL_REGEX \"warning D9002\"                             # MSVC, any lang",56],["# We prefer more strict warning checking for building Google Test.",46],["# User has manually chosen to ignore the git-tests, so throw them a warning.",45],["message(STATUS \"warning: embedded item does not exist '${ri}'\")",44]],"useCount":2610},{"word":"warnings","context":[["# Ignore warnings about older, less secure functions",80],["option(WITH_WARNINGS    \"Show all warnings during compile\"                            0)",107],["message(\"* Show compile-warnings  : No  (default)\")",117],["# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for",62],["# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings",63],["#Ignore warnings about POSIX deprecation",68],["message(STATUS \"MSVC: Disabled NON-SECURE warnings\")",79],["message(STATUS \"MSVC: Disabled generic compiletime warnings\")",79],["message(\"* Show all warnings      : Yes\")",117],["message(STATUS \"MSVC: Disabled POSIX warnings\")",78]],"useCount":2947},{"word":"was","context":[["# if only the release version was found, set the debug variable also to the release version",165],["# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache",102],["# The top level Makefile was generated from the following files:",1373],["\"Source file was:\\n${SOURCE}\\n\")",208],["* The installation package was faulty and contained",399],["* The file was deleted, renamed, or moved to another location.",399],["# This macro was taken directly from the FindQt4.cmake file that is included",109],["# with the CMake distribution. This is NOT my work. All work was done by the",109],["# Created by Eric Wing. This was influenced by the FindSDL.cmake",114],["# if only the debug version was found, set the release variable also to the debug version",165]],"useCount":9859},{"word":"we","context":[["# Since nvcc can sometimes leave half done files make sure that we delete the output file.",197],["# Search default search paths, after we search our own set of paths.",196],["# We won't actually use these variables for now, but we need to set this, in",198],["# Set build-directive (used in core to tell which buildtype we used)",188],["# Help the user find it if we cannot.",186],["# see if we have path to Android standalone toolchain",126],["# If we weren't given a build_configuration, use Debug.",198],["# Now we need to build up our command string.  We are accounting for quotes",198],["# see if we have path to Android NDK",126],["# since the path where the library is found is returned we have to iterate over the paths manually",605]],"useCount":21869},{"word":"well","context":[["# well before the dependent libraries of the dictionary are build",37],["# testing this directory and lists subdirectories to be tested as well.",2367],["# Clang version 3.0.0 and greater now supports gcov as well.",83],["# should be searched for input files as well. Possible values are YES and NO.",64],["#Install to the OSG_DIR as well",48],["# wants explicit full paths and this trickery doesn't work too well.",42],["# We probably have -showme:incdirs and -showme:libdirs as well,",41],["#   be a header file as well as an internal header file being generated called",41],["# that links to our library links to this one as well.",36],["#                                       found, as well as all the libraries specified in",35]],"useCount":3418},{"word":"what","context":[["# include files and libraries are. It also determines what the name of",112],["#                               what CMake does.",198],["# We need to set the linker language based on what the expected generated file",130],["#    check what the source file would have printed when called with the given arguments.",119],["# add library dependencies here; leave ${PLUGIN_INTERNAL_DEPS} there unless you know what you're doing!",116],["# Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:",78],["# what is the filename without the extension",78],["# and libraries are. It also determines what the name of the library is. This",74],["message(FATAL_ERROR \"There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.\")",65],["# standard header. Notice: only use this tag if you know what you are doing!",63]],"useCount":2795},{"word":"when","context":[["BRIEF_DOCS \"Ignore headers from these directories when generating the prefix header.\"",114],["# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This",192],["set( CMAKE_SKIP_RPATH TRUE CACHE BOOL \"If set, runtime paths are not added when using shared libraries.\" )",115],["#    check what the source file would have printed when called with the given arguments.",119],["## and cmake variables are global, so when including sub projects it",143],["# variable, but when these values are unset, SDL2_LIBRARY does not get created.",174],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# can cause incorrect dependencies when #including files based on this macro which is",192],["# warn when using a deprecated package",605],["#                               configuration used when compiling the code.  If",198]],"useCount":11253},{"word":"where","context":[["# Show info where to find the report",195],["# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache",102],["# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache",102],["# to tell CMake where SFML is.",104],["# SDL2_INCLUDE_DIR, where to find SDL.h",162],["DOC \"The directory where GL/glew.h resides\")",170],["/* Define to the address where bug reports for this package should be sent. */",187],["# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This",99],["# where is the target environment",315],["# since the path where the library is found is returned we have to iterate over the paths manually",605]],"useCount":10559},{"word":"whether","context":[["#    indicates whether the executable would have been able to run on its",150],["# Determine whether to search for a dynamic or static build",66],["# Set whether we are using emulation or device mode.",65],["# Specifies whether the commands used when compiling the .cu file will be printed out.",65],["# The RECURSIVE tag can be used to turn specify whether or not subdirectories",64],["# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index",73],["# check whether time_t is unsigned",76],["# Check_Fortran_Function_Exists macro) whether can link against that library",78],["# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI",98],["# to other libraries to select whether to use the static or shared",100]],"useCount":3063},{"word":"which","context":[["# Make sure the targets which have been exported in some other",198],["# can cause incorrect dependencies when #including files based on this macro which is",192],["# Added a search for threads which is needed by some platforms.",247],["# which compilers to use for C and C++",285],["# The set of languages for which implicit dependencies are needed:",10677],["# Targets to which this target links.",10677],["# Added a search for SDL2main which is needed by some platforms.",196],["# Set build-directive (used in core to tell which buildtype we used)",188],["# This file does not depend on other imported targets which have",184],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178]],"useCount":33851},{"word":"will","context":[["# this module will try to find on your behalf.) Also for OS X, this",226],["# Once done this will define",4139],["# Once done, this will define",984],["# This file will be configured to contain variables for CPack. These variables",370],["# If a relative path is entered the value of OUTPUT_DIRECTORY will be",321],["# People will have to manually change the cache values of",300],["# On OSX, this will prefer the Framework version (if found) over others.",292],["# This module will define the following variables:",241],["# But for non-OSX systems, I will use the CMake Threads package.",239],["# module will automatically add the -framework Cocoa on your behalf.",226]],"useCount":45057},{"word":"windows","context":[["#include <windows.h>",81],["\"/opt/ros/indigo/share/catkin/cmake/platform/windows.cmake\"",88],["# In windows, automatic linking is performed, so you do not have",89],["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135],["\"  http://doc.qt.io/qt-5/windows-requirements.html\"",132],["#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..",132],["# make sure we have / and not \\ as qmake gives on windows",94],["# SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /subsystem:windows\")",96],["set( ANDROID_NDK_HOST_SYSTEM_NAME2 \"windows\" )",107],["set( ANDROID_NDK_HOST_SYSTEM_NAME \"windows-x86_64\" )",113]],"useCount":2977},{"word":"with","context":[["#   documentation and/or other materials provided with the distribution.",293],["#    and/or other materials provided with the distribution.",340],["#       documentation and/or other materials provided with the distribution.",374],["# unpack a list of libraries with optional build configuration keyword prefixes",586],["# pack a list of libraries with optional build configuration keywords",586],["# merge build configuration keywords with library names to correctly deduplicate",586],["# dependencies with components must be find_package()-ed again",605],["#   and/or other materials provided with the distribution.",310],["# documentation and/or other materials provided with the distribution.",770],["# Redistribution and use in source and binary forms, with or without",2447]],"useCount":39699},{"word":"without","context":[["# system without loading the plug-ins shared library,",77],["Stuff that always need to be defined (compile breaks without it)",71],["# We want to use the tag inline below without risking double dashes",66],["#     [+] added possibility to build with NDK (without standalone toolchain)",66],["#   CMAKE_REQUIRED_QUIET = execute quietly without messages",63],["# Redistribution and use in source and binary forms, with or without",2447],["#  Redistribution and use in source and binary forms, with or without",109],["# If using memchecker add tests without using scripts",106],["# Redistribution and use in source and binary forms, with or without modification,",83],["# what is the filename without the extension",78]],"useCount":5443},{"word":"work","context":[["# work by or on behalf of the U.S. Government.  Export of this program",397],["# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag",192],["# distributed with this work for additional information",186],["# default FindOpenGL.cmake module doesn't work with your system as an",159],["# with the CMake distribution. This is NOT my work. All work was done by the",109],["# with the CMake distribution. This is NOT my work. All work was done by the",109],["# we could read this from version.hpp, but for that to work we'd",90],["# This definition is necessary to work around a bug with Intellisense described",87],["# to work around the problems.",85],["# replace won't work if var is blank",83]],"useCount":4577},{"word":"would","context":[["#    contains the text the executable would have printed on stdout and stderr.",119],["# would return inconsistent result.",77],["# would be unable to find the correct page. The default is NO.",62],["# Protect against multiple inclusion, which would fail when already imported targets are added once more.",178],["# $SDLDIR is an environment variable that would",175],["# $SDL2DIR is an environment variable that would",157],["# $OSGDIR is an environment variable that would",153],["#    indicates whether the executable would have been able to run on its",150],["# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.",130],["#    check what the source file would have printed when called with the given arguments.",119]],"useCount":3330},{"word":"www","context":[["# http://www.irisa.fr/lagadic",98],["# See http://www.irisa.fr/lagadic/visp/visp.html for more information.",95],["# www.mip.informatik.uni-kiel.de/~jw",81],["# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",80],["# http://www.slproweb.com/products/Win32OpenSSL.html",75],["#                             > www.orxonox.net <",65],["set(CTEST_DROP_SITE \"www.cdash.org\")",59],["# http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries",56],["#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html",56],["# For the latest info, see http://www.ogre3d.org/",448]],"useCount":3436},{"word":"x","context":[["string( REPLACE \"x\" \"99\" __toolchainVersion \"${__toolchainVersion}\")",105],["#   7.x == Mac OSX 10.3 (Panther)",55],["#   8.x == Mac OSX 10.4 (Tiger)",64],["#   9.x == Mac OSX 10.5 (Leopard)",64],["set(${var} \"NOTFOUND\" CACHE STRING \"x\" FORCE)",66],["set(${TESTVAR}_INT_CHECK ${${TESTVAR}} CACHE INTERNAL \"x\" FORCE)",66],["set(SFML_VERSION_MINOR x)",98],["#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version",74],["COMMAND ${GCOVR_PATH} -x -r ${CMAKE_SOURCE_DIR} -e '${CMAKE_SOURCE_DIR}/tests/'  -o ${_outputname}.xml",69],["#  10.x == Mac OSX 10.6 (Snow Leopard)",68]],"useCount":4291},{"word":"x86","context":[["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135],["set(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/LLVM\")",285],["SET(CMAKE_INSTALL_PREFIX \"C:/Program Files (x86)/OpenSceneGraph\")",291],["#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform",135],["set( ANDROID_SUPPORTED_ABIS_x86 \"x86\" )",136],["set( __availableToolchainArchs \"x86\" )",136],["set( ANDROID_ARCH_NAME \"x86\" )",136],["set( ANDROID_NDK_ABI_NAME \"x86\" )",136],["if( ANDROID_ABI STREQUAL \"x86\" )",137],["lib/x86",142]],"useCount":6649},{"word":"x86_64","context":[["set(CMAKE_SYSTEM_PROCESSOR \"x86_64\")",313],["set(CMAKE_HOST_SYSTEM_PROCESSOR \"x86_64\")",303],["SET(CMAKE_HOST_SYSTEM_PROCESSOR \"x86_64\")",149],["SET(CMAKE_SYSTEM_PROCESSOR \"x86_64\")",144],["set( ANDROID_NDK_HOST_SYSTEM_NAME \"linux-x86_64\" )",115],["set( ANDROID_NDK_HOST_SYSTEM_NAME \"darwin-x86_64\" )",114],["SET(DEFAULT_MACHINE \"x86_64\")",84],["x86_64-w64-mingw32/lib",91],["#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)",108],["set( ANDROID_NDK_HOST_SYSTEM_NAME \"windows-x86_64\" )",113]],"useCount":4528},{"word":"xml","context":[["plugin.xml",161],["if(xml)",46],["OR EXISTS \"${CMAKE_SOURCE_DIR}/AndroidManifest.xml\"",50],["OR (EXISTS \"${CMAKE_SOURCE_DIR}/../AndroidManifest.xml\" AND EXISTS \"${CMAKE_SOURCE_DIR}/../jni/\") )",55],["# put in front of it. If left blank `xml' will be used as the default path.",62],["COMMAND ${GCOVR_PATH} -x -r ${CMAKE_SOURCE_DIR} -e '${CMAKE_SOURCE_DIR}/tests/'  -o ${_outputname}.xml",69],["\"/opt/ros/indigo/share/catkin/cmake/../package.xml\"",88],["# Param _outputname     cobertura output is generated as _outputname.xml",90],["COMMENT \"Cobertura code coverage report saved in ${_outputname}.xml.\"",91],["XML_OUTPUT             = xml",120]],"useCount":2675},{"word":"you","context":[["/* Define to 1 if you have the <inttypes.h> header file. */",189],["# Non-OS X framework versions expect you to also dynamically link to",233],["/* Define to 1 if you have the <sys/stat.h> header file. */",189],["# Otherwise, it is assumed you are building an application and this",187],["# If you have questions regarding the use of this file, please contact",186],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value",203],["/* Define to 1 if you have the <stdint.h> header file. */",203],["/* Define to 1 if you have the <sys/types.h> header file. */",214],["/* Define to 1 if you have the <unistd.h> header file. */",225]],"useCount":25227},{"word":"your","context":[["# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library",164],["# Don't forget to include SDLmain.h and SDLmain.m your project for the",144],["# module will automatically add the -framework Cocoa on your behalf.",226],["# this module will try to find on your behalf.) Also for OS X, this",226],["# default FindOpenGL.cmake module doesn't work with your system as an",159],["# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration",172],["# modules won't do it for you. This is to allow you control over your own",159],["# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.",160],["## This file should be placed in the root directory of your project.",230],["## Then modify the CMakeLists.txt file in the root directory of your",231]],"useCount":8673},{"word":"z","context":[["# Once anyone knows how OpenSSL would call the patch versions beyond 'z'",51],["STRING(REGEX MATCH \"^/|([A-Za-z]:/)\" _ABS_PATH_INDICATOR \"${_RC_FILE}\")",65],["file( STRINGS \"${ANDROID_NDK}/RELEASE.TXT\" ANDROID_NDK_RELEASE_FULL LIMIT_COUNT 1 REGEX \"r[0-9]+[a-z]?\" )",68],["string( REGEX REPLACE \"r([0-9]+)([a-z]?)\" \"\\\\1*1000\" ANDROID_NDK_RELEASE_NUM \"${ANDROID_NDK_RELEASE}\" )",69],["string( REGEX MATCH \"r([0-9]+)([a-z]?)\" ANDROID_NDK_RELEASE \"${ANDROID_NDK_RELEASE_FULL}\" )",69],["set( CMAKE_EXE_LINKER_FLAGS    \"-Wl,-z,nocopyreloc\"      CACHE STRING \"executable linker flags\" )",110],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE \"z\"",81],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now\" )",112],["set( ANDROID_LINKER_FLAGS \"${ANDROID_LINKER_FLAGS} -Wl,-z,noexecstack\" )",112]],"useCount":2086},{"word":"z0","context":[["if(\"${line}\" MATCHES \"^#  [A-Za-z0-9_]+\\\\(\")",19],["string(REGEX REPLACE \"^#  ([A-Za-z0-9_]+)\\\\(.*\" \"\\\\1\" _ep_func \"${line}\")",15],["if(key MATCHES \"^[A-Za-z_][A-Za-z0-9_]*$\")",15],["string(REGEX REPLACE \"[^_A-Za-z0-9]\" \"_\" _symbol ${_symbol})",14],["\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+[-_a-z0-9]*\"",11],["string(REGEX REPLACE \"%[A-Za-z0-9\\(\\),-]* \" \"\" F_PATH ${F})",11],["REGEX \"^#  (  \\\\[[A-Z0-9_]+ [^]]*\\\\] +#.*$|[A-Za-z0-9_]+\\\\()\")",20],["string (REGEX MATCHALL \"COTIRE_[A-Za-z0-9_]+\" _matchVars \"${_vars}\")",38],["string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",2385],["STRING(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"",5696]],"useCount":8246},{"word":"zlib","context":[["\"/home/adbms/mysqlsrc/mysql-5.6.21/zlib/CMakeFiles/zlib.dir/DependInfo.cmake\"",45],["\"/home/adbms/mysqlsrc/mysql-5.6.21/zlib/CMakeFiles/zlib.dir/DependInfo.cmake\"",45],["z zlib",41],["\"if more libraries are necessary to link in a MySQL client (typically zlib), specify them here.\"",41],["# - Find zlib",39],["DEPENDS zlib",36],["IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE \"zlib\"",36],["/* Define to 1 if you have the <zlib.h> header file. */",53],["\"zlib\"",132],["IMPORTED_LINK_INTERFACE_LIBRARIES_DEBUG \"zlib\"",36]],"useCount":2223},{"word":"~","context":[["#     [~] search for all supported NDK versions",65],["#     [~] toolchain exits with error if ARM_TARGET is not recognized",65],["#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL",65],["#     [~] turn off SWIG search if it is not found first time",66],["~/Library/Frameworks",2425],["export ANDROID_NDK=~/my-android-ndk",140],["export ANDROID_STANDALONE_TOOLCHAIN=~/my-android-toolchain",134],["#     [~] ARM_TARGETS renamed to ARM_TARGET",66],["sudo ln -s ~/my-android-toolchain ${ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH}\" )",133],["sudo ln -s ~/my-android-ndk ${ANDROID_NDK_SEARCH_PATH}",74]],"useCount":5504}]